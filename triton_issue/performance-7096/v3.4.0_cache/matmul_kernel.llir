; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr #0 !dbg !5 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %12 = add i32 %3, 63, !dbg !9
  %13 = sdiv i32 %12, 64, !dbg !13
  %14 = add i32 %4, 127, !dbg !14
  %15 = sdiv i32 %14, 128, !dbg !16
  %16 = shl nsw i32 %15, 3, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %17 = sdiv i32 %11, %.frozen, !dbg !18
  %18 = shl i32 %17, 3, !dbg !19
  %19 = sub i32 %13, %18, !dbg !20
  %20 = tail call i32 @llvm.smin.i32(i32 %19, i32 8), !dbg !21
  %21 = mul i32 %17, %.frozen, !dbg !22
  %.decomposed = sub i32 %11, %21, !dbg !22
  %.frozen562 = freeze i32 %20, !dbg !23
  %22 = sdiv i32 %.decomposed, %.frozen562, !dbg !23
  %23 = mul i32 %22, %.frozen562, !dbg !24
  %.decomposed563 = sub i32 %.decomposed, %23, !dbg !24
  %24 = add i32 %.decomposed563, %18, !dbg !25
  %25 = shl i32 %24, 6, !dbg !26
  %26 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !27
  %27 = and i32 %26, 16, !dbg !27
  %28 = lshr i32 %26, 3, !dbg !27
  %29 = and i32 %28, 15, !dbg !27
  %.lobit2293 = lshr i32 %26, 4, !dbg !27
  %30 = and i32 %.lobit2293, 7, !dbg !27
  %31 = or disjoint i32 %30, 8, !dbg !27
  %32 = or disjoint i32 %30, 16, !dbg !27
  %33 = or disjoint i32 %30, 24, !dbg !27
  %34 = or disjoint i32 %30, 32, !dbg !27
  %35 = or disjoint i32 %30, 40, !dbg !27
  %36 = or disjoint i32 %30, 48, !dbg !27
  %37 = or i32 %.lobit2293, 56, !dbg !27
  %38 = or disjoint i32 %25, %29, !dbg !28
  %39 = or disjoint i32 %38, 16, !dbg !28
  %40 = or disjoint i32 %38, 32, !dbg !28
  %41 = or disjoint i32 %38, 48, !dbg !28
  %42 = srem i32 %38, %3, !dbg !29
  %43 = srem i32 %39, %3, !dbg !29
  %44 = srem i32 %40, %3, !dbg !29
  %45 = srem i32 %41, %3, !dbg !29
  %46 = shl i32 %22, 7, !dbg !30
  %47 = shl nuw nsw i32 %26, 3, !dbg !31
  %48 = and i32 %47, 56, !dbg !31
  %49 = and i32 %47, 120, !dbg !31
  %50 = or disjoint i32 %46, %49, !dbg !32
  %51 = srem i32 %50, %4, !dbg !33
  %52 = mul i32 %42, %6, !dbg !34
  %53 = mul i32 %43, %6, !dbg !34
  %54 = mul i32 %44, %6, !dbg !34
  %55 = mul i32 %45, %6, !dbg !34
  %56 = add i32 %52, %48, !dbg !35
  %57 = add i32 %53, %48, !dbg !35
  %58 = add i32 %54, %48, !dbg !35
  %59 = add i32 %55, %48, !dbg !35
  %60 = sext i32 %56 to i64, !dbg !36
  %61 = getelementptr half, ptr addrspace(1) %0, i64 %60, !dbg !36
  %62 = sext i32 %57 to i64, !dbg !36
  %63 = getelementptr half, ptr addrspace(1) %0, i64 %62, !dbg !36
  %64 = sext i32 %58 to i64, !dbg !36
  %65 = getelementptr half, ptr addrspace(1) %0, i64 %64, !dbg !36
  %66 = sext i32 %59 to i64, !dbg !36
  %67 = getelementptr half, ptr addrspace(1) %0, i64 %66, !dbg !36
  %68 = mul i32 %7, %30, !dbg !37
  %69 = mul i32 %7, %31, !dbg !37
  %70 = mul i32 %7, %32, !dbg !37
  %71 = mul i32 %7, %33, !dbg !37
  %72 = mul i32 %7, %34, !dbg !37
  %73 = mul i32 %7, %35, !dbg !37
  %74 = mul i32 %7, %36, !dbg !37
  %75 = mul i32 %7, %37, !dbg !37
  %76 = add i32 %51, %68, !dbg !38
  %77 = add i32 %51, %69, !dbg !38
  %78 = add i32 %51, %70, !dbg !38
  %79 = add i32 %51, %71, !dbg !38
  %80 = add i32 %51, %72, !dbg !38
  %81 = add i32 %51, %73, !dbg !38
  %82 = add i32 %51, %74, !dbg !38
  %83 = add i32 %51, %75, !dbg !38
  %84 = sext i32 %76 to i64, !dbg !39
  %85 = getelementptr half, ptr addrspace(1) %1, i64 %84, !dbg !39
  %86 = sext i32 %77 to i64, !dbg !39
  %87 = getelementptr half, ptr addrspace(1) %1, i64 %86, !dbg !39
  %88 = sext i32 %78 to i64, !dbg !39
  %89 = getelementptr half, ptr addrspace(1) %1, i64 %88, !dbg !39
  %90 = sext i32 %79 to i64, !dbg !39
  %91 = getelementptr half, ptr addrspace(1) %1, i64 %90, !dbg !39
  %92 = sext i32 %80 to i64, !dbg !39
  %93 = getelementptr half, ptr addrspace(1) %1, i64 %92, !dbg !39
  %94 = sext i32 %81 to i64, !dbg !39
  %95 = getelementptr half, ptr addrspace(1) %1, i64 %94, !dbg !39
  %96 = sext i32 %82 to i64, !dbg !39
  %97 = getelementptr half, ptr addrspace(1) %1, i64 %96, !dbg !39
  %98 = sext i32 %83 to i64, !dbg !39
  %99 = getelementptr half, ptr addrspace(1) %1, i64 %98, !dbg !39
  %100 = add i32 %5, 63, !dbg !40
  %101 = sdiv i32 %100, 64, !dbg !42
  %102 = shl i32 %7, 6, !dbg !43
  %103 = icmp sgt i32 %100, 63, !dbg !44
  %104 = icmp slt i32 %48, %5, !dbg !45
  %105 = and i1 %104, %103, !dbg !44
  %106 = xor i32 %47, %26, !dbg !46
  %107 = and i32 %106, 56, !dbg !46
  %108 = shl nuw nsw i32 %29, 6, !dbg !46
  %109 = or disjoint i32 %107, %108, !dbg !46
  %110 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %109, !dbg !46
  %111 = or disjoint i32 %109, 1024, !dbg !46
  %112 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %111, !dbg !46
  %113 = or disjoint i32 %109, 2048, !dbg !46
  %114 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %113, !dbg !46
  %115 = or disjoint i32 %109, 3072, !dbg !46
  %116 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %115, !dbg !46
  %117 = select i1 %105, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %110, ptr addrspace(1) %61, i32 %117) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %63, i32 %117) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %114, ptr addrspace(1) %65, i32 %117) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %116, ptr addrspace(1) %67, i32 %117) #2, !dbg !46
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !46
  %118 = icmp slt i32 %30, %5, !dbg !47
  %119 = icmp slt i32 %31, %5, !dbg !47
  %120 = icmp slt i32 %32, %5, !dbg !47
  %121 = icmp slt i32 %33, %5, !dbg !47
  %122 = icmp slt i32 %34, %5, !dbg !47
  %123 = icmp slt i32 %35, %5, !dbg !47
  %124 = icmp slt i32 %36, %5, !dbg !47
  %125 = icmp slt i32 %37, %5, !dbg !47
  %126 = and i1 %118, %103, !dbg !44
  %127 = and i1 %119, %103, !dbg !44
  %128 = and i1 %120, %103, !dbg !44
  %129 = and i1 %121, %103, !dbg !44
  %130 = and i1 %122, %103, !dbg !44
  %131 = and i1 %123, %103, !dbg !44
  %132 = and i1 %124, %103, !dbg !44
  %133 = and i1 %125, %103, !dbg !44
  %134 = lshr i32 %26, 1, !dbg !48
  %135 = and i32 %134, 56, !dbg !48
  %136 = xor i32 %135, %49, !dbg !48
  %137 = shl nuw nsw i32 %30, 7, !dbg !48
  %138 = or disjoint i32 %137, %136, !dbg !48
  %139 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %138, !dbg !48
  %140 = or disjoint i32 %138, 1024, !dbg !48
  %141 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %140, !dbg !48
  %142 = or disjoint i32 %138, 2048, !dbg !48
  %143 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %142, !dbg !48
  %144 = or disjoint i32 %138, 3072, !dbg !48
  %145 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %144, !dbg !48
  %146 = or disjoint i32 %138, 4096, !dbg !48
  %147 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %146, !dbg !48
  %148 = or disjoint i32 %138, 5120, !dbg !48
  %149 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %148, !dbg !48
  %150 = or disjoint i32 %138, 6144, !dbg !48
  %151 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %150, !dbg !48
  %152 = or disjoint i32 %138, 7168, !dbg !48
  %153 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %152, !dbg !48
  %154 = select i1 %126, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %139, ptr addrspace(1) %85, i32 %154) #2, !dbg !48
  %155 = select i1 %127, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %141, ptr addrspace(1) %87, i32 %155) #2, !dbg !48
  %156 = select i1 %128, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %143, ptr addrspace(1) %89, i32 %156) #2, !dbg !48
  %157 = select i1 %129, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %145, ptr addrspace(1) %91, i32 %157) #2, !dbg !48
  %158 = select i1 %130, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %147, ptr addrspace(1) %93, i32 %158) #2, !dbg !48
  %159 = select i1 %131, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %149, ptr addrspace(1) %95, i32 %159) #2, !dbg !48
  %160 = select i1 %132, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %151, ptr addrspace(1) %97, i32 %160) #2, !dbg !48
  %161 = select i1 %133, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %153, ptr addrspace(1) %99, i32 %161) #2, !dbg !48
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !48
  %162 = icmp sgt i32 %100, 127, !dbg !44
  %163 = getelementptr i8, ptr addrspace(1) %61, i64 128, !dbg !49
  %164 = getelementptr i8, ptr addrspace(1) %63, i64 128, !dbg !49
  %165 = getelementptr i8, ptr addrspace(1) %65, i64 128, !dbg !49
  %166 = getelementptr i8, ptr addrspace(1) %67, i64 128, !dbg !49
  %167 = sext i32 %102 to i64, !dbg !50
  %168 = getelementptr half, ptr addrspace(1) %85, i64 %167, !dbg !50
  %169 = getelementptr half, ptr addrspace(1) %87, i64 %167, !dbg !50
  %170 = getelementptr half, ptr addrspace(1) %89, i64 %167, !dbg !50
  %171 = getelementptr half, ptr addrspace(1) %91, i64 %167, !dbg !50
  %172 = getelementptr half, ptr addrspace(1) %93, i64 %167, !dbg !50
  %173 = getelementptr half, ptr addrspace(1) %95, i64 %167, !dbg !50
  %174 = getelementptr half, ptr addrspace(1) %97, i64 %167, !dbg !50
  %175 = getelementptr half, ptr addrspace(1) %99, i64 %167, !dbg !50
  %176 = add i32 %5, -64, !dbg !51
  %177 = icmp slt i32 %48, %176, !dbg !45
  %178 = and i1 %162, %177, !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !46
  %179 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %109, !dbg !46
  %180 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %111, !dbg !46
  %181 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %113, !dbg !46
  %182 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %115, !dbg !46
  %183 = select i1 %178, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %179, ptr addrspace(1) %163, i32 %183) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %180, ptr addrspace(1) %164, i32 %183) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %181, ptr addrspace(1) %165, i32 %183) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %182, ptr addrspace(1) %166, i32 %183) #2, !dbg !46
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !46
  %184 = icmp slt i32 %30, %176, !dbg !47
  %185 = icmp slt i32 %31, %176, !dbg !47
  %186 = icmp slt i32 %32, %176, !dbg !47
  %187 = icmp slt i32 %33, %176, !dbg !47
  %188 = icmp slt i32 %34, %176, !dbg !47
  %189 = icmp slt i32 %35, %176, !dbg !47
  %190 = icmp slt i32 %36, %176, !dbg !47
  %191 = icmp slt i32 %37, %176, !dbg !47
  %192 = and i1 %162, %184, !dbg !44
  %193 = and i1 %162, %185, !dbg !44
  %194 = and i1 %162, %186, !dbg !44
  %195 = and i1 %162, %187, !dbg !44
  %196 = and i1 %162, %188, !dbg !44
  %197 = and i1 %162, %189, !dbg !44
  %198 = and i1 %162, %190, !dbg !44
  %199 = and i1 %162, %191, !dbg !44
  %200 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %138, !dbg !48
  %201 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %140, !dbg !48
  %202 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %142, !dbg !48
  %203 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %144, !dbg !48
  %204 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %146, !dbg !48
  %205 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %148, !dbg !48
  %206 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %150, !dbg !48
  %207 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %152, !dbg !48
  %208 = select i1 %192, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %200, ptr addrspace(1) %168, i32 %208) #2, !dbg !48
  %209 = select i1 %193, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %201, ptr addrspace(1) %169, i32 %209) #2, !dbg !48
  %210 = select i1 %194, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %202, ptr addrspace(1) %170, i32 %210) #2, !dbg !48
  %211 = select i1 %195, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %203, ptr addrspace(1) %171, i32 %211) #2, !dbg !48
  %212 = select i1 %196, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %204, ptr addrspace(1) %172, i32 %212) #2, !dbg !48
  %213 = select i1 %197, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %205, ptr addrspace(1) %173, i32 %213) #2, !dbg !48
  %214 = select i1 %198, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %206, ptr addrspace(1) %174, i32 %214) #2, !dbg !48
  %215 = select i1 %199, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %207, ptr addrspace(1) %175, i32 %215) #2, !dbg !48
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !48
  %216 = icmp sgt i32 %100, 191, !dbg !44
  %217 = getelementptr i8, ptr addrspace(1) %61, i64 256, !dbg !49
  %218 = getelementptr i8, ptr addrspace(1) %63, i64 256, !dbg !49
  %219 = getelementptr i8, ptr addrspace(1) %65, i64 256, !dbg !49
  %220 = getelementptr i8, ptr addrspace(1) %67, i64 256, !dbg !49
  %221 = getelementptr half, ptr addrspace(1) %168, i64 %167, !dbg !50
  %222 = getelementptr half, ptr addrspace(1) %169, i64 %167, !dbg !50
  %223 = getelementptr half, ptr addrspace(1) %170, i64 %167, !dbg !50
  %224 = getelementptr half, ptr addrspace(1) %171, i64 %167, !dbg !50
  %225 = getelementptr half, ptr addrspace(1) %172, i64 %167, !dbg !50
  %226 = getelementptr half, ptr addrspace(1) %173, i64 %167, !dbg !50
  %227 = getelementptr half, ptr addrspace(1) %174, i64 %167, !dbg !50
  %228 = getelementptr half, ptr addrspace(1) %175, i64 %167, !dbg !50
  %229 = add i32 %5, -128, !dbg !51
  %230 = icmp slt i32 %48, %229, !dbg !45
  %231 = and i1 %216, %230, !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !46
  %232 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %109, !dbg !46
  %233 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %111, !dbg !46
  %234 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %113, !dbg !46
  %235 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %115, !dbg !46
  %236 = select i1 %231, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %232, ptr addrspace(1) %217, i32 %236) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %233, ptr addrspace(1) %218, i32 %236) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %234, ptr addrspace(1) %219, i32 %236) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %235, ptr addrspace(1) %220, i32 %236) #2, !dbg !46
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !46
  %237 = icmp slt i32 %30, %229, !dbg !47
  %238 = icmp slt i32 %31, %229, !dbg !47
  %239 = icmp slt i32 %32, %229, !dbg !47
  %240 = icmp slt i32 %33, %229, !dbg !47
  %241 = icmp slt i32 %34, %229, !dbg !47
  %242 = icmp slt i32 %35, %229, !dbg !47
  %243 = icmp slt i32 %36, %229, !dbg !47
  %244 = icmp slt i32 %37, %229, !dbg !47
  %245 = and i1 %216, %237, !dbg !44
  %246 = and i1 %216, %238, !dbg !44
  %247 = and i1 %216, %239, !dbg !44
  %248 = and i1 %216, %240, !dbg !44
  %249 = and i1 %216, %241, !dbg !44
  %250 = and i1 %216, %242, !dbg !44
  %251 = and i1 %216, %243, !dbg !44
  %252 = and i1 %216, %244, !dbg !44
  %253 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %138, !dbg !48
  %254 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %140, !dbg !48
  %255 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %142, !dbg !48
  %256 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %144, !dbg !48
  %257 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %146, !dbg !48
  %258 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %148, !dbg !48
  %259 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %150, !dbg !48
  %260 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %152, !dbg !48
  %261 = select i1 %245, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %253, ptr addrspace(1) %221, i32 %261) #2, !dbg !48
  %262 = select i1 %246, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %254, ptr addrspace(1) %222, i32 %262) #2, !dbg !48
  %263 = select i1 %247, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %255, ptr addrspace(1) %223, i32 %263) #2, !dbg !48
  %264 = select i1 %248, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %256, ptr addrspace(1) %224, i32 %264) #2, !dbg !48
  %265 = select i1 %249, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %257, ptr addrspace(1) %225, i32 %265) #2, !dbg !48
  %266 = select i1 %250, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %258, ptr addrspace(1) %226, i32 %266) #2, !dbg !48
  %267 = select i1 %251, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %259, ptr addrspace(1) %227, i32 %267) #2, !dbg !48
  %268 = select i1 %252, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %260, ptr addrspace(1) %228, i32 %268) #2, !dbg !48
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !48
  br i1 %103, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !44

.._crit_edge_crit_edge:                           ; preds = %10
  %.pre = lshr i32 %26, 2, !dbg !52
  %.pre370 = and i32 %.pre, 24, !dbg !52
  br label %._crit_edge, !dbg !44

.lr.ph:                                           ; preds = %10
  %269 = lshr exact i32 %27, 1, !dbg !48
  %270 = and i32 %26, 4, !dbg !31
  %271 = icmp eq i32 %270, 0, !dbg !31
  %272 = add nsw i32 %101, -3
  %273 = and i32 %26, 3
  %274 = mul nuw nsw i32 %273, 72
  %275 = select i1 %271, i32 0, i32 288
  %276 = xor i32 %275, %274
  %277 = shl nuw nsw i32 %26, 6
  %278 = and i32 %277, 512
  %279 = or disjoint i32 %276, %278
  %280 = xor i32 %279, %269
  %281 = xor i32 %280, 16
  %282 = xor i32 %280, 32
  %283 = xor i32 %280, 48
  %284 = xor i32 %280, 1040
  %285 = xor i32 %280, 1056
  %286 = xor i32 %280, 1072
  %287 = xor i32 %280, 2064
  %288 = xor i32 %280, 2080
  %289 = xor i32 %280, 2096
  %290 = xor i32 %280, 3088
  %291 = xor i32 %280, 3104
  %292 = xor i32 %280, 3120
  %293 = mul nuw nsw i32 %273, 136
  %294 = select i1 %271, i32 0, i32 544
  %295 = xor i32 %294, %293
  %296 = shl nuw nsw i32 %26, 7
  %297 = and i32 %296, 3072
  %298 = or disjoint i32 %295, %297
  %299 = lshr i32 %26, 2
  %300 = and i32 %299, 24
  %301 = xor i32 %298, %300
  %302 = xor i32 %301, 32
  %303 = xor i32 %301, 4128
  %304 = xor i32 %301, 64
  %305 = xor i32 %301, 4160
  %306 = xor i32 %301, 96
  %307 = xor i32 %301, 4192
  %.neg356 = add nsw i32 %5, -192
  br label %308, !dbg !44

308:                                              ; preds = %.lr.ph, %308
  %309 = phi i32 [ -1, %.lr.ph ], [ %379, %308 ]
  %310 = phi i32 [ 2, %.lr.ph ], [ %884, %308 ]
  %.pn82368 = phi ptr addrspace(1) [ %228, %.lr.ph ], [ %881, %308 ]
  %.pn98367 = phi ptr addrspace(1) [ %227, %.lr.ph ], [ %880, %308 ]
  %.pn114366 = phi ptr addrspace(1) [ %226, %.lr.ph ], [ %879, %308 ]
  %.pn130365 = phi ptr addrspace(1) [ %225, %.lr.ph ], [ %878, %308 ]
  %.pn146364 = phi ptr addrspace(1) [ %224, %.lr.ph ], [ %877, %308 ]
  %.pn162363 = phi ptr addrspace(1) [ %223, %.lr.ph ], [ %876, %308 ]
  %.pn178362 = phi ptr addrspace(1) [ %222, %.lr.ph ], [ %875, %308 ]
  %.pn194361 = phi ptr addrspace(1) [ %221, %.lr.ph ], [ %874, %308 ]
  %.pn18360 = phi ptr addrspace(1) [ %220, %.lr.ph ], [ %873, %308 ]
  %.pn34359 = phi ptr addrspace(1) [ %219, %.lr.ph ], [ %872, %308 ]
  %.pn50358 = phi ptr addrspace(1) [ %218, %.lr.ph ], [ %871, %308 ]
  %.pn66357 = phi ptr addrspace(1) [ %217, %.lr.ph ], [ %870, %308 ]
  %311 = phi float [ 0.000000e+00, %.lr.ph ], [ %791, %308 ]
  %312 = phi float [ 0.000000e+00, %.lr.ph ], [ %792, %308 ]
  %313 = phi float [ 0.000000e+00, %.lr.ph ], [ %793, %308 ]
  %314 = phi float [ 0.000000e+00, %.lr.ph ], [ %794, %308 ]
  %315 = phi float [ 0.000000e+00, %.lr.ph ], [ %796, %308 ]
  %316 = phi float [ 0.000000e+00, %.lr.ph ], [ %797, %308 ]
  %317 = phi float [ 0.000000e+00, %.lr.ph ], [ %798, %308 ]
  %318 = phi float [ 0.000000e+00, %.lr.ph ], [ %799, %308 ]
  %319 = phi float [ 0.000000e+00, %.lr.ph ], [ %801, %308 ]
  %320 = phi float [ 0.000000e+00, %.lr.ph ], [ %802, %308 ]
  %321 = phi float [ 0.000000e+00, %.lr.ph ], [ %803, %308 ]
  %322 = phi float [ 0.000000e+00, %.lr.ph ], [ %804, %308 ]
  %323 = phi float [ 0.000000e+00, %.lr.ph ], [ %806, %308 ]
  %324 = phi float [ 0.000000e+00, %.lr.ph ], [ %807, %308 ]
  %325 = phi float [ 0.000000e+00, %.lr.ph ], [ %808, %308 ]
  %326 = phi float [ 0.000000e+00, %.lr.ph ], [ %809, %308 ]
  %327 = phi float [ 0.000000e+00, %.lr.ph ], [ %811, %308 ]
  %328 = phi float [ 0.000000e+00, %.lr.ph ], [ %812, %308 ]
  %329 = phi float [ 0.000000e+00, %.lr.ph ], [ %813, %308 ]
  %330 = phi float [ 0.000000e+00, %.lr.ph ], [ %814, %308 ]
  %331 = phi float [ 0.000000e+00, %.lr.ph ], [ %816, %308 ]
  %332 = phi float [ 0.000000e+00, %.lr.ph ], [ %817, %308 ]
  %333 = phi float [ 0.000000e+00, %.lr.ph ], [ %818, %308 ]
  %334 = phi float [ 0.000000e+00, %.lr.ph ], [ %819, %308 ]
  %335 = phi float [ 0.000000e+00, %.lr.ph ], [ %821, %308 ]
  %336 = phi float [ 0.000000e+00, %.lr.ph ], [ %822, %308 ]
  %337 = phi float [ 0.000000e+00, %.lr.ph ], [ %823, %308 ]
  %338 = phi float [ 0.000000e+00, %.lr.ph ], [ %824, %308 ]
  %339 = phi float [ 0.000000e+00, %.lr.ph ], [ %826, %308 ]
  %340 = phi float [ 0.000000e+00, %.lr.ph ], [ %827, %308 ]
  %341 = phi float [ 0.000000e+00, %.lr.ph ], [ %828, %308 ]
  %342 = phi float [ 0.000000e+00, %.lr.ph ], [ %829, %308 ]
  %343 = phi float [ 0.000000e+00, %.lr.ph ], [ %831, %308 ]
  %344 = phi float [ 0.000000e+00, %.lr.ph ], [ %832, %308 ]
  %345 = phi float [ 0.000000e+00, %.lr.ph ], [ %833, %308 ]
  %346 = phi float [ 0.000000e+00, %.lr.ph ], [ %834, %308 ]
  %347 = phi float [ 0.000000e+00, %.lr.ph ], [ %836, %308 ]
  %348 = phi float [ 0.000000e+00, %.lr.ph ], [ %837, %308 ]
  %349 = phi float [ 0.000000e+00, %.lr.ph ], [ %838, %308 ]
  %350 = phi float [ 0.000000e+00, %.lr.ph ], [ %839, %308 ]
  %351 = phi float [ 0.000000e+00, %.lr.ph ], [ %841, %308 ]
  %352 = phi float [ 0.000000e+00, %.lr.ph ], [ %842, %308 ]
  %353 = phi float [ 0.000000e+00, %.lr.ph ], [ %843, %308 ]
  %354 = phi float [ 0.000000e+00, %.lr.ph ], [ %844, %308 ]
  %355 = phi float [ 0.000000e+00, %.lr.ph ], [ %846, %308 ]
  %356 = phi float [ 0.000000e+00, %.lr.ph ], [ %847, %308 ]
  %357 = phi float [ 0.000000e+00, %.lr.ph ], [ %848, %308 ]
  %358 = phi float [ 0.000000e+00, %.lr.ph ], [ %849, %308 ]
  %359 = phi float [ 0.000000e+00, %.lr.ph ], [ %851, %308 ]
  %360 = phi float [ 0.000000e+00, %.lr.ph ], [ %852, %308 ]
  %361 = phi float [ 0.000000e+00, %.lr.ph ], [ %853, %308 ]
  %362 = phi float [ 0.000000e+00, %.lr.ph ], [ %854, %308 ]
  %363 = phi float [ 0.000000e+00, %.lr.ph ], [ %856, %308 ]
  %364 = phi float [ 0.000000e+00, %.lr.ph ], [ %857, %308 ]
  %365 = phi float [ 0.000000e+00, %.lr.ph ], [ %858, %308 ]
  %366 = phi float [ 0.000000e+00, %.lr.ph ], [ %859, %308 ]
  %367 = phi float [ 0.000000e+00, %.lr.ph ], [ %861, %308 ]
  %368 = phi float [ 0.000000e+00, %.lr.ph ], [ %862, %308 ]
  %369 = phi float [ 0.000000e+00, %.lr.ph ], [ %863, %308 ]
  %370 = phi float [ 0.000000e+00, %.lr.ph ], [ %864, %308 ]
  %371 = phi float [ 0.000000e+00, %.lr.ph ], [ %866, %308 ]
  %372 = phi float [ 0.000000e+00, %.lr.ph ], [ %867, %308 ]
  %373 = phi float [ 0.000000e+00, %.lr.ph ], [ %868, %308 ]
  %374 = phi float [ 0.000000e+00, %.lr.ph ], [ %869, %308 ]
  %375 = phi i32 [ 0, %.lr.ph ], [ %928, %308 ]
  %376 = icmp slt i32 %375, %272, !dbg !44
  %377 = add i32 %309, 1, !dbg !44
  %378 = icmp sgt i32 %377, 2, !dbg !44
  %379 = select i1 %378, i32 0, i32 %377, !dbg !44
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !46
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !46
  %.idx = shl i32 %379, 13, !dbg !46
  %380 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %.idx, !dbg !46
  %381 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %280, !dbg !46
  %382 = ptrtoint ptr addrspace(3) %381 to i32, !dbg !46
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %382) #2, !dbg !46
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !46
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !46
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !46
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !46
  %388 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %281, !dbg !46
  %389 = ptrtoint ptr addrspace(3) %388 to i32, !dbg !46
  %390 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %389) #2, !dbg !46
  %391 = extractvalue { i32, i32, i32, i32 } %390, 0, !dbg !46
  %392 = extractvalue { i32, i32, i32, i32 } %390, 1, !dbg !46
  %393 = extractvalue { i32, i32, i32, i32 } %390, 2, !dbg !46
  %394 = extractvalue { i32, i32, i32, i32 } %390, 3, !dbg !46
  %395 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %282, !dbg !46
  %396 = ptrtoint ptr addrspace(3) %395 to i32, !dbg !46
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %396) #2, !dbg !46
  %398 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !46
  %399 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !46
  %400 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !46
  %401 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !46
  %402 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %283, !dbg !46
  %403 = ptrtoint ptr addrspace(3) %402 to i32, !dbg !46
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %403) #2, !dbg !46
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !46
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !46
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !46
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !46
  %409 = getelementptr inbounds nuw i8, ptr addrspace(3) %381, i32 2048, !dbg !46
  %410 = ptrtoint ptr addrspace(3) %409 to i32, !dbg !46
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %410) #2, !dbg !46
  %412 = extractvalue { i32, i32, i32, i32 } %411, 0, !dbg !46
  %413 = extractvalue { i32, i32, i32, i32 } %411, 1, !dbg !46
  %414 = extractvalue { i32, i32, i32, i32 } %411, 2, !dbg !46
  %415 = extractvalue { i32, i32, i32, i32 } %411, 3, !dbg !46
  %416 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %284, !dbg !46
  %417 = ptrtoint ptr addrspace(3) %416 to i32, !dbg !46
  %418 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %417) #2, !dbg !46
  %419 = extractvalue { i32, i32, i32, i32 } %418, 0, !dbg !46
  %420 = extractvalue { i32, i32, i32, i32 } %418, 1, !dbg !46
  %421 = extractvalue { i32, i32, i32, i32 } %418, 2, !dbg !46
  %422 = extractvalue { i32, i32, i32, i32 } %418, 3, !dbg !46
  %423 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %285, !dbg !46
  %424 = ptrtoint ptr addrspace(3) %423 to i32, !dbg !46
  %425 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %424) #2, !dbg !46
  %426 = extractvalue { i32, i32, i32, i32 } %425, 0, !dbg !46
  %427 = extractvalue { i32, i32, i32, i32 } %425, 1, !dbg !46
  %428 = extractvalue { i32, i32, i32, i32 } %425, 2, !dbg !46
  %429 = extractvalue { i32, i32, i32, i32 } %425, 3, !dbg !46
  %430 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %286, !dbg !46
  %431 = ptrtoint ptr addrspace(3) %430 to i32, !dbg !46
  %432 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %431) #2, !dbg !46
  %433 = extractvalue { i32, i32, i32, i32 } %432, 0, !dbg !46
  %434 = extractvalue { i32, i32, i32, i32 } %432, 1, !dbg !46
  %435 = extractvalue { i32, i32, i32, i32 } %432, 2, !dbg !46
  %436 = extractvalue { i32, i32, i32, i32 } %432, 3, !dbg !46
  %437 = getelementptr inbounds nuw i8, ptr addrspace(3) %381, i32 4096, !dbg !46
  %438 = ptrtoint ptr addrspace(3) %437 to i32, !dbg !46
  %439 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %438) #2, !dbg !46
  %440 = extractvalue { i32, i32, i32, i32 } %439, 0, !dbg !46
  %441 = extractvalue { i32, i32, i32, i32 } %439, 1, !dbg !46
  %442 = extractvalue { i32, i32, i32, i32 } %439, 2, !dbg !46
  %443 = extractvalue { i32, i32, i32, i32 } %439, 3, !dbg !46
  %444 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %287, !dbg !46
  %445 = ptrtoint ptr addrspace(3) %444 to i32, !dbg !46
  %446 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %445) #2, !dbg !46
  %447 = extractvalue { i32, i32, i32, i32 } %446, 0, !dbg !46
  %448 = extractvalue { i32, i32, i32, i32 } %446, 1, !dbg !46
  %449 = extractvalue { i32, i32, i32, i32 } %446, 2, !dbg !46
  %450 = extractvalue { i32, i32, i32, i32 } %446, 3, !dbg !46
  %451 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %288, !dbg !46
  %452 = ptrtoint ptr addrspace(3) %451 to i32, !dbg !46
  %453 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %452) #2, !dbg !46
  %454 = extractvalue { i32, i32, i32, i32 } %453, 0, !dbg !46
  %455 = extractvalue { i32, i32, i32, i32 } %453, 1, !dbg !46
  %456 = extractvalue { i32, i32, i32, i32 } %453, 2, !dbg !46
  %457 = extractvalue { i32, i32, i32, i32 } %453, 3, !dbg !46
  %458 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %289, !dbg !46
  %459 = ptrtoint ptr addrspace(3) %458 to i32, !dbg !46
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %459) #2, !dbg !46
  %461 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !46
  %462 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !46
  %463 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !46
  %464 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !46
  %465 = getelementptr inbounds nuw i8, ptr addrspace(3) %381, i32 6144, !dbg !46
  %466 = ptrtoint ptr addrspace(3) %465 to i32, !dbg !46
  %467 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %466) #2, !dbg !46
  %468 = extractvalue { i32, i32, i32, i32 } %467, 0, !dbg !46
  %469 = extractvalue { i32, i32, i32, i32 } %467, 1, !dbg !46
  %470 = extractvalue { i32, i32, i32, i32 } %467, 2, !dbg !46
  %471 = extractvalue { i32, i32, i32, i32 } %467, 3, !dbg !46
  %472 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %290, !dbg !46
  %473 = ptrtoint ptr addrspace(3) %472 to i32, !dbg !46
  %474 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %473) #2, !dbg !46
  %475 = extractvalue { i32, i32, i32, i32 } %474, 0, !dbg !46
  %476 = extractvalue { i32, i32, i32, i32 } %474, 1, !dbg !46
  %477 = extractvalue { i32, i32, i32, i32 } %474, 2, !dbg !46
  %478 = extractvalue { i32, i32, i32, i32 } %474, 3, !dbg !46
  %479 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %291, !dbg !46
  %480 = ptrtoint ptr addrspace(3) %479 to i32, !dbg !46
  %481 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %480) #2, !dbg !46
  %482 = extractvalue { i32, i32, i32, i32 } %481, 0, !dbg !46
  %483 = extractvalue { i32, i32, i32, i32 } %481, 1, !dbg !46
  %484 = extractvalue { i32, i32, i32, i32 } %481, 2, !dbg !46
  %485 = extractvalue { i32, i32, i32, i32 } %481, 3, !dbg !46
  %486 = getelementptr inbounds nuw half, ptr addrspace(3) %380, i32 %292, !dbg !46
  %487 = ptrtoint ptr addrspace(3) %486 to i32, !dbg !46
  %488 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %487) #2, !dbg !46
  %489 = extractvalue { i32, i32, i32, i32 } %488, 0, !dbg !46
  %490 = extractvalue { i32, i32, i32, i32 } %488, 1, !dbg !46
  %491 = extractvalue { i32, i32, i32, i32 } %488, 2, !dbg !46
  %492 = extractvalue { i32, i32, i32, i32 } %488, 3, !dbg !46
  %.idx289 = shl i32 %379, 14, !dbg !48
  %493 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx289, !dbg !48
  %494 = getelementptr inbounds nuw half, ptr addrspace(3) %493, i32 %301, !dbg !48
  %495 = ptrtoint ptr addrspace(3) %494 to i32, !dbg !48
  %496 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %495) #2, !dbg !48
  %497 = extractvalue { i32, i32, i32, i32 } %496, 0, !dbg !48
  %498 = extractvalue { i32, i32, i32, i32 } %496, 1, !dbg !48
  %499 = extractvalue { i32, i32, i32, i32 } %496, 2, !dbg !48
  %500 = extractvalue { i32, i32, i32, i32 } %496, 3, !dbg !48
  %501 = getelementptr inbounds nuw i8, ptr addrspace(3) %494, i32 8192, !dbg !48
  %502 = ptrtoint ptr addrspace(3) %501 to i32, !dbg !48
  %503 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %502) #2, !dbg !48
  %504 = extractvalue { i32, i32, i32, i32 } %503, 0, !dbg !48
  %505 = extractvalue { i32, i32, i32, i32 } %503, 1, !dbg !48
  %506 = extractvalue { i32, i32, i32, i32 } %503, 2, !dbg !48
  %507 = extractvalue { i32, i32, i32, i32 } %503, 3, !dbg !48
  %508 = getelementptr inbounds nuw half, ptr addrspace(3) %493, i32 %302, !dbg !48
  %509 = ptrtoint ptr addrspace(3) %508 to i32, !dbg !48
  %510 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %509) #2, !dbg !48
  %511 = extractvalue { i32, i32, i32, i32 } %510, 0, !dbg !48
  %512 = extractvalue { i32, i32, i32, i32 } %510, 1, !dbg !48
  %513 = extractvalue { i32, i32, i32, i32 } %510, 2, !dbg !48
  %514 = extractvalue { i32, i32, i32, i32 } %510, 3, !dbg !48
  %515 = getelementptr inbounds nuw half, ptr addrspace(3) %493, i32 %303, !dbg !48
  %516 = ptrtoint ptr addrspace(3) %515 to i32, !dbg !48
  %517 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %516) #2, !dbg !48
  %518 = extractvalue { i32, i32, i32, i32 } %517, 0, !dbg !48
  %519 = extractvalue { i32, i32, i32, i32 } %517, 1, !dbg !48
  %520 = extractvalue { i32, i32, i32, i32 } %517, 2, !dbg !48
  %521 = extractvalue { i32, i32, i32, i32 } %517, 3, !dbg !48
  %522 = getelementptr inbounds nuw half, ptr addrspace(3) %493, i32 %304, !dbg !48
  %523 = ptrtoint ptr addrspace(3) %522 to i32, !dbg !48
  %524 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %523) #2, !dbg !48
  %525 = extractvalue { i32, i32, i32, i32 } %524, 0, !dbg !48
  %526 = extractvalue { i32, i32, i32, i32 } %524, 1, !dbg !48
  %527 = extractvalue { i32, i32, i32, i32 } %524, 2, !dbg !48
  %528 = extractvalue { i32, i32, i32, i32 } %524, 3, !dbg !48
  %529 = getelementptr inbounds nuw half, ptr addrspace(3) %493, i32 %305, !dbg !48
  %530 = ptrtoint ptr addrspace(3) %529 to i32, !dbg !48
  %531 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %530) #2, !dbg !48
  %532 = extractvalue { i32, i32, i32, i32 } %531, 0, !dbg !48
  %533 = extractvalue { i32, i32, i32, i32 } %531, 1, !dbg !48
  %534 = extractvalue { i32, i32, i32, i32 } %531, 2, !dbg !48
  %535 = extractvalue { i32, i32, i32, i32 } %531, 3, !dbg !48
  %536 = getelementptr inbounds nuw half, ptr addrspace(3) %493, i32 %306, !dbg !48
  %537 = ptrtoint ptr addrspace(3) %536 to i32, !dbg !48
  %538 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %537) #2, !dbg !48
  %539 = extractvalue { i32, i32, i32, i32 } %538, 0, !dbg !48
  %540 = extractvalue { i32, i32, i32, i32 } %538, 1, !dbg !48
  %541 = extractvalue { i32, i32, i32, i32 } %538, 2, !dbg !48
  %542 = extractvalue { i32, i32, i32, i32 } %538, 3, !dbg !48
  %543 = getelementptr inbounds nuw half, ptr addrspace(3) %493, i32 %307, !dbg !48
  %544 = ptrtoint ptr addrspace(3) %543 to i32, !dbg !48
  %545 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %544) #2, !dbg !48
  %546 = extractvalue { i32, i32, i32, i32 } %545, 0, !dbg !48
  %547 = extractvalue { i32, i32, i32, i32 } %545, 1, !dbg !48
  %548 = extractvalue { i32, i32, i32, i32 } %545, 2, !dbg !48
  %549 = extractvalue { i32, i32, i32, i32 } %545, 3, !dbg !48
  %550 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %311, float %312, float %313, float %314, i32 %384, i32 %385, i32 %386, i32 %387, i32 %497, i32 %498) #2, !dbg !53
  %551 = extractvalue { float, float, float, float } %550, 0, !dbg !53
  %552 = extractvalue { float, float, float, float } %550, 1, !dbg !53
  %553 = extractvalue { float, float, float, float } %550, 2, !dbg !53
  %554 = extractvalue { float, float, float, float } %550, 3, !dbg !53
  %555 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %315, float %316, float %317, float %318, i32 %384, i32 %385, i32 %386, i32 %387, i32 %511, i32 %512) #2, !dbg !53
  %556 = extractvalue { float, float, float, float } %555, 0, !dbg !53
  %557 = extractvalue { float, float, float, float } %555, 1, !dbg !53
  %558 = extractvalue { float, float, float, float } %555, 2, !dbg !53
  %559 = extractvalue { float, float, float, float } %555, 3, !dbg !53
  %560 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %319, float %320, float %321, float %322, i32 %384, i32 %385, i32 %386, i32 %387, i32 %525, i32 %526) #2, !dbg !53
  %561 = extractvalue { float, float, float, float } %560, 0, !dbg !53
  %562 = extractvalue { float, float, float, float } %560, 1, !dbg !53
  %563 = extractvalue { float, float, float, float } %560, 2, !dbg !53
  %564 = extractvalue { float, float, float, float } %560, 3, !dbg !53
  %565 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %323, float %324, float %325, float %326, i32 %384, i32 %385, i32 %386, i32 %387, i32 %539, i32 %540) #2, !dbg !53
  %566 = extractvalue { float, float, float, float } %565, 0, !dbg !53
  %567 = extractvalue { float, float, float, float } %565, 1, !dbg !53
  %568 = extractvalue { float, float, float, float } %565, 2, !dbg !53
  %569 = extractvalue { float, float, float, float } %565, 3, !dbg !53
  %570 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %327, float %328, float %329, float %330, i32 %412, i32 %413, i32 %414, i32 %415, i32 %497, i32 %498) #2, !dbg !53
  %571 = extractvalue { float, float, float, float } %570, 0, !dbg !53
  %572 = extractvalue { float, float, float, float } %570, 1, !dbg !53
  %573 = extractvalue { float, float, float, float } %570, 2, !dbg !53
  %574 = extractvalue { float, float, float, float } %570, 3, !dbg !53
  %575 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %331, float %332, float %333, float %334, i32 %412, i32 %413, i32 %414, i32 %415, i32 %511, i32 %512) #2, !dbg !53
  %576 = extractvalue { float, float, float, float } %575, 0, !dbg !53
  %577 = extractvalue { float, float, float, float } %575, 1, !dbg !53
  %578 = extractvalue { float, float, float, float } %575, 2, !dbg !53
  %579 = extractvalue { float, float, float, float } %575, 3, !dbg !53
  %580 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %335, float %336, float %337, float %338, i32 %412, i32 %413, i32 %414, i32 %415, i32 %525, i32 %526) #2, !dbg !53
  %581 = extractvalue { float, float, float, float } %580, 0, !dbg !53
  %582 = extractvalue { float, float, float, float } %580, 1, !dbg !53
  %583 = extractvalue { float, float, float, float } %580, 2, !dbg !53
  %584 = extractvalue { float, float, float, float } %580, 3, !dbg !53
  %585 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %339, float %340, float %341, float %342, i32 %412, i32 %413, i32 %414, i32 %415, i32 %539, i32 %540) #2, !dbg !53
  %586 = extractvalue { float, float, float, float } %585, 0, !dbg !53
  %587 = extractvalue { float, float, float, float } %585, 1, !dbg !53
  %588 = extractvalue { float, float, float, float } %585, 2, !dbg !53
  %589 = extractvalue { float, float, float, float } %585, 3, !dbg !53
  %590 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %343, float %344, float %345, float %346, i32 %440, i32 %441, i32 %442, i32 %443, i32 %497, i32 %498) #2, !dbg !53
  %591 = extractvalue { float, float, float, float } %590, 0, !dbg !53
  %592 = extractvalue { float, float, float, float } %590, 1, !dbg !53
  %593 = extractvalue { float, float, float, float } %590, 2, !dbg !53
  %594 = extractvalue { float, float, float, float } %590, 3, !dbg !53
  %595 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %347, float %348, float %349, float %350, i32 %440, i32 %441, i32 %442, i32 %443, i32 %511, i32 %512) #2, !dbg !53
  %596 = extractvalue { float, float, float, float } %595, 0, !dbg !53
  %597 = extractvalue { float, float, float, float } %595, 1, !dbg !53
  %598 = extractvalue { float, float, float, float } %595, 2, !dbg !53
  %599 = extractvalue { float, float, float, float } %595, 3, !dbg !53
  %600 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %351, float %352, float %353, float %354, i32 %440, i32 %441, i32 %442, i32 %443, i32 %525, i32 %526) #2, !dbg !53
  %601 = extractvalue { float, float, float, float } %600, 0, !dbg !53
  %602 = extractvalue { float, float, float, float } %600, 1, !dbg !53
  %603 = extractvalue { float, float, float, float } %600, 2, !dbg !53
  %604 = extractvalue { float, float, float, float } %600, 3, !dbg !53
  %605 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %355, float %356, float %357, float %358, i32 %440, i32 %441, i32 %442, i32 %443, i32 %539, i32 %540) #2, !dbg !53
  %606 = extractvalue { float, float, float, float } %605, 0, !dbg !53
  %607 = extractvalue { float, float, float, float } %605, 1, !dbg !53
  %608 = extractvalue { float, float, float, float } %605, 2, !dbg !53
  %609 = extractvalue { float, float, float, float } %605, 3, !dbg !53
  %610 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %359, float %360, float %361, float %362, i32 %468, i32 %469, i32 %470, i32 %471, i32 %497, i32 %498) #2, !dbg !53
  %611 = extractvalue { float, float, float, float } %610, 0, !dbg !53
  %612 = extractvalue { float, float, float, float } %610, 1, !dbg !53
  %613 = extractvalue { float, float, float, float } %610, 2, !dbg !53
  %614 = extractvalue { float, float, float, float } %610, 3, !dbg !53
  %615 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %363, float %364, float %365, float %366, i32 %468, i32 %469, i32 %470, i32 %471, i32 %511, i32 %512) #2, !dbg !53
  %616 = extractvalue { float, float, float, float } %615, 0, !dbg !53
  %617 = extractvalue { float, float, float, float } %615, 1, !dbg !53
  %618 = extractvalue { float, float, float, float } %615, 2, !dbg !53
  %619 = extractvalue { float, float, float, float } %615, 3, !dbg !53
  %620 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %367, float %368, float %369, float %370, i32 %468, i32 %469, i32 %470, i32 %471, i32 %525, i32 %526) #2, !dbg !53
  %621 = extractvalue { float, float, float, float } %620, 0, !dbg !53
  %622 = extractvalue { float, float, float, float } %620, 1, !dbg !53
  %623 = extractvalue { float, float, float, float } %620, 2, !dbg !53
  %624 = extractvalue { float, float, float, float } %620, 3, !dbg !53
  %625 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %371, float %372, float %373, float %374, i32 %468, i32 %469, i32 %470, i32 %471, i32 %539, i32 %540) #2, !dbg !53
  %626 = extractvalue { float, float, float, float } %625, 0, !dbg !53
  %627 = extractvalue { float, float, float, float } %625, 1, !dbg !53
  %628 = extractvalue { float, float, float, float } %625, 2, !dbg !53
  %629 = extractvalue { float, float, float, float } %625, 3, !dbg !53
  %630 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %551, float %552, float %553, float %554, i32 %391, i32 %392, i32 %393, i32 %394, i32 %499, i32 %500) #2, !dbg !53
  %631 = extractvalue { float, float, float, float } %630, 0, !dbg !53
  %632 = extractvalue { float, float, float, float } %630, 1, !dbg !53
  %633 = extractvalue { float, float, float, float } %630, 2, !dbg !53
  %634 = extractvalue { float, float, float, float } %630, 3, !dbg !53
  %635 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %556, float %557, float %558, float %559, i32 %391, i32 %392, i32 %393, i32 %394, i32 %513, i32 %514) #2, !dbg !53
  %636 = extractvalue { float, float, float, float } %635, 0, !dbg !53
  %637 = extractvalue { float, float, float, float } %635, 1, !dbg !53
  %638 = extractvalue { float, float, float, float } %635, 2, !dbg !53
  %639 = extractvalue { float, float, float, float } %635, 3, !dbg !53
  %640 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %561, float %562, float %563, float %564, i32 %391, i32 %392, i32 %393, i32 %394, i32 %527, i32 %528) #2, !dbg !53
  %641 = extractvalue { float, float, float, float } %640, 0, !dbg !53
  %642 = extractvalue { float, float, float, float } %640, 1, !dbg !53
  %643 = extractvalue { float, float, float, float } %640, 2, !dbg !53
  %644 = extractvalue { float, float, float, float } %640, 3, !dbg !53
  %645 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %566, float %567, float %568, float %569, i32 %391, i32 %392, i32 %393, i32 %394, i32 %541, i32 %542) #2, !dbg !53
  %646 = extractvalue { float, float, float, float } %645, 0, !dbg !53
  %647 = extractvalue { float, float, float, float } %645, 1, !dbg !53
  %648 = extractvalue { float, float, float, float } %645, 2, !dbg !53
  %649 = extractvalue { float, float, float, float } %645, 3, !dbg !53
  %650 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %571, float %572, float %573, float %574, i32 %419, i32 %420, i32 %421, i32 %422, i32 %499, i32 %500) #2, !dbg !53
  %651 = extractvalue { float, float, float, float } %650, 0, !dbg !53
  %652 = extractvalue { float, float, float, float } %650, 1, !dbg !53
  %653 = extractvalue { float, float, float, float } %650, 2, !dbg !53
  %654 = extractvalue { float, float, float, float } %650, 3, !dbg !53
  %655 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %576, float %577, float %578, float %579, i32 %419, i32 %420, i32 %421, i32 %422, i32 %513, i32 %514) #2, !dbg !53
  %656 = extractvalue { float, float, float, float } %655, 0, !dbg !53
  %657 = extractvalue { float, float, float, float } %655, 1, !dbg !53
  %658 = extractvalue { float, float, float, float } %655, 2, !dbg !53
  %659 = extractvalue { float, float, float, float } %655, 3, !dbg !53
  %660 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %581, float %582, float %583, float %584, i32 %419, i32 %420, i32 %421, i32 %422, i32 %527, i32 %528) #2, !dbg !53
  %661 = extractvalue { float, float, float, float } %660, 0, !dbg !53
  %662 = extractvalue { float, float, float, float } %660, 1, !dbg !53
  %663 = extractvalue { float, float, float, float } %660, 2, !dbg !53
  %664 = extractvalue { float, float, float, float } %660, 3, !dbg !53
  %665 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %586, float %587, float %588, float %589, i32 %419, i32 %420, i32 %421, i32 %422, i32 %541, i32 %542) #2, !dbg !53
  %666 = extractvalue { float, float, float, float } %665, 0, !dbg !53
  %667 = extractvalue { float, float, float, float } %665, 1, !dbg !53
  %668 = extractvalue { float, float, float, float } %665, 2, !dbg !53
  %669 = extractvalue { float, float, float, float } %665, 3, !dbg !53
  %670 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %591, float %592, float %593, float %594, i32 %447, i32 %448, i32 %449, i32 %450, i32 %499, i32 %500) #2, !dbg !53
  %671 = extractvalue { float, float, float, float } %670, 0, !dbg !53
  %672 = extractvalue { float, float, float, float } %670, 1, !dbg !53
  %673 = extractvalue { float, float, float, float } %670, 2, !dbg !53
  %674 = extractvalue { float, float, float, float } %670, 3, !dbg !53
  %675 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %596, float %597, float %598, float %599, i32 %447, i32 %448, i32 %449, i32 %450, i32 %513, i32 %514) #2, !dbg !53
  %676 = extractvalue { float, float, float, float } %675, 0, !dbg !53
  %677 = extractvalue { float, float, float, float } %675, 1, !dbg !53
  %678 = extractvalue { float, float, float, float } %675, 2, !dbg !53
  %679 = extractvalue { float, float, float, float } %675, 3, !dbg !53
  %680 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %601, float %602, float %603, float %604, i32 %447, i32 %448, i32 %449, i32 %450, i32 %527, i32 %528) #2, !dbg !53
  %681 = extractvalue { float, float, float, float } %680, 0, !dbg !53
  %682 = extractvalue { float, float, float, float } %680, 1, !dbg !53
  %683 = extractvalue { float, float, float, float } %680, 2, !dbg !53
  %684 = extractvalue { float, float, float, float } %680, 3, !dbg !53
  %685 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %606, float %607, float %608, float %609, i32 %447, i32 %448, i32 %449, i32 %450, i32 %541, i32 %542) #2, !dbg !53
  %686 = extractvalue { float, float, float, float } %685, 0, !dbg !53
  %687 = extractvalue { float, float, float, float } %685, 1, !dbg !53
  %688 = extractvalue { float, float, float, float } %685, 2, !dbg !53
  %689 = extractvalue { float, float, float, float } %685, 3, !dbg !53
  %690 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %611, float %612, float %613, float %614, i32 %475, i32 %476, i32 %477, i32 %478, i32 %499, i32 %500) #2, !dbg !53
  %691 = extractvalue { float, float, float, float } %690, 0, !dbg !53
  %692 = extractvalue { float, float, float, float } %690, 1, !dbg !53
  %693 = extractvalue { float, float, float, float } %690, 2, !dbg !53
  %694 = extractvalue { float, float, float, float } %690, 3, !dbg !53
  %695 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %616, float %617, float %618, float %619, i32 %475, i32 %476, i32 %477, i32 %478, i32 %513, i32 %514) #2, !dbg !53
  %696 = extractvalue { float, float, float, float } %695, 0, !dbg !53
  %697 = extractvalue { float, float, float, float } %695, 1, !dbg !53
  %698 = extractvalue { float, float, float, float } %695, 2, !dbg !53
  %699 = extractvalue { float, float, float, float } %695, 3, !dbg !53
  %700 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %621, float %622, float %623, float %624, i32 %475, i32 %476, i32 %477, i32 %478, i32 %527, i32 %528) #2, !dbg !53
  %701 = extractvalue { float, float, float, float } %700, 0, !dbg !53
  %702 = extractvalue { float, float, float, float } %700, 1, !dbg !53
  %703 = extractvalue { float, float, float, float } %700, 2, !dbg !53
  %704 = extractvalue { float, float, float, float } %700, 3, !dbg !53
  %705 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %626, float %627, float %628, float %629, i32 %475, i32 %476, i32 %477, i32 %478, i32 %541, i32 %542) #2, !dbg !53
  %706 = extractvalue { float, float, float, float } %705, 0, !dbg !53
  %707 = extractvalue { float, float, float, float } %705, 1, !dbg !53
  %708 = extractvalue { float, float, float, float } %705, 2, !dbg !53
  %709 = extractvalue { float, float, float, float } %705, 3, !dbg !53
  %710 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %631, float %632, float %633, float %634, i32 %398, i32 %399, i32 %400, i32 %401, i32 %504, i32 %505) #2, !dbg !53
  %711 = extractvalue { float, float, float, float } %710, 0, !dbg !53
  %712 = extractvalue { float, float, float, float } %710, 1, !dbg !53
  %713 = extractvalue { float, float, float, float } %710, 2, !dbg !53
  %714 = extractvalue { float, float, float, float } %710, 3, !dbg !53
  %715 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %636, float %637, float %638, float %639, i32 %398, i32 %399, i32 %400, i32 %401, i32 %518, i32 %519) #2, !dbg !53
  %716 = extractvalue { float, float, float, float } %715, 0, !dbg !53
  %717 = extractvalue { float, float, float, float } %715, 1, !dbg !53
  %718 = extractvalue { float, float, float, float } %715, 2, !dbg !53
  %719 = extractvalue { float, float, float, float } %715, 3, !dbg !53
  %720 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %641, float %642, float %643, float %644, i32 %398, i32 %399, i32 %400, i32 %401, i32 %532, i32 %533) #2, !dbg !53
  %721 = extractvalue { float, float, float, float } %720, 0, !dbg !53
  %722 = extractvalue { float, float, float, float } %720, 1, !dbg !53
  %723 = extractvalue { float, float, float, float } %720, 2, !dbg !53
  %724 = extractvalue { float, float, float, float } %720, 3, !dbg !53
  %725 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %646, float %647, float %648, float %649, i32 %398, i32 %399, i32 %400, i32 %401, i32 %546, i32 %547) #2, !dbg !53
  %726 = extractvalue { float, float, float, float } %725, 0, !dbg !53
  %727 = extractvalue { float, float, float, float } %725, 1, !dbg !53
  %728 = extractvalue { float, float, float, float } %725, 2, !dbg !53
  %729 = extractvalue { float, float, float, float } %725, 3, !dbg !53
  %730 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %651, float %652, float %653, float %654, i32 %426, i32 %427, i32 %428, i32 %429, i32 %504, i32 %505) #2, !dbg !53
  %731 = extractvalue { float, float, float, float } %730, 0, !dbg !53
  %732 = extractvalue { float, float, float, float } %730, 1, !dbg !53
  %733 = extractvalue { float, float, float, float } %730, 2, !dbg !53
  %734 = extractvalue { float, float, float, float } %730, 3, !dbg !53
  %735 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %656, float %657, float %658, float %659, i32 %426, i32 %427, i32 %428, i32 %429, i32 %518, i32 %519) #2, !dbg !53
  %736 = extractvalue { float, float, float, float } %735, 0, !dbg !53
  %737 = extractvalue { float, float, float, float } %735, 1, !dbg !53
  %738 = extractvalue { float, float, float, float } %735, 2, !dbg !53
  %739 = extractvalue { float, float, float, float } %735, 3, !dbg !53
  %740 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %661, float %662, float %663, float %664, i32 %426, i32 %427, i32 %428, i32 %429, i32 %532, i32 %533) #2, !dbg !53
  %741 = extractvalue { float, float, float, float } %740, 0, !dbg !53
  %742 = extractvalue { float, float, float, float } %740, 1, !dbg !53
  %743 = extractvalue { float, float, float, float } %740, 2, !dbg !53
  %744 = extractvalue { float, float, float, float } %740, 3, !dbg !53
  %745 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %666, float %667, float %668, float %669, i32 %426, i32 %427, i32 %428, i32 %429, i32 %546, i32 %547) #2, !dbg !53
  %746 = extractvalue { float, float, float, float } %745, 0, !dbg !53
  %747 = extractvalue { float, float, float, float } %745, 1, !dbg !53
  %748 = extractvalue { float, float, float, float } %745, 2, !dbg !53
  %749 = extractvalue { float, float, float, float } %745, 3, !dbg !53
  %750 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %671, float %672, float %673, float %674, i32 %454, i32 %455, i32 %456, i32 %457, i32 %504, i32 %505) #2, !dbg !53
  %751 = extractvalue { float, float, float, float } %750, 0, !dbg !53
  %752 = extractvalue { float, float, float, float } %750, 1, !dbg !53
  %753 = extractvalue { float, float, float, float } %750, 2, !dbg !53
  %754 = extractvalue { float, float, float, float } %750, 3, !dbg !53
  %755 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %676, float %677, float %678, float %679, i32 %454, i32 %455, i32 %456, i32 %457, i32 %518, i32 %519) #2, !dbg !53
  %756 = extractvalue { float, float, float, float } %755, 0, !dbg !53
  %757 = extractvalue { float, float, float, float } %755, 1, !dbg !53
  %758 = extractvalue { float, float, float, float } %755, 2, !dbg !53
  %759 = extractvalue { float, float, float, float } %755, 3, !dbg !53
  %760 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %681, float %682, float %683, float %684, i32 %454, i32 %455, i32 %456, i32 %457, i32 %532, i32 %533) #2, !dbg !53
  %761 = extractvalue { float, float, float, float } %760, 0, !dbg !53
  %762 = extractvalue { float, float, float, float } %760, 1, !dbg !53
  %763 = extractvalue { float, float, float, float } %760, 2, !dbg !53
  %764 = extractvalue { float, float, float, float } %760, 3, !dbg !53
  %765 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %686, float %687, float %688, float %689, i32 %454, i32 %455, i32 %456, i32 %457, i32 %546, i32 %547) #2, !dbg !53
  %766 = extractvalue { float, float, float, float } %765, 0, !dbg !53
  %767 = extractvalue { float, float, float, float } %765, 1, !dbg !53
  %768 = extractvalue { float, float, float, float } %765, 2, !dbg !53
  %769 = extractvalue { float, float, float, float } %765, 3, !dbg !53
  %770 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %691, float %692, float %693, float %694, i32 %482, i32 %483, i32 %484, i32 %485, i32 %504, i32 %505) #2, !dbg !53
  %771 = extractvalue { float, float, float, float } %770, 0, !dbg !53
  %772 = extractvalue { float, float, float, float } %770, 1, !dbg !53
  %773 = extractvalue { float, float, float, float } %770, 2, !dbg !53
  %774 = extractvalue { float, float, float, float } %770, 3, !dbg !53
  %775 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %696, float %697, float %698, float %699, i32 %482, i32 %483, i32 %484, i32 %485, i32 %518, i32 %519) #2, !dbg !53
  %776 = extractvalue { float, float, float, float } %775, 0, !dbg !53
  %777 = extractvalue { float, float, float, float } %775, 1, !dbg !53
  %778 = extractvalue { float, float, float, float } %775, 2, !dbg !53
  %779 = extractvalue { float, float, float, float } %775, 3, !dbg !53
  %780 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %701, float %702, float %703, float %704, i32 %482, i32 %483, i32 %484, i32 %485, i32 %532, i32 %533) #2, !dbg !53
  %781 = extractvalue { float, float, float, float } %780, 0, !dbg !53
  %782 = extractvalue { float, float, float, float } %780, 1, !dbg !53
  %783 = extractvalue { float, float, float, float } %780, 2, !dbg !53
  %784 = extractvalue { float, float, float, float } %780, 3, !dbg !53
  %785 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %706, float %707, float %708, float %709, i32 %482, i32 %483, i32 %484, i32 %485, i32 %546, i32 %547) #2, !dbg !53
  %786 = extractvalue { float, float, float, float } %785, 0, !dbg !53
  %787 = extractvalue { float, float, float, float } %785, 1, !dbg !53
  %788 = extractvalue { float, float, float, float } %785, 2, !dbg !53
  %789 = extractvalue { float, float, float, float } %785, 3, !dbg !53
  %790 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %711, float %712, float %713, float %714, i32 %405, i32 %406, i32 %407, i32 %408, i32 %506, i32 %507) #2, !dbg !53
  %791 = extractvalue { float, float, float, float } %790, 0, !dbg !53
  %792 = extractvalue { float, float, float, float } %790, 1, !dbg !53
  %793 = extractvalue { float, float, float, float } %790, 2, !dbg !53
  %794 = extractvalue { float, float, float, float } %790, 3, !dbg !53
  %795 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %716, float %717, float %718, float %719, i32 %405, i32 %406, i32 %407, i32 %408, i32 %520, i32 %521) #2, !dbg !53
  %796 = extractvalue { float, float, float, float } %795, 0, !dbg !53
  %797 = extractvalue { float, float, float, float } %795, 1, !dbg !53
  %798 = extractvalue { float, float, float, float } %795, 2, !dbg !53
  %799 = extractvalue { float, float, float, float } %795, 3, !dbg !53
  %800 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %721, float %722, float %723, float %724, i32 %405, i32 %406, i32 %407, i32 %408, i32 %534, i32 %535) #2, !dbg !53
  %801 = extractvalue { float, float, float, float } %800, 0, !dbg !53
  %802 = extractvalue { float, float, float, float } %800, 1, !dbg !53
  %803 = extractvalue { float, float, float, float } %800, 2, !dbg !53
  %804 = extractvalue { float, float, float, float } %800, 3, !dbg !53
  %805 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %726, float %727, float %728, float %729, i32 %405, i32 %406, i32 %407, i32 %408, i32 %548, i32 %549) #2, !dbg !53
  %806 = extractvalue { float, float, float, float } %805, 0, !dbg !53
  %807 = extractvalue { float, float, float, float } %805, 1, !dbg !53
  %808 = extractvalue { float, float, float, float } %805, 2, !dbg !53
  %809 = extractvalue { float, float, float, float } %805, 3, !dbg !53
  %810 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %731, float %732, float %733, float %734, i32 %433, i32 %434, i32 %435, i32 %436, i32 %506, i32 %507) #2, !dbg !53
  %811 = extractvalue { float, float, float, float } %810, 0, !dbg !53
  %812 = extractvalue { float, float, float, float } %810, 1, !dbg !53
  %813 = extractvalue { float, float, float, float } %810, 2, !dbg !53
  %814 = extractvalue { float, float, float, float } %810, 3, !dbg !53
  %815 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %736, float %737, float %738, float %739, i32 %433, i32 %434, i32 %435, i32 %436, i32 %520, i32 %521) #2, !dbg !53
  %816 = extractvalue { float, float, float, float } %815, 0, !dbg !53
  %817 = extractvalue { float, float, float, float } %815, 1, !dbg !53
  %818 = extractvalue { float, float, float, float } %815, 2, !dbg !53
  %819 = extractvalue { float, float, float, float } %815, 3, !dbg !53
  %820 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %741, float %742, float %743, float %744, i32 %433, i32 %434, i32 %435, i32 %436, i32 %534, i32 %535) #2, !dbg !53
  %821 = extractvalue { float, float, float, float } %820, 0, !dbg !53
  %822 = extractvalue { float, float, float, float } %820, 1, !dbg !53
  %823 = extractvalue { float, float, float, float } %820, 2, !dbg !53
  %824 = extractvalue { float, float, float, float } %820, 3, !dbg !53
  %825 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %746, float %747, float %748, float %749, i32 %433, i32 %434, i32 %435, i32 %436, i32 %548, i32 %549) #2, !dbg !53
  %826 = extractvalue { float, float, float, float } %825, 0, !dbg !53
  %827 = extractvalue { float, float, float, float } %825, 1, !dbg !53
  %828 = extractvalue { float, float, float, float } %825, 2, !dbg !53
  %829 = extractvalue { float, float, float, float } %825, 3, !dbg !53
  %830 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %751, float %752, float %753, float %754, i32 %461, i32 %462, i32 %463, i32 %464, i32 %506, i32 %507) #2, !dbg !53
  %831 = extractvalue { float, float, float, float } %830, 0, !dbg !53
  %832 = extractvalue { float, float, float, float } %830, 1, !dbg !53
  %833 = extractvalue { float, float, float, float } %830, 2, !dbg !53
  %834 = extractvalue { float, float, float, float } %830, 3, !dbg !53
  %835 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %756, float %757, float %758, float %759, i32 %461, i32 %462, i32 %463, i32 %464, i32 %520, i32 %521) #2, !dbg !53
  %836 = extractvalue { float, float, float, float } %835, 0, !dbg !53
  %837 = extractvalue { float, float, float, float } %835, 1, !dbg !53
  %838 = extractvalue { float, float, float, float } %835, 2, !dbg !53
  %839 = extractvalue { float, float, float, float } %835, 3, !dbg !53
  %840 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %761, float %762, float %763, float %764, i32 %461, i32 %462, i32 %463, i32 %464, i32 %534, i32 %535) #2, !dbg !53
  %841 = extractvalue { float, float, float, float } %840, 0, !dbg !53
  %842 = extractvalue { float, float, float, float } %840, 1, !dbg !53
  %843 = extractvalue { float, float, float, float } %840, 2, !dbg !53
  %844 = extractvalue { float, float, float, float } %840, 3, !dbg !53
  %845 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %766, float %767, float %768, float %769, i32 %461, i32 %462, i32 %463, i32 %464, i32 %548, i32 %549) #2, !dbg !53
  %846 = extractvalue { float, float, float, float } %845, 0, !dbg !53
  %847 = extractvalue { float, float, float, float } %845, 1, !dbg !53
  %848 = extractvalue { float, float, float, float } %845, 2, !dbg !53
  %849 = extractvalue { float, float, float, float } %845, 3, !dbg !53
  %850 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %771, float %772, float %773, float %774, i32 %489, i32 %490, i32 %491, i32 %492, i32 %506, i32 %507) #2, !dbg !53
  %851 = extractvalue { float, float, float, float } %850, 0, !dbg !53
  %852 = extractvalue { float, float, float, float } %850, 1, !dbg !53
  %853 = extractvalue { float, float, float, float } %850, 2, !dbg !53
  %854 = extractvalue { float, float, float, float } %850, 3, !dbg !53
  %855 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %776, float %777, float %778, float %779, i32 %489, i32 %490, i32 %491, i32 %492, i32 %520, i32 %521) #2, !dbg !53
  %856 = extractvalue { float, float, float, float } %855, 0, !dbg !53
  %857 = extractvalue { float, float, float, float } %855, 1, !dbg !53
  %858 = extractvalue { float, float, float, float } %855, 2, !dbg !53
  %859 = extractvalue { float, float, float, float } %855, 3, !dbg !53
  %860 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %781, float %782, float %783, float %784, i32 %489, i32 %490, i32 %491, i32 %492, i32 %534, i32 %535) #2, !dbg !53
  %861 = extractvalue { float, float, float, float } %860, 0, !dbg !53
  %862 = extractvalue { float, float, float, float } %860, 1, !dbg !53
  %863 = extractvalue { float, float, float, float } %860, 2, !dbg !53
  %864 = extractvalue { float, float, float, float } %860, 3, !dbg !53
  %865 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %786, float %787, float %788, float %789, i32 %489, i32 %490, i32 %491, i32 %492, i32 %548, i32 %549) #2, !dbg !53
  %866 = extractvalue { float, float, float, float } %865, 0, !dbg !53
  %867 = extractvalue { float, float, float, float } %865, 1, !dbg !53
  %868 = extractvalue { float, float, float, float } %865, 2, !dbg !53
  %869 = extractvalue { float, float, float, float } %865, 3, !dbg !53
  %870 = getelementptr i8, ptr addrspace(1) %.pn66357, i64 128, !dbg !49
  %871 = getelementptr i8, ptr addrspace(1) %.pn50358, i64 128, !dbg !49
  %872 = getelementptr i8, ptr addrspace(1) %.pn34359, i64 128, !dbg !49
  %873 = getelementptr i8, ptr addrspace(1) %.pn18360, i64 128, !dbg !49
  %874 = getelementptr half, ptr addrspace(1) %.pn194361, i64 %167, !dbg !50
  %875 = getelementptr half, ptr addrspace(1) %.pn178362, i64 %167, !dbg !50
  %876 = getelementptr half, ptr addrspace(1) %.pn162363, i64 %167, !dbg !50
  %877 = getelementptr half, ptr addrspace(1) %.pn146364, i64 %167, !dbg !50
  %878 = getelementptr half, ptr addrspace(1) %.pn130365, i64 %167, !dbg !50
  %879 = getelementptr half, ptr addrspace(1) %.pn114366, i64 %167, !dbg !50
  %880 = getelementptr half, ptr addrspace(1) %.pn98367, i64 %167, !dbg !50
  %881 = getelementptr half, ptr addrspace(1) %.pn82368, i64 %167, !dbg !50
  %882 = add i32 %310, 1, !dbg !44
  %883 = icmp sgt i32 %882, 2, !dbg !44
  %884 = select i1 %883, i32 0, i32 %882, !dbg !44
  %885 = shl i32 %375, 6, !dbg !51
  %886 = sub i32 %.neg356, %885, !dbg !51
  %887 = icmp slt i32 %48, %886, !dbg !45
  %.idx290 = shl i32 %884, 13, !dbg !46
  %888 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %.idx290, !dbg !46
  %889 = and i1 %376, %887, !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !46
  %890 = getelementptr inbounds nuw half, ptr addrspace(3) %888, i32 %109, !dbg !46
  %891 = getelementptr inbounds nuw half, ptr addrspace(3) %888, i32 %111, !dbg !46
  %892 = getelementptr inbounds nuw half, ptr addrspace(3) %888, i32 %113, !dbg !46
  %893 = getelementptr inbounds nuw half, ptr addrspace(3) %888, i32 %115, !dbg !46
  %894 = select i1 %889, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %890, ptr addrspace(1) %870, i32 %894) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %891, ptr addrspace(1) %871, i32 %894) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %892, ptr addrspace(1) %872, i32 %894) #2, !dbg !46
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %893, ptr addrspace(1) %873, i32 %894) #2, !dbg !46
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !46
  %895 = icmp slt i32 %30, %886, !dbg !47
  %896 = icmp slt i32 %31, %886, !dbg !47
  %897 = icmp slt i32 %32, %886, !dbg !47
  %898 = icmp slt i32 %33, %886, !dbg !47
  %899 = icmp slt i32 %34, %886, !dbg !47
  %900 = icmp slt i32 %35, %886, !dbg !47
  %901 = icmp slt i32 %36, %886, !dbg !47
  %902 = icmp slt i32 %37, %886, !dbg !47
  %.idx291 = shl i32 %884, 14, !dbg !48
  %903 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx291, !dbg !48
  %904 = and i1 %376, %895, !dbg !44
  %905 = and i1 %376, %896, !dbg !44
  %906 = and i1 %376, %897, !dbg !44
  %907 = and i1 %376, %898, !dbg !44
  %908 = and i1 %376, %899, !dbg !44
  %909 = and i1 %376, %900, !dbg !44
  %910 = and i1 %376, %901, !dbg !44
  %911 = and i1 %376, %902, !dbg !44
  %912 = getelementptr inbounds nuw half, ptr addrspace(3) %903, i32 %138, !dbg !48
  %913 = getelementptr inbounds nuw half, ptr addrspace(3) %903, i32 %140, !dbg !48
  %914 = getelementptr inbounds nuw half, ptr addrspace(3) %903, i32 %142, !dbg !48
  %915 = getelementptr inbounds nuw half, ptr addrspace(3) %903, i32 %144, !dbg !48
  %916 = getelementptr inbounds nuw half, ptr addrspace(3) %903, i32 %146, !dbg !48
  %917 = getelementptr inbounds nuw half, ptr addrspace(3) %903, i32 %148, !dbg !48
  %918 = getelementptr inbounds nuw half, ptr addrspace(3) %903, i32 %150, !dbg !48
  %919 = getelementptr inbounds nuw half, ptr addrspace(3) %903, i32 %152, !dbg !48
  %920 = select i1 %904, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %912, ptr addrspace(1) %874, i32 %920) #2, !dbg !48
  %921 = select i1 %905, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %913, ptr addrspace(1) %875, i32 %921) #2, !dbg !48
  %922 = select i1 %906, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %914, ptr addrspace(1) %876, i32 %922) #2, !dbg !48
  %923 = select i1 %907, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %915, ptr addrspace(1) %877, i32 %923) #2, !dbg !48
  %924 = select i1 %908, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %916, ptr addrspace(1) %878, i32 %924) #2, !dbg !48
  %925 = select i1 %909, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %917, ptr addrspace(1) %879, i32 %925) #2, !dbg !48
  %926 = select i1 %910, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %918, ptr addrspace(1) %880, i32 %926) #2, !dbg !48
  %927 = select i1 %911, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %919, ptr addrspace(1) %881, i32 %927) #2, !dbg !48
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !48
  %928 = add nuw nsw i32 %375, 1, !dbg !44
  %exitcond.not = icmp eq i32 %928, %101, !dbg !44
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %308, !dbg !44

._crit_edge.loopexit:                             ; preds = %308
  %929 = insertelement <64 x float> poison, float %791, i64 0, !dbg !54
  %930 = insertelement <64 x float> %929, float %792, i64 1, !dbg !54
  %931 = insertelement <64 x float> %930, float %793, i64 2, !dbg !54
  %932 = insertelement <64 x float> %931, float %794, i64 3, !dbg !54
  %933 = insertelement <64 x float> %932, float %796, i64 4, !dbg !54
  %934 = insertelement <64 x float> %933, float %797, i64 5, !dbg !54
  %935 = insertelement <64 x float> %934, float %798, i64 6, !dbg !54
  %936 = insertelement <64 x float> %935, float %799, i64 7, !dbg !54
  %937 = insertelement <64 x float> %936, float %801, i64 8, !dbg !54
  %938 = insertelement <64 x float> %937, float %802, i64 9, !dbg !54
  %939 = insertelement <64 x float> %938, float %803, i64 10, !dbg !54
  %940 = insertelement <64 x float> %939, float %804, i64 11, !dbg !54
  %941 = insertelement <64 x float> %940, float %806, i64 12, !dbg !54
  %942 = insertelement <64 x float> %941, float %807, i64 13, !dbg !54
  %943 = insertelement <64 x float> %942, float %808, i64 14, !dbg !54
  %944 = insertelement <64 x float> %943, float %809, i64 15, !dbg !54
  %945 = insertelement <64 x float> %944, float %811, i64 16, !dbg !54
  %946 = insertelement <64 x float> %945, float %812, i64 17, !dbg !54
  %947 = insertelement <64 x float> %946, float %813, i64 18, !dbg !54
  %948 = insertelement <64 x float> %947, float %814, i64 19, !dbg !54
  %949 = insertelement <64 x float> %948, float %816, i64 20, !dbg !54
  %950 = insertelement <64 x float> %949, float %817, i64 21, !dbg !54
  %951 = insertelement <64 x float> %950, float %818, i64 22, !dbg !54
  %952 = insertelement <64 x float> %951, float %819, i64 23, !dbg !54
  %953 = insertelement <64 x float> %952, float %821, i64 24, !dbg !54
  %954 = insertelement <64 x float> %953, float %822, i64 25, !dbg !54
  %955 = insertelement <64 x float> %954, float %823, i64 26, !dbg !54
  %956 = insertelement <64 x float> %955, float %824, i64 27, !dbg !54
  %957 = insertelement <64 x float> %956, float %826, i64 28, !dbg !54
  %958 = insertelement <64 x float> %957, float %827, i64 29, !dbg !54
  %959 = insertelement <64 x float> %958, float %828, i64 30, !dbg !54
  %960 = insertelement <64 x float> %959, float %829, i64 31, !dbg !54
  %961 = insertelement <64 x float> %960, float %831, i64 32, !dbg !54
  %962 = insertelement <64 x float> %961, float %832, i64 33, !dbg !54
  %963 = insertelement <64 x float> %962, float %833, i64 34, !dbg !54
  %964 = insertelement <64 x float> %963, float %834, i64 35, !dbg !54
  %965 = insertelement <64 x float> %964, float %836, i64 36, !dbg !54
  %966 = insertelement <64 x float> %965, float %837, i64 37, !dbg !54
  %967 = insertelement <64 x float> %966, float %838, i64 38, !dbg !54
  %968 = insertelement <64 x float> %967, float %839, i64 39, !dbg !54
  %969 = insertelement <64 x float> %968, float %841, i64 40, !dbg !54
  %970 = insertelement <64 x float> %969, float %842, i64 41, !dbg !54
  %971 = insertelement <64 x float> %970, float %843, i64 42, !dbg !54
  %972 = insertelement <64 x float> %971, float %844, i64 43, !dbg !54
  %973 = insertelement <64 x float> %972, float %846, i64 44, !dbg !54
  %974 = insertelement <64 x float> %973, float %847, i64 45, !dbg !54
  %975 = insertelement <64 x float> %974, float %848, i64 46, !dbg !54
  %976 = insertelement <64 x float> %975, float %849, i64 47, !dbg !54
  %977 = insertelement <64 x float> %976, float %851, i64 48, !dbg !54
  %978 = insertelement <64 x float> %977, float %852, i64 49, !dbg !54
  %979 = insertelement <64 x float> %978, float %853, i64 50, !dbg !54
  %980 = insertelement <64 x float> %979, float %854, i64 51, !dbg !54
  %981 = insertelement <64 x float> %980, float %856, i64 52, !dbg !54
  %982 = insertelement <64 x float> %981, float %857, i64 53, !dbg !54
  %983 = insertelement <64 x float> %982, float %858, i64 54, !dbg !54
  %984 = insertelement <64 x float> %983, float %859, i64 55, !dbg !54
  %985 = insertelement <64 x float> %984, float %861, i64 56, !dbg !54
  %986 = insertelement <64 x float> %985, float %862, i64 57, !dbg !54
  %987 = insertelement <64 x float> %986, float %863, i64 58, !dbg !54
  %988 = insertelement <64 x float> %987, float %864, i64 59, !dbg !54
  %989 = insertelement <64 x float> %988, float %866, i64 60, !dbg !54
  %990 = insertelement <64 x float> %989, float %867, i64 61, !dbg !54
  %991 = insertelement <64 x float> %990, float %868, i64 62, !dbg !54
  %992 = insertelement <64 x float> %991, float %869, i64 63, !dbg !54
  %993 = fptrunc <64 x float> %992 to <64 x half>, !dbg !54
  br label %._crit_edge, !dbg !28

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi371 = phi i32 [ %.pre370, %.._crit_edge_crit_edge ], [ %300, %._crit_edge.loopexit ], !dbg !52
  %994 = phi <64 x half> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %993, %._crit_edge.loopexit ]
  %995 = or disjoint i32 %25, %37, !dbg !28
  %996 = or disjoint i32 %25, %36, !dbg !28
  %997 = or disjoint i32 %25, %35, !dbg !28
  %998 = or disjoint i32 %25, %34, !dbg !28
  %999 = or disjoint i32 %25, %33, !dbg !28
  %1000 = or disjoint i32 %25, %32, !dbg !28
  %1001 = or disjoint i32 %25, %31, !dbg !28
  %1002 = or disjoint i32 %25, %30, !dbg !28
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %1003 = mul i32 %1002, %8, !dbg !55
  %1004 = mul i32 %1001, %8, !dbg !55
  %1005 = mul i32 %1000, %8, !dbg !55
  %1006 = mul i32 %999, %8, !dbg !55
  %1007 = mul i32 %998, %8, !dbg !55
  %1008 = mul i32 %997, %8, !dbg !55
  %1009 = mul i32 %996, %8, !dbg !55
  %1010 = mul i32 %995, %8, !dbg !55
  %1011 = sext i32 %1003 to i64, !dbg !56
  %1012 = getelementptr half, ptr addrspace(1) %2, i64 %1011, !dbg !56
  %1013 = sext i32 %1004 to i64, !dbg !56
  %1014 = getelementptr half, ptr addrspace(1) %2, i64 %1013, !dbg !56
  %1015 = sext i32 %1005 to i64, !dbg !56
  %1016 = getelementptr half, ptr addrspace(1) %2, i64 %1015, !dbg !56
  %1017 = sext i32 %1006 to i64, !dbg !56
  %1018 = getelementptr half, ptr addrspace(1) %2, i64 %1017, !dbg !56
  %1019 = sext i32 %1007 to i64, !dbg !56
  %1020 = getelementptr half, ptr addrspace(1) %2, i64 %1019, !dbg !56
  %1021 = sext i32 %1008 to i64, !dbg !56
  %1022 = getelementptr half, ptr addrspace(1) %2, i64 %1021, !dbg !56
  %1023 = sext i32 %1009 to i64, !dbg !56
  %1024 = getelementptr half, ptr addrspace(1) %2, i64 %1023, !dbg !56
  %1025 = sext i32 %1010 to i64, !dbg !56
  %1026 = getelementptr half, ptr addrspace(1) %2, i64 %1025, !dbg !56
  %1027 = sext i32 %50 to i64, !dbg !57
  %1028 = getelementptr half, ptr addrspace(1) %1012, i64 %1027, !dbg !57
  %1029 = getelementptr half, ptr addrspace(1) %1014, i64 %1027, !dbg !57
  %1030 = getelementptr half, ptr addrspace(1) %1016, i64 %1027, !dbg !57
  %1031 = getelementptr half, ptr addrspace(1) %1018, i64 %1027, !dbg !57
  %1032 = getelementptr half, ptr addrspace(1) %1020, i64 %1027, !dbg !57
  %1033 = getelementptr half, ptr addrspace(1) %1022, i64 %1027, !dbg !57
  %1034 = getelementptr half, ptr addrspace(1) %1024, i64 %1027, !dbg !57
  %1035 = getelementptr half, ptr addrspace(1) %1026, i64 %1027, !dbg !57
  %1036 = icmp slt i32 %1002, %3, !dbg !58
  %1037 = icmp slt i32 %1001, %3, !dbg !58
  %1038 = icmp slt i32 %1000, %3, !dbg !58
  %1039 = icmp slt i32 %999, %3, !dbg !58
  %1040 = icmp slt i32 %998, %3, !dbg !58
  %1041 = icmp slt i32 %997, %3, !dbg !58
  %1042 = icmp slt i32 %996, %3, !dbg !58
  %1043 = icmp slt i32 %995, %3, !dbg !58
  %1044 = icmp slt i32 %50, %4, !dbg !59
  %1045 = and i1 %1036, %1044, !dbg !60
  %1046 = and i1 %1037, %1044, !dbg !60
  %1047 = and i1 %1038, %1044, !dbg !60
  %1048 = and i1 %1039, %1044, !dbg !60
  %1049 = and i1 %1040, %1044, !dbg !60
  %1050 = and i1 %1041, %1044, !dbg !60
  %1051 = and i1 %1042, %1044, !dbg !60
  %1052 = and i1 %1043, %1044, !dbg !60
  %1053 = shl nuw nsw i32 %26, 1, !dbg !52
  %1054 = and i32 %1053, 6, !dbg !52
  %1055 = shl nuw nsw i32 %26, 5, !dbg !52
  %1056 = and i32 %1055, 384, !dbg !52
  %1057 = or disjoint i32 %1056, %1054, !dbg !52
  %1058 = shl nuw nsw i32 %27, 5, !dbg !52
  %1059 = or disjoint i32 %1057, %1058, !dbg !52
  %1060 = or disjoint i32 %1059, %.pre-phi371, !dbg !52
  %1061 = and i32 %47, 1016, !dbg !52
  %1062 = lshr i32 %1059, 4, !dbg !52
  %1063 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1062, !dbg !52
  %1064 = getelementptr inbounds nuw half, ptr addrspace(3) %1063, i32 %1060, !dbg !52
  %1065 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !52
  store <2 x half> %1065, ptr addrspace(3) %1064, align 4, !dbg !52
  %1066 = or disjoint i32 %1060, 1024, !dbg !52
  %1067 = lshr i32 %1066, 4, !dbg !52
  %1068 = and i32 %1067, 268435448, !dbg !52
  %1069 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1068, !dbg !52
  %1070 = getelementptr inbounds nuw half, ptr addrspace(3) %1069, i32 %1066, !dbg !52
  %1071 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !52
  store <2 x half> %1071, ptr addrspace(3) %1070, align 4, !dbg !52
  %1072 = getelementptr inbounds nuw i8, ptr addrspace(3) %1064, i32 64, !dbg !52
  %1073 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !52
  store <2 x half> %1073, ptr addrspace(3) %1072, align 4, !dbg !52
  %1074 = or disjoint i32 %1060, 1056, !dbg !52
  %1075 = lshr i32 %1074, 4, !dbg !52
  %1076 = and i32 %1075, 268435448, !dbg !52
  %1077 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1076, !dbg !52
  %1078 = getelementptr inbounds nuw half, ptr addrspace(3) %1077, i32 %1074, !dbg !52
  %1079 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !52
  store <2 x half> %1079, ptr addrspace(3) %1078, align 4, !dbg !52
  %1080 = getelementptr inbounds nuw i8, ptr addrspace(3) %1064, i32 128, !dbg !52
  %1081 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !52
  store <2 x half> %1081, ptr addrspace(3) %1080, align 4, !dbg !52
  %1082 = or disjoint i32 %1060, 1088, !dbg !52
  %1083 = lshr i32 %1082, 4, !dbg !52
  %1084 = and i32 %1083, 268435448, !dbg !52
  %1085 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1084, !dbg !52
  %1086 = getelementptr inbounds nuw half, ptr addrspace(3) %1085, i32 %1082, !dbg !52
  %1087 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !52
  store <2 x half> %1087, ptr addrspace(3) %1086, align 4, !dbg !52
  %1088 = getelementptr inbounds nuw i8, ptr addrspace(3) %1064, i32 192, !dbg !52
  %1089 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !52
  store <2 x half> %1089, ptr addrspace(3) %1088, align 4, !dbg !52
  %1090 = or disjoint i32 %1060, 1120, !dbg !52
  %1091 = lshr i32 %1090, 4, !dbg !52
  %1092 = and i32 %1091, 268435448, !dbg !52
  %1093 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1092, !dbg !52
  %1094 = getelementptr inbounds nuw half, ptr addrspace(3) %1093, i32 %1090, !dbg !52
  %1095 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !52
  store <2 x half> %1095, ptr addrspace(3) %1094, align 4, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %1096 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %135, !dbg !52
  %1097 = getelementptr inbounds nuw half, ptr addrspace(3) %1096, i32 %1061, !dbg !52
  %1098 = load <4 x i32>, ptr addrspace(3) %1097, align 16, !dbg !52
  %1099 = or disjoint i32 %1061, 1024, !dbg !52
  %1100 = lshr i32 %1099, 4, !dbg !52
  %1101 = and i32 %1100, 120, !dbg !52
  %1102 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1101, !dbg !52
  %1103 = getelementptr inbounds nuw half, ptr addrspace(3) %1102, i32 %1099, !dbg !52
  %1104 = load <4 x i32>, ptr addrspace(3) %1103, align 16, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %1105 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !52
  store <2 x half> %1105, ptr addrspace(3) %1064, align 4, !dbg !52
  %1106 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !52
  store <2 x half> %1106, ptr addrspace(3) %1070, align 4, !dbg !52
  %1107 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !52
  store <2 x half> %1107, ptr addrspace(3) %1072, align 4, !dbg !52
  %1108 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !52
  store <2 x half> %1108, ptr addrspace(3) %1078, align 4, !dbg !52
  %1109 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !52
  store <2 x half> %1109, ptr addrspace(3) %1080, align 4, !dbg !52
  %1110 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !52
  store <2 x half> %1110, ptr addrspace(3) %1086, align 4, !dbg !52
  %1111 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !52
  store <2 x half> %1111, ptr addrspace(3) %1088, align 4, !dbg !52
  %1112 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !52
  store <2 x half> %1112, ptr addrspace(3) %1094, align 4, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %1113 = load <4 x i32>, ptr addrspace(3) %1097, align 16, !dbg !52
  %1114 = load <4 x i32>, ptr addrspace(3) %1103, align 16, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %1115 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 32, i32 33>, !dbg !52
  store <2 x half> %1115, ptr addrspace(3) %1064, align 4, !dbg !52
  %1116 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 34, i32 35>, !dbg !52
  store <2 x half> %1116, ptr addrspace(3) %1070, align 4, !dbg !52
  %1117 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 36, i32 37>, !dbg !52
  store <2 x half> %1117, ptr addrspace(3) %1072, align 4, !dbg !52
  %1118 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 38, i32 39>, !dbg !52
  store <2 x half> %1118, ptr addrspace(3) %1078, align 4, !dbg !52
  %1119 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 40, i32 41>, !dbg !52
  store <2 x half> %1119, ptr addrspace(3) %1080, align 4, !dbg !52
  %1120 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 42, i32 43>, !dbg !52
  store <2 x half> %1120, ptr addrspace(3) %1086, align 4, !dbg !52
  %1121 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 44, i32 45>, !dbg !52
  store <2 x half> %1121, ptr addrspace(3) %1088, align 4, !dbg !52
  %1122 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 46, i32 47>, !dbg !52
  store <2 x half> %1122, ptr addrspace(3) %1094, align 4, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %1123 = load <4 x i32>, ptr addrspace(3) %1097, align 16, !dbg !52
  %1124 = load <4 x i32>, ptr addrspace(3) %1103, align 16, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %1125 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 48, i32 49>, !dbg !52
  store <2 x half> %1125, ptr addrspace(3) %1064, align 4, !dbg !52
  %1126 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 50, i32 51>, !dbg !52
  store <2 x half> %1126, ptr addrspace(3) %1070, align 4, !dbg !52
  %1127 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 52, i32 53>, !dbg !52
  store <2 x half> %1127, ptr addrspace(3) %1072, align 4, !dbg !52
  %1128 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 54, i32 55>, !dbg !52
  store <2 x half> %1128, ptr addrspace(3) %1078, align 4, !dbg !52
  %1129 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 56, i32 57>, !dbg !52
  store <2 x half> %1129, ptr addrspace(3) %1080, align 4, !dbg !52
  %1130 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 58, i32 59>, !dbg !52
  store <2 x half> %1130, ptr addrspace(3) %1086, align 4, !dbg !52
  %1131 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 60, i32 61>, !dbg !52
  store <2 x half> %1131, ptr addrspace(3) %1088, align 4, !dbg !52
  %1132 = shufflevector <64 x half> %994, <64 x half> poison, <2 x i32> <i32 62, i32 63>, !dbg !52
  store <2 x half> %1132, ptr addrspace(3) %1094, align 4, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %1133 = load <4 x i32>, ptr addrspace(3) %1097, align 16, !dbg !52
  %1134 = load <4 x i32>, ptr addrspace(3) %1103, align 16, !dbg !52
  %.extract = extractelement <4 x i32> %1098, i64 0, !dbg !52
  %.extract295 = extractelement <4 x i32> %1098, i64 1, !dbg !52
  %.extract297 = extractelement <4 x i32> %1098, i64 2, !dbg !52
  %.extract299 = extractelement <4 x i32> %1098, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract295, i32 %.extract297, i32 %.extract299, ptr addrspace(1) %1028, i1 %1045) #2, !dbg !52
  %.extract301 = extractelement <4 x i32> %1104, i64 0, !dbg !52
  %.extract303 = extractelement <4 x i32> %1104, i64 1, !dbg !52
  %.extract305 = extractelement <4 x i32> %1104, i64 2, !dbg !52
  %.extract307 = extractelement <4 x i32> %1104, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract301, i32 %.extract303, i32 %.extract305, i32 %.extract307, ptr addrspace(1) %1029, i1 %1046) #2, !dbg !52
  %.extract309 = extractelement <4 x i32> %1113, i64 0, !dbg !52
  %.extract311 = extractelement <4 x i32> %1113, i64 1, !dbg !52
  %.extract313 = extractelement <4 x i32> %1113, i64 2, !dbg !52
  %.extract315 = extractelement <4 x i32> %1113, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract309, i32 %.extract311, i32 %.extract313, i32 %.extract315, ptr addrspace(1) %1030, i1 %1047) #2, !dbg !52
  %.extract317 = extractelement <4 x i32> %1114, i64 0, !dbg !52
  %.extract319 = extractelement <4 x i32> %1114, i64 1, !dbg !52
  %.extract321 = extractelement <4 x i32> %1114, i64 2, !dbg !52
  %.extract323 = extractelement <4 x i32> %1114, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract317, i32 %.extract319, i32 %.extract321, i32 %.extract323, ptr addrspace(1) %1031, i1 %1048) #2, !dbg !52
  %.extract325 = extractelement <4 x i32> %1123, i64 0, !dbg !52
  %.extract327 = extractelement <4 x i32> %1123, i64 1, !dbg !52
  %.extract329 = extractelement <4 x i32> %1123, i64 2, !dbg !52
  %.extract331 = extractelement <4 x i32> %1123, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract325, i32 %.extract327, i32 %.extract329, i32 %.extract331, ptr addrspace(1) %1032, i1 %1049) #2, !dbg !52
  %.extract333 = extractelement <4 x i32> %1124, i64 0, !dbg !52
  %.extract335 = extractelement <4 x i32> %1124, i64 1, !dbg !52
  %.extract337 = extractelement <4 x i32> %1124, i64 2, !dbg !52
  %.extract339 = extractelement <4 x i32> %1124, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract333, i32 %.extract335, i32 %.extract337, i32 %.extract339, ptr addrspace(1) %1033, i1 %1050) #2, !dbg !52
  %.extract341 = extractelement <4 x i32> %1133, i64 0, !dbg !52
  %.extract343 = extractelement <4 x i32> %1133, i64 1, !dbg !52
  %.extract345 = extractelement <4 x i32> %1133, i64 2, !dbg !52
  %.extract347 = extractelement <4 x i32> %1133, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract341, i32 %.extract343, i32 %.extract345, i32 %.extract347, ptr addrspace(1) %1034, i1 %1051) #2, !dbg !52
  %.extract349 = extractelement <4 x i32> %1134, i64 0, !dbg !52
  %.extract351 = extractelement <4 x i32> %1134, i64 1, !dbg !52
  %.extract353 = extractelement <4 x i32> %1134, i64 2, !dbg !52
  %.extract355 = extractelement <4 x i32> %1134, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract349, i32 %.extract351, i32 %.extract353, i32 %.extract355, ptr addrspace(1) %1035, i1 %1052) #2, !dbg !52
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "test.py", directory: "/root/triton-runner/triton_issue/performance#7096")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !1, file: !1, line: 10, type: !6, scopeLine: 10, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 19, column: 24, scope: !5)
!9 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !12)
!10 = distinct !DILexicalBlockFile(scope: !5, file: !11, discriminator: 0)
!11 = !DIFile(filename: "standard.py", directory: "/root/miniconda3/lib/python3.12/site-packages/triton/language")
!12 = !DILocation(line: 20, column: 27, scope: !5)
!13 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !12)
!14 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !15)
!15 = !DILocation(line: 21, column: 27, scope: !5)
!16 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !15)
!17 = !DILocation(line: 22, column: 38, scope: !5)
!18 = !DILocation(line: 23, column: 22, scope: !5)
!19 = !DILocation(line: 24, column: 29, scope: !5)
!20 = !DILocation(line: 25, column: 35, scope: !5)
!21 = !DILocation(line: 25, column: 48, scope: !5)
!22 = !DILocation(line: 26, column: 34, scope: !5)
!23 = !DILocation(line: 27, column: 40, scope: !5)
!24 = !DILocation(line: 26, column: 54, scope: !5)
!25 = !DILocation(line: 26, column: 27, scope: !5)
!26 = !DILocation(line: 29, column: 23, scope: !5)
!27 = !DILocation(line: 29, column: 51, scope: !5)
!28 = !DILocation(line: 29, column: 38, scope: !5)
!29 = !DILocation(line: 29, column: 68, scope: !5)
!30 = !DILocation(line: 30, column: 23, scope: !5)
!31 = !DILocation(line: 30, column: 51, scope: !5)
!32 = !DILocation(line: 30, column: 38, scope: !5)
!33 = !DILocation(line: 30, column: 68, scope: !5)
!34 = !DILocation(line: 32, column: 41, scope: !5)
!35 = !DILocation(line: 32, column: 53, scope: !5)
!36 = !DILocation(line: 32, column: 22, scope: !5)
!37 = !DILocation(line: 33, column: 40, scope: !5)
!38 = !DILocation(line: 33, column: 52, scope: !5)
!39 = !DILocation(line: 33, column: 22, scope: !5)
!40 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !41)
!41 = !DILocation(line: 36, column: 33, scope: !5)
!42 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !41)
!43 = !DILocation(line: 41, column: 33, scope: !5)
!44 = !DILocation(line: 36, column: 22, scope: !5)
!45 = !DILocation(line: 37, column: 51, scope: !5)
!46 = !DILocation(line: 37, column: 20, scope: !5)
!47 = !DILocation(line: 38, column: 51, scope: !5)
!48 = !DILocation(line: 38, column: 20, scope: !5)
!49 = !DILocation(line: 40, column: 18, scope: !5)
!50 = !DILocation(line: 41, column: 18, scope: !5)
!51 = !DILocation(line: 37, column: 55, scope: !5)
!52 = !DILocation(line: 48, column: 21, scope: !5)
!53 = !DILocation(line: 39, column: 35, scope: !5)
!54 = !DILocation(line: 42, column: 23, scope: !5)
!55 = !DILocation(line: 46, column: 33, scope: !5)
!56 = !DILocation(line: 46, column: 21, scope: !5)
!57 = !DILocation(line: 46, column: 52, scope: !5)
!58 = !DILocation(line: 47, column: 33, scope: !5)
!59 = !DILocation(line: 47, column: 58, scope: !5)
!60 = !DILocation(line: 47, column: 39, scope: !5)
!61 = !DILocation(line: 48, column: 4, scope: !5)
