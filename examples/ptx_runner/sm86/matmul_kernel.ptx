//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_86
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u32 matmul_kernel_param_8,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_9
)
.reqntid 128
{
	.reg .pred 	%p<55>;
	.reg .b32 	%r<1722>;
	.reg .b64 	%rd<136>;
	.loc	1 7 0                           // matmul-with-dot-v2.py:7:0
$L__func_begin0:
	.loc	1 7 0                           // matmul-with-dot-v2.py:7:0

// %bb.0:
	ld.param.b32 	%r252, [matmul_kernel_param_8];
	ld.param.b32 	%r251, [matmul_kernel_param_7];
	ld.param.b32 	%r250, [matmul_kernel_param_5];
	ld.param.b32 	%r249, [matmul_kernel_param_4];
	ld.param.b32 	%r248, [matmul_kernel_param_3];
	ld.param.b64 	%rd17, [matmul_kernel_param_2];
	ld.param.b64 	%rd42, [matmul_kernel_param_0];
	ld.param.b64 	%rd43, [matmul_kernel_param_1];
$L__tmp0:
	.loc	1 16 26                         // matmul-with-dot-v2.py:16:26
	mov.u32 	%r301, %ctaid.x;
	.loc	1 17 26                         // matmul-with-dot-v2.py:17:26
	mov.u32 	%r302, %ctaid.y;
	.loc	1 19 21                         // matmul-with-dot-v2.py:19:21
	shl.b32 	%r1, %r302, 7;
	.loc	1 19 49                         // matmul-with-dot-v2.py:19:49
	mov.u32 	%r2, %tid.x;
	and.b32 	%r3, %r2, 16;
	and.b32 	%r4, %r2, 32;
	ld.param.b32 	%r303, [matmul_kernel_param_6];
	and.b32 	%r5, %r2, 64;
	shr.u32 	%r304, %r2, 3;
	bfe.u32 	%r6, %r2, 3, 4;
	or.b32 	%r7, %r6, 16;
	or.b32 	%r8, %r6, 32;
	or.b32 	%r9, %r6, 48;
	.loc	1 19 36                         // matmul-with-dot-v2.py:19:36
	or.b32 	%r305, %r6, %r1;
	or.b32 	%r306, %r7, %r1;
	or.b32 	%r307, %r8, %r1;
	or.b32 	%r308, %r9, %r1;
	or.b32 	%r309, %r304, %r1;
	or.b32 	%r310, %r309, 112;
	.loc	1 20 21                         // matmul-with-dot-v2.py:20:21
	shl.b32 	%r10, %r301, 6;
	.loc	1 20 49                         // matmul-with-dot-v2.py:20:49
	shl.b32 	%r311, %r2, 3;
	and.b32 	%r11, %r311, 56;
	.loc	1 20 36                         // matmul-with-dot-v2.py:20:36
	or.b32 	%r312, %r11, %r10;
	.loc	1 23 39                         // matmul-with-dot-v2.py:23:39
	mul.lo.s32 	%r313, %r303, %r305;
	mul.lo.s32 	%r314, %r303, %r306;
	mul.lo.s32 	%r315, %r303, %r307;
	mul.lo.s32 	%r316, %r303, %r308;
	shl.b32 	%r317, %r303, 6;
	add.s32 	%r318, %r313, %r317;
	shl.b32 	%r319, %r303, 4;
	add.s32 	%r320, %r318, %r319;
	add.s32 	%r321, %r320, %r319;
	mul.lo.s32 	%r322, %r303, %r310;
	.loc	1 23 21                         // matmul-with-dot-v2.py:23:21
	mul.wide.s32 	%rd44, %r313, 2;
	add.s64 	%rd45, %rd42, %rd44;
	mul.wide.s32 	%rd46, %r314, 2;
	add.s64 	%rd47, %rd42, %rd46;
	mul.wide.s32 	%rd48, %r315, 2;
	add.s64 	%rd49, %rd42, %rd48;
	mul.wide.s32 	%rd50, %r316, 2;
	add.s64 	%rd51, %rd42, %rd50;
	mul.wide.s32 	%rd52, %r318, 2;
	add.s64 	%rd53, %rd42, %rd52;
	mul.wide.s32 	%rd54, %r320, 2;
	add.s64 	%rd55, %rd42, %rd54;
	mul.wide.s32 	%rd56, %r321, 2;
	add.s64 	%rd57, %rd42, %rd56;
	mul.wide.s32 	%rd58, %r322, 2;
	add.s64 	%rd59, %rd42, %rd58;
	.loc	1 23 51                         // matmul-with-dot-v2.py:23:51
	mul.wide.u32 	%rd60, %r11, 2;
	add.s64 	%rd18, %rd45, %rd60;
	add.s64 	%rd19, %rd47, %rd60;
	add.s64 	%rd20, %rd49, %rd60;
	add.s64 	%rd21, %rd51, %rd60;
	add.s64 	%rd22, %rd53, %rd60;
	add.s64 	%rd23, %rd55, %rd60;
	add.s64 	%rd24, %rd57, %rd60;
	add.s64 	%rd25, %rd59, %rd60;
	.loc	1 24 39                         // matmul-with-dot-v2.py:24:39
	mul.lo.s32 	%r323, %r251, %r6;
	shl.b32 	%r324, %r251, 4;
	add.s32 	%r325, %r323, %r324;
	add.s32 	%r326, %r325, %r324;
	add.s32 	%r327, %r326, %r324;
	.loc	1 24 21                         // matmul-with-dot-v2.py:24:21
	mul.wide.s32 	%rd61, %r323, 2;
	add.s64 	%rd62, %rd43, %rd61;
	mul.wide.s32 	%rd63, %r325, 2;
	add.s64 	%rd64, %rd43, %rd63;
	mul.wide.s32 	%rd65, %r326, 2;
	add.s64 	%rd66, %rd43, %rd65;
	mul.wide.s32 	%rd67, %r327, 2;
	add.s64 	%rd68, %rd43, %rd67;
	.loc	1 24 51                         // matmul-with-dot-v2.py:24:51
	mul.wide.s32 	%rd69, %r312, 2;
	add.s64 	%rd26, %rd62, %rd69;
	add.s64 	%rd27, %rd64, %rd69;
	add.s64 	%rd28, %rd66, %rd69;
	add.s64 	%rd29, %rd68, %rd69;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ matmul-with-dot-v2.py:28:33 ]
	add.s32 	%r12, %r249, 63;
$L__tmp2:
	.loc	1 28 22                         // matmul-with-dot-v2.py:28:22
	setp.gt.s32 	%p1, %r12, 63;
	.loc	1 30 82                         // matmul-with-dot-v2.py:30:82
	setp.lt.s32 	%p2, %r11, %r249;
	.loc	1 30 20                         // matmul-with-dot-v2.py:30:20
	xor.b32 	%r328, %r311, %r2;
	and.b32 	%r329, %r328, 56;
	shl.b32 	%r330, %r6, 6;
	or.b32 	%r13, %r329, %r330;
	shl.b32 	%r331, %r13, 1;
	mov.b32 	%r332, global_smem;
	add.s32 	%r253, %r332, %r331;
	add.s32 	%r255, %r253, 2048;
	add.s32 	%r257, %r253, 4096;
	add.s32 	%r259, %r253, 6144;
	add.s32 	%r261, %r253, 8192;
	add.s32 	%r263, %r253, 10240;
	add.s32 	%r265, %r253, 12288;
	add.s32 	%r267, %r253, 14336;
	selp.b32 	%r333, 16, 0, %p1;
	selp.b32 	%r256, %r333, 0, %p2;
	// begin inline asm
	cp.async.cg.shared.global [ %r253 + 0 ], [ %rd18 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r255 + 0 ], [ %rd19 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r257 + 0 ], [ %rd20 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r259 + 0 ], [ %rd21 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r261 + 0 ], [ %rd22 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r263 + 0 ], [ %rd23 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r265 + 0 ], [ %rd24 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r267 + 0 ], [ %rd25 + 0 ], 0x10, %r256;
	// end inline asm
	cp.async.commit_group;
	.loc	1 31 82                         // matmul-with-dot-v2.py:31:82
	setp.lt.s32 	%p3, %r6, %r249;
	setp.lt.s32 	%p4, %r7, %r249;
	setp.lt.s32 	%p5, %r8, %r249;
	setp.lt.s32 	%p6, %r9, %r249;
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	add.s32 	%r269, %r253, 32768;
	add.s32 	%r271, %r253, 34816;
	add.s32 	%r273, %r253, 36864;
	add.s32 	%r275, %r253, 38912;
	selp.b32 	%r270, %r333, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r269 + 0 ], [ %rd26 + 0 ], 0x10, %r270;
	// end inline asm
	selp.b32 	%r272, %r333, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r271 + 0 ], [ %rd27 + 0 ], 0x10, %r272;
	// end inline asm
	selp.b32 	%r274, %r333, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r273 + 0 ], [ %rd28 + 0 ], 0x10, %r274;
	// end inline asm
	selp.b32 	%r276, %r333, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r275 + 0 ], [ %rd29 + 0 ], 0x10, %r276;
	// end inline asm
	cp.async.commit_group;
	.loc	1 28 22                         // matmul-with-dot-v2.py:28:22
	setp.gt.s32 	%p7, %r12, 127;
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	add.s32 	%r334, %r249, -64;
	.loc	1 30 82                         // matmul-with-dot-v2.py:30:82
	setp.lt.s32 	%p8, %r11, %r334;
	.loc	1 30 29                         // matmul-with-dot-v2.py:30:29
	add.s64 	%rd30, %rd18, 128;
	add.s64 	%rd31, %rd19, 128;
	add.s64 	%rd32, %rd20, 128;
	add.s64 	%rd33, %rd21, 128;
	add.s64 	%rd34, %rd22, 128;
	add.s64 	%rd35, %rd23, 128;
	add.s64 	%rd36, %rd24, 128;
	add.s64 	%rd37, %rd25, 128;
	.loc	1 30 20                         // matmul-with-dot-v2.py:30:20
	bar.sync 	0;
	add.s32 	%r277, %r253, 16384;
	add.s32 	%r279, %r253, 18432;
	add.s32 	%r281, %r253, 20480;
	add.s32 	%r283, %r253, 22528;
	add.s32 	%r285, %r253, 24576;
	add.s32 	%r287, %r253, 26624;
	add.s32 	%r289, %r253, 28672;
	add.s32 	%r291, %r253, 30720;
	selp.b32 	%r335, 16, 0, %p8;
	selp.b32 	%r280, %r335, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r277 + 0 ], [ %rd30 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r279 + 0 ], [ %rd31 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r281 + 0 ], [ %rd32 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r283 + 0 ], [ %rd33 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r285 + 0 ], [ %rd34 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r287 + 0 ], [ %rd35 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r289 + 0 ], [ %rd36 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r291 + 0 ], [ %rd37 + 0 ], 0x10, %r280;
	// end inline asm
	cp.async.commit_group;
	.loc	1 31 82                         // matmul-with-dot-v2.py:31:82
	setp.lt.s32 	%p9, %r6, %r334;
	setp.lt.s32 	%p10, %r7, %r334;
	setp.lt.s32 	%p11, %r8, %r334;
	setp.lt.s32 	%p12, %r9, %r334;
	.loc	1 31 48                         // matmul-with-dot-v2.py:31:48
	shl.b32 	%r14, %r251, 6;
	.loc	1 31 29                         // matmul-with-dot-v2.py:31:29
	mul.wide.s32 	%rd70, %r14, 2;
	add.s64 	%rd38, %rd26, %rd70;
	add.s64 	%rd39, %rd27, %rd70;
	add.s64 	%rd40, %rd28, %rd70;
	add.s64 	%rd41, %rd29, %rd70;
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	add.s32 	%r293, %r253, 40960;
	add.s32 	%r295, %r253, 43008;
	add.s32 	%r297, %r253, 45056;
	add.s32 	%r299, %r253, 47104;
	selp.b32 	%r336, 16, 0, %p9;
	selp.b32 	%r294, %r336, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r293 + 0 ], [ %rd38 + 0 ], 0x10, %r294;
	// end inline asm
	selp.b32 	%r337, 16, 0, %p10;
	selp.b32 	%r296, %r337, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r295 + 0 ], [ %rd39 + 0 ], 0x10, %r296;
	// end inline asm
	selp.b32 	%r338, 16, 0, %p11;
	selp.b32 	%r298, %r338, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r297 + 0 ], [ %rd40 + 0 ], 0x10, %r298;
	// end inline asm
	selp.b32 	%r339, 16, 0, %p12;
	selp.b32 	%r300, %r339, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r299 + 0 ], [ %rd41 + 0 ], 0x10, %r300;
	// end inline asm
	cp.async.commit_group;
	.loc	1 28 22                         // matmul-with-dot-v2.py:28:22
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %.lr.ph
$L__tmp3:
	.loc	2 40 28                         // standard.py:40:28 @[ matmul-with-dot-v2.py:28:33 ]
	shr.u32 	%r345, %r12, 6;
$L__tmp4:
	.loc	1 20 49                         // matmul-with-dot-v2.py:20:49
	bfe.s32 	%r346, %r2, 2, 1;
	add.s32 	%r347, %r345, -2;
	and.b32 	%r348, %r2, 3;
	mul.lo.s32 	%r349, %r348, 72;
	and.b32 	%r350, %r346, 288;
	xor.b32 	%r351, %r350, %r349;
	shl.b32 	%r352, %r2, 6;
	and.b32 	%r353, %r352, 512;
	or.b32 	%r354, %r351, %r353;
	shr.u32 	%r355, %r3, 1;
	xor.b32 	%r356, %r354, %r355;
	shl.b32 	%r1656, %r5, 4;
	or.b32 	%r18, %r356, %r1656;
	xor.b32 	%r19, %r18, 16;
	xor.b32 	%r20, %r18, 32;
	xor.b32 	%r21, %r18, 48;
	or.b32 	%r22, %r18, 2048;
	xor.b32 	%r23, %r18, 2064;
	xor.b32 	%r24, %r18, 2080;
	xor.b32 	%r25, %r18, 2096;
	or.b32 	%r26, %r18, 4096;
	xor.b32 	%r27, %r18, 4112;
	xor.b32 	%r28, %r18, 4128;
	xor.b32 	%r29, %r18, 4144;
	or.b32 	%r30, %r18, 6144;
	xor.b32 	%r31, %r18, 6160;
	xor.b32 	%r32, %r18, 6176;
	xor.b32 	%r33, %r18, 6192;
	and.b32 	%r357, %r352, 1536;
	or.b32 	%r358, %r351, %r357;
	shr.u32 	%r1657, %r4, 2;
	xor.b32 	%r35, %r358, %r1657;
	xor.b32 	%r36, %r35, 16;
	xor.b32 	%r37, %r35, 2064;
	xor.b32 	%r38, %r35, 32;
	xor.b32 	%r39, %r35, 2080;
	xor.b32 	%r40, %r35, 48;
	xor.b32 	%r41, %r35, 2096;
	.loc	1 28 22                         // matmul-with-dot-v2.py:28:22
	cvt.s64.s32 	%rd13, %r347;
	cvt.u64.u32 	%rd14, %r345;
	shl.b32 	%r1589, %r251, 7;
	add.s32 	%r1587, %r249, -128;
	mov.b32 	%r1592, 0f00000000;
	mov.b32 	%r1591, 1;
	mov.b32 	%r1590, -1;
	mov.b64 	%rd135, 0;
	mov.b32 	%r1588, 128;
	shl.b32 	%r1404, %r19, 1;
	shl.b32 	%r1405, %r20, 1;
	shl.b32 	%r1406, %r21, 1;
	shl.b32 	%r1407, %r22, 1;
	shl.b32 	%r1408, %r23, 1;
	shl.b32 	%r1409, %r24, 1;
	shl.b32 	%r1410, %r25, 1;
	shl.b32 	%r1411, %r26, 1;
	shl.b32 	%r1412, %r27, 1;
	shl.b32 	%r1413, %r28, 1;
	shl.b32 	%r1414, %r29, 1;
	shl.b32 	%r1415, %r30, 1;
	shl.b32 	%r1416, %r31, 1;
	shl.b32 	%r1417, %r32, 1;
	shl.b32 	%r1418, %r33, 1;
	shl.b32 	%r1423, %r36, 1;
	shl.b32 	%r1424, %r37, 1;
	shl.b32 	%r1425, %r38, 1;
	shl.b32 	%r1426, %r39, 1;
	shl.b32 	%r1427, %r40, 1;
	shl.b32 	%r1428, %r41, 1;
	mov.b32 	%r1593, %r1592;
	mov.b32 	%r1594, %r1592;
	mov.b32 	%r1595, %r1592;
	mov.b32 	%r1596, %r1592;
	mov.b32 	%r1597, %r1592;
	mov.b32 	%r1598, %r1592;
	mov.b32 	%r1599, %r1592;
	mov.b32 	%r1600, %r1592;
	mov.b32 	%r1601, %r1592;
	mov.b32 	%r1602, %r1592;
	mov.b32 	%r1603, %r1592;
	mov.b32 	%r1604, %r1592;
	mov.b32 	%r1605, %r1592;
	mov.b32 	%r1606, %r1592;
	mov.b32 	%r1607, %r1592;
	mov.b32 	%r1608, %r1592;
	mov.b32 	%r1609, %r1592;
	mov.b32 	%r1610, %r1592;
	mov.b32 	%r1611, %r1592;
	mov.b32 	%r1612, %r1592;
	mov.b32 	%r1613, %r1592;
	mov.b32 	%r1614, %r1592;
	mov.b32 	%r1615, %r1592;
	mov.b32 	%r1616, %r1592;
	mov.b32 	%r1617, %r1592;
	mov.b32 	%r1618, %r1592;
	mov.b32 	%r1619, %r1592;
	mov.b32 	%r1620, %r1592;
	mov.b32 	%r1621, %r1592;
	mov.b32 	%r1622, %r1592;
	mov.b32 	%r1623, %r1592;
	mov.b32 	%r1624, %r1592;
	mov.b32 	%r1625, %r1592;
	mov.b32 	%r1626, %r1592;
	mov.b32 	%r1627, %r1592;
	mov.b32 	%r1628, %r1592;
	mov.b32 	%r1629, %r1592;
	mov.b32 	%r1630, %r1592;
	mov.b32 	%r1631, %r1592;
	mov.b32 	%r1632, %r1592;
	mov.b32 	%r1633, %r1592;
	mov.b32 	%r1634, %r1592;
	mov.b32 	%r1635, %r1592;
	mov.b32 	%r1636, %r1592;
	mov.b32 	%r1637, %r1592;
	mov.b32 	%r1638, %r1592;
	mov.b32 	%r1639, %r1592;
	mov.b32 	%r1640, %r1592;
	mov.b32 	%r1641, %r1592;
	mov.b32 	%r1642, %r1592;
	mov.b32 	%r1643, %r1592;
	mov.b32 	%r1644, %r1592;
	mov.b32 	%r1645, %r1592;
	mov.b32 	%r1646, %r1592;
	mov.b32 	%r1647, %r1592;
	mov.b32 	%r1648, %r1592;
	mov.b32 	%r1649, %r1592;
	mov.b32 	%r1650, %r1592;
	mov.b32 	%r1651, %r1592;
	mov.b32 	%r1652, %r1592;
	mov.b32 	%r1653, %r1592;
	mov.b32 	%r1654, %r1592;
	mov.b32 	%r1655, %r1592;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s64 	%p13, %rd135, %rd13;
	add.s32 	%r1399, %r1590, 1;
	setp.gt.s32 	%p14, %r1399, 1;
	selp.b32 	%r1590, 0, %r1399, %p14;
	.loc	1 30 20                         // matmul-with-dot-v2.py:30:20
	cp.async.wait_group 	2;
	bar.sync 	0;
	shl.b32 	%r1400, %r1590, 14;
	add.s32 	%r1402, %r332, %r1400;
	shl.b32 	%r1403, %r18, 1;
	add.s32 	%r363, %r1402, %r1403;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r487, %r488, %r489, %r490}, [%r363];
	// end inline asm
	add.s32 	%r368, %r1402, %r1404;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r711, %r712, %r713, %r714}, [%r368];
	// end inline asm
	add.s32 	%r373, %r1402, %r1405;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r935, %r936, %r937, %r938}, [%r373];
	// end inline asm
	add.s32 	%r378, %r1402, %r1406;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1159, %r1160, %r1161, %r1162}, [%r378];
	// end inline asm
	add.s32 	%r383, %r1402, %r1407;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r543, %r544, %r545, %r546}, [%r383];
	// end inline asm
	add.s32 	%r388, %r1402, %r1408;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r767, %r768, %r769, %r770}, [%r388];
	// end inline asm
	add.s32 	%r393, %r1402, %r1409;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r991, %r992, %r993, %r994}, [%r393];
	// end inline asm
	add.s32 	%r398, %r1402, %r1410;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1215, %r1216, %r1217, %r1218}, [%r398];
	// end inline asm
	add.s32 	%r403, %r1402, %r1411;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r599, %r600, %r601, %r602}, [%r403];
	// end inline asm
	add.s32 	%r408, %r1402, %r1412;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r823, %r824, %r825, %r826}, [%r408];
	// end inline asm
	add.s32 	%r413, %r1402, %r1413;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1047, %r1048, %r1049, %r1050}, [%r413];
	// end inline asm
	add.s32 	%r418, %r1402, %r1414;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1271, %r1272, %r1273, %r1274}, [%r418];
	// end inline asm
	add.s32 	%r423, %r1402, %r1415;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r655, %r656, %r657, %r658}, [%r423];
	// end inline asm
	add.s32 	%r428, %r1402, %r1416;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r879, %r880, %r881, %r882}, [%r428];
	// end inline asm
	add.s32 	%r433, %r1402, %r1417;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1103, %r1104, %r1105, %r1106}, [%r433];
	// end inline asm
	add.s32 	%r438, %r1402, %r1418;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1327, %r1328, %r1329, %r1330}, [%r438];
	// end inline asm
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	shl.b32 	%r1419, %r1590, 13;
	add.s32 	%r1420, %r332, 32768;
	add.s32 	%r1421, %r1420, %r1419;
	shl.b32 	%r1422, %r35, 1;
	add.s32 	%r443, %r1421, %r1422;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r491, %r492, %r715, %r716}, [%r443];
	// end inline asm
	add.s32 	%r448, %r443, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r939, %r940, %r1163, %r1164}, [%r448];
	// end inline asm
	add.s32 	%r453, %r1421, %r1423;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r505, %r506, %r729, %r730}, [%r453];
	// end inline asm
	add.s32 	%r458, %r1421, %r1424;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r953, %r954, %r1177, %r1178}, [%r458];
	// end inline asm
	add.s32 	%r463, %r1421, %r1425;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r519, %r520, %r743, %r744}, [%r463];
	// end inline asm
	add.s32 	%r468, %r1421, %r1426;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r967, %r968, %r1191, %r1192}, [%r468];
	// end inline asm
	add.s32 	%r473, %r1421, %r1427;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r533, %r534, %r757, %r758}, [%r473];
	// end inline asm
	add.s32 	%r478, %r1421, %r1428;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r981, %r982, %r1205, %r1206}, [%r478];
	// end inline asm
	.loc	1 32 32                         // matmul-with-dot-v2.py:32:32
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1592, %r1593, %r1594, %r1595 }, { %r487, %r488, %r489, %r490 }, { %r491, %r492 }, { %r1592, %r1593, %r1594, %r1595 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1596, %r1597, %r1598, %r1599 }, { %r487, %r488, %r489, %r490 }, { %r505, %r506 }, { %r1596, %r1597, %r1598, %r1599 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1600, %r1601, %r1602, %r1603 }, { %r487, %r488, %r489, %r490 }, { %r519, %r520 }, { %r1600, %r1601, %r1602, %r1603 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1604, %r1605, %r1606, %r1607 }, { %r487, %r488, %r489, %r490 }, { %r533, %r534 }, { %r1604, %r1605, %r1606, %r1607 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1608, %r1609, %r1610, %r1611 }, { %r543, %r544, %r545, %r546 }, { %r491, %r492 }, { %r1608, %r1609, %r1610, %r1611 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1612, %r1613, %r1614, %r1615 }, { %r543, %r544, %r545, %r546 }, { %r505, %r506 }, { %r1612, %r1613, %r1614, %r1615 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1616, %r1617, %r1618, %r1619 }, { %r543, %r544, %r545, %r546 }, { %r519, %r520 }, { %r1616, %r1617, %r1618, %r1619 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1620, %r1621, %r1622, %r1623 }, { %r543, %r544, %r545, %r546 }, { %r533, %r534 }, { %r1620, %r1621, %r1622, %r1623 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1624, %r1625, %r1626, %r1627 }, { %r599, %r600, %r601, %r602 }, { %r491, %r492 }, { %r1624, %r1625, %r1626, %r1627 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1628, %r1629, %r1630, %r1631 }, { %r599, %r600, %r601, %r602 }, { %r505, %r506 }, { %r1628, %r1629, %r1630, %r1631 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1632, %r1633, %r1634, %r1635 }, { %r599, %r600, %r601, %r602 }, { %r519, %r520 }, { %r1632, %r1633, %r1634, %r1635 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1636, %r1637, %r1638, %r1639 }, { %r599, %r600, %r601, %r602 }, { %r533, %r534 }, { %r1636, %r1637, %r1638, %r1639 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1640, %r1641, %r1642, %r1643 }, { %r655, %r656, %r657, %r658 }, { %r491, %r492 }, { %r1640, %r1641, %r1642, %r1643 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1644, %r1645, %r1646, %r1647 }, { %r655, %r656, %r657, %r658 }, { %r505, %r506 }, { %r1644, %r1645, %r1646, %r1647 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1648, %r1649, %r1650, %r1651 }, { %r655, %r656, %r657, %r658 }, { %r519, %r520 }, { %r1648, %r1649, %r1650, %r1651 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1652, %r1653, %r1654, %r1655 }, { %r655, %r656, %r657, %r658 }, { %r533, %r534 }, { %r1652, %r1653, %r1654, %r1655 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1592, %r1593, %r1594, %r1595 }, { %r711, %r712, %r713, %r714 }, { %r715, %r716 }, { %r1592, %r1593, %r1594, %r1595 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1596, %r1597, %r1598, %r1599 }, { %r711, %r712, %r713, %r714 }, { %r729, %r730 }, { %r1596, %r1597, %r1598, %r1599 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1600, %r1601, %r1602, %r1603 }, { %r711, %r712, %r713, %r714 }, { %r743, %r744 }, { %r1600, %r1601, %r1602, %r1603 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1604, %r1605, %r1606, %r1607 }, { %r711, %r712, %r713, %r714 }, { %r757, %r758 }, { %r1604, %r1605, %r1606, %r1607 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1608, %r1609, %r1610, %r1611 }, { %r767, %r768, %r769, %r770 }, { %r715, %r716 }, { %r1608, %r1609, %r1610, %r1611 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1612, %r1613, %r1614, %r1615 }, { %r767, %r768, %r769, %r770 }, { %r729, %r730 }, { %r1612, %r1613, %r1614, %r1615 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1616, %r1617, %r1618, %r1619 }, { %r767, %r768, %r769, %r770 }, { %r743, %r744 }, { %r1616, %r1617, %r1618, %r1619 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1620, %r1621, %r1622, %r1623 }, { %r767, %r768, %r769, %r770 }, { %r757, %r758 }, { %r1620, %r1621, %r1622, %r1623 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1624, %r1625, %r1626, %r1627 }, { %r823, %r824, %r825, %r826 }, { %r715, %r716 }, { %r1624, %r1625, %r1626, %r1627 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1628, %r1629, %r1630, %r1631 }, { %r823, %r824, %r825, %r826 }, { %r729, %r730 }, { %r1628, %r1629, %r1630, %r1631 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1632, %r1633, %r1634, %r1635 }, { %r823, %r824, %r825, %r826 }, { %r743, %r744 }, { %r1632, %r1633, %r1634, %r1635 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1636, %r1637, %r1638, %r1639 }, { %r823, %r824, %r825, %r826 }, { %r757, %r758 }, { %r1636, %r1637, %r1638, %r1639 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1640, %r1641, %r1642, %r1643 }, { %r879, %r880, %r881, %r882 }, { %r715, %r716 }, { %r1640, %r1641, %r1642, %r1643 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1644, %r1645, %r1646, %r1647 }, { %r879, %r880, %r881, %r882 }, { %r729, %r730 }, { %r1644, %r1645, %r1646, %r1647 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1648, %r1649, %r1650, %r1651 }, { %r879, %r880, %r881, %r882 }, { %r743, %r744 }, { %r1648, %r1649, %r1650, %r1651 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1652, %r1653, %r1654, %r1655 }, { %r879, %r880, %r881, %r882 }, { %r757, %r758 }, { %r1652, %r1653, %r1654, %r1655 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1592, %r1593, %r1594, %r1595 }, { %r935, %r936, %r937, %r938 }, { %r939, %r940 }, { %r1592, %r1593, %r1594, %r1595 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1596, %r1597, %r1598, %r1599 }, { %r935, %r936, %r937, %r938 }, { %r953, %r954 }, { %r1596, %r1597, %r1598, %r1599 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1600, %r1601, %r1602, %r1603 }, { %r935, %r936, %r937, %r938 }, { %r967, %r968 }, { %r1600, %r1601, %r1602, %r1603 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1604, %r1605, %r1606, %r1607 }, { %r935, %r936, %r937, %r938 }, { %r981, %r982 }, { %r1604, %r1605, %r1606, %r1607 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1608, %r1609, %r1610, %r1611 }, { %r991, %r992, %r993, %r994 }, { %r939, %r940 }, { %r1608, %r1609, %r1610, %r1611 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1612, %r1613, %r1614, %r1615 }, { %r991, %r992, %r993, %r994 }, { %r953, %r954 }, { %r1612, %r1613, %r1614, %r1615 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1616, %r1617, %r1618, %r1619 }, { %r991, %r992, %r993, %r994 }, { %r967, %r968 }, { %r1616, %r1617, %r1618, %r1619 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1620, %r1621, %r1622, %r1623 }, { %r991, %r992, %r993, %r994 }, { %r981, %r982 }, { %r1620, %r1621, %r1622, %r1623 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1624, %r1625, %r1626, %r1627 }, { %r1047, %r1048, %r1049, %r1050 }, { %r939, %r940 }, { %r1624, %r1625, %r1626, %r1627 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1628, %r1629, %r1630, %r1631 }, { %r1047, %r1048, %r1049, %r1050 }, { %r953, %r954 }, { %r1628, %r1629, %r1630, %r1631 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1632, %r1633, %r1634, %r1635 }, { %r1047, %r1048, %r1049, %r1050 }, { %r967, %r968 }, { %r1632, %r1633, %r1634, %r1635 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1636, %r1637, %r1638, %r1639 }, { %r1047, %r1048, %r1049, %r1050 }, { %r981, %r982 }, { %r1636, %r1637, %r1638, %r1639 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1640, %r1641, %r1642, %r1643 }, { %r1103, %r1104, %r1105, %r1106 }, { %r939, %r940 }, { %r1640, %r1641, %r1642, %r1643 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1644, %r1645, %r1646, %r1647 }, { %r1103, %r1104, %r1105, %r1106 }, { %r953, %r954 }, { %r1644, %r1645, %r1646, %r1647 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1648, %r1649, %r1650, %r1651 }, { %r1103, %r1104, %r1105, %r1106 }, { %r967, %r968 }, { %r1648, %r1649, %r1650, %r1651 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1652, %r1653, %r1654, %r1655 }, { %r1103, %r1104, %r1105, %r1106 }, { %r981, %r982 }, { %r1652, %r1653, %r1654, %r1655 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1592, %r1593, %r1594, %r1595 }, { %r1159, %r1160, %r1161, %r1162 }, { %r1163, %r1164 }, { %r1592, %r1593, %r1594, %r1595 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1596, %r1597, %r1598, %r1599 }, { %r1159, %r1160, %r1161, %r1162 }, { %r1177, %r1178 }, { %r1596, %r1597, %r1598, %r1599 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1600, %r1601, %r1602, %r1603 }, { %r1159, %r1160, %r1161, %r1162 }, { %r1191, %r1192 }, { %r1600, %r1601, %r1602, %r1603 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1604, %r1605, %r1606, %r1607 }, { %r1159, %r1160, %r1161, %r1162 }, { %r1205, %r1206 }, { %r1604, %r1605, %r1606, %r1607 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1608, %r1609, %r1610, %r1611 }, { %r1215, %r1216, %r1217, %r1218 }, { %r1163, %r1164 }, { %r1608, %r1609, %r1610, %r1611 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1612, %r1613, %r1614, %r1615 }, { %r1215, %r1216, %r1217, %r1218 }, { %r1177, %r1178 }, { %r1612, %r1613, %r1614, %r1615 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1616, %r1617, %r1618, %r1619 }, { %r1215, %r1216, %r1217, %r1218 }, { %r1191, %r1192 }, { %r1616, %r1617, %r1618, %r1619 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1620, %r1621, %r1622, %r1623 }, { %r1215, %r1216, %r1217, %r1218 }, { %r1205, %r1206 }, { %r1620, %r1621, %r1622, %r1623 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1624, %r1625, %r1626, %r1627 }, { %r1271, %r1272, %r1273, %r1274 }, { %r1163, %r1164 }, { %r1624, %r1625, %r1626, %r1627 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1628, %r1629, %r1630, %r1631 }, { %r1271, %r1272, %r1273, %r1274 }, { %r1177, %r1178 }, { %r1628, %r1629, %r1630, %r1631 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1632, %r1633, %r1634, %r1635 }, { %r1271, %r1272, %r1273, %r1274 }, { %r1191, %r1192 }, { %r1632, %r1633, %r1634, %r1635 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1636, %r1637, %r1638, %r1639 }, { %r1271, %r1272, %r1273, %r1274 }, { %r1205, %r1206 }, { %r1636, %r1637, %r1638, %r1639 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1640, %r1641, %r1642, %r1643 }, { %r1327, %r1328, %r1329, %r1330 }, { %r1163, %r1164 }, { %r1640, %r1641, %r1642, %r1643 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1644, %r1645, %r1646, %r1647 }, { %r1327, %r1328, %r1329, %r1330 }, { %r1177, %r1178 }, { %r1644, %r1645, %r1646, %r1647 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1648, %r1649, %r1650, %r1651 }, { %r1327, %r1328, %r1329, %r1330 }, { %r1191, %r1192 }, { %r1648, %r1649, %r1650, %r1651 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1652, %r1653, %r1654, %r1655 }, { %r1327, %r1328, %r1329, %r1330 }, { %r1205, %r1206 }, { %r1652, %r1653, %r1654, %r1655 };
	// end inline asm
	.loc	1 28 22                         // matmul-with-dot-v2.py:28:22
	add.s32 	%r1429, %r1591, 1;
	setp.gt.s32 	%p15, %r1429, 1;
	selp.b32 	%r1591, 0, %r1429, %p15;
	.loc	1 30 82                         // matmul-with-dot-v2.py:30:82
	setp.lt.s32 	%p16, %r11, %r1587;
	.loc	1 30 29                         // matmul-with-dot-v2.py:30:29
	mul.wide.s32 	%rd84, %r1588, 2;
	add.s64 	%rd72, %rd18, %rd84;
	add.s64 	%rd73, %rd19, %rd84;
	add.s64 	%rd74, %rd20, %rd84;
	add.s64 	%rd75, %rd21, %rd84;
	add.s64 	%rd76, %rd22, %rd84;
	add.s64 	%rd77, %rd23, %rd84;
	add.s64 	%rd78, %rd24, %rd84;
	add.s64 	%rd79, %rd25, %rd84;
	.loc	1 30 20                         // matmul-with-dot-v2.py:30:20
	shl.b32 	%r1430, %r1591, 14;
	add.s32 	%r1431, %r332, %r1430;
	bar.sync 	0;
	add.s32 	%r1375, %r1431, %r331;
	add.s32 	%r1377, %r1375, 2048;
	add.s32 	%r1379, %r1375, 4096;
	add.s32 	%r1381, %r1375, 6144;
	add.s32 	%r1383, %r1375, 8192;
	add.s32 	%r1385, %r1375, 10240;
	add.s32 	%r1387, %r1375, 12288;
	add.s32 	%r1389, %r1375, 14336;
	selp.b32 	%r1433, 16, 0, %p16;
	selp.b32 	%r1378, %r1433, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r1375 + 0 ], [ %rd72 + 0 ], 0x10, %r1378;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1377 + 0 ], [ %rd73 + 0 ], 0x10, %r1378;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1379 + 0 ], [ %rd74 + 0 ], 0x10, %r1378;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1381 + 0 ], [ %rd75 + 0 ], 0x10, %r1378;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1383 + 0 ], [ %rd76 + 0 ], 0x10, %r1378;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1385 + 0 ], [ %rd77 + 0 ], 0x10, %r1378;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1387 + 0 ], [ %rd78 + 0 ], 0x10, %r1378;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1389 + 0 ], [ %rd79 + 0 ], 0x10, %r1378;
	// end inline asm
	cp.async.commit_group;
	.loc	1 31 82                         // matmul-with-dot-v2.py:31:82
	setp.lt.s32 	%p17, %r6, %r1587;
	setp.lt.s32 	%p18, %r7, %r1587;
	setp.lt.s32 	%p19, %r8, %r1587;
	setp.lt.s32 	%p20, %r9, %r1587;
	.loc	1 31 29                         // matmul-with-dot-v2.py:31:29
	mul.wide.s32 	%rd85, %r1589, 2;
	add.s64 	%rd80, %rd26, %rd85;
	add.s64 	%rd81, %rd27, %rd85;
	add.s64 	%rd82, %rd28, %rd85;
	add.s64 	%rd83, %rd29, %rd85;
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	shl.b32 	%r1434, %r1591, 13;
	add.s32 	%r1435, %r1420, %r1434;
	add.s32 	%r1391, %r1435, %r331;
	add.s32 	%r1393, %r1391, 2048;
	add.s32 	%r1395, %r1391, 4096;
	add.s32 	%r1397, %r1391, 6144;
	selp.b32 	%r1436, 16, 0, %p17;
	selp.b32 	%r1392, %r1436, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r1391 + 0 ], [ %rd80 + 0 ], 0x10, %r1392;
	// end inline asm
	selp.b32 	%r1437, 16, 0, %p18;
	selp.b32 	%r1394, %r1437, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r1393 + 0 ], [ %rd81 + 0 ], 0x10, %r1394;
	// end inline asm
	selp.b32 	%r1438, 16, 0, %p19;
	selp.b32 	%r1396, %r1438, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r1395 + 0 ], [ %rd82 + 0 ], 0x10, %r1396;
	// end inline asm
	selp.b32 	%r1439, 16, 0, %p20;
	selp.b32 	%r1398, %r1439, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r1397 + 0 ], [ %rd83 + 0 ], 0x10, %r1398;
	// end inline asm
	cp.async.commit_group;
	.loc	1 28 22                         // matmul-with-dot-v2.py:28:22
	add.s64 	%rd135, %rd135, 1;
	add.s32 	%r1589, %r1589, %r14;
	add.s32 	%r1588, %r1588, 64;
	add.s32 	%r1587, %r1587, -64;
	setp.ne.s64 	%p21, %rd14, %rd135;
	@%p21 bra 	$L__BB0_3;
	bra.uni 	$L__BB0_4;
$L__BB0_1:                              // %.._crit_edge_crit_edge
	.loc	1 38 21                         // matmul-with-dot-v2.py:38:21
	shr.u32 	%r1657, %r4, 2;
	shl.b32 	%r1656, %r5, 4;
	mov.b32 	%r1592, 0f00000000;
	mov.b32 	%r1593, %r1592;
	mov.b32 	%r1594, %r1592;
	mov.b32 	%r1595, %r1592;
	mov.b32 	%r1596, %r1592;
	mov.b32 	%r1597, %r1592;
	mov.b32 	%r1598, %r1592;
	mov.b32 	%r1599, %r1592;
	mov.b32 	%r1600, %r1592;
	mov.b32 	%r1601, %r1592;
	mov.b32 	%r1602, %r1592;
	mov.b32 	%r1603, %r1592;
	mov.b32 	%r1604, %r1592;
	mov.b32 	%r1605, %r1592;
	mov.b32 	%r1606, %r1592;
	mov.b32 	%r1607, %r1592;
	mov.b32 	%r1608, %r1592;
	mov.b32 	%r1609, %r1592;
	mov.b32 	%r1610, %r1592;
	mov.b32 	%r1611, %r1592;
	mov.b32 	%r1612, %r1592;
	mov.b32 	%r1613, %r1592;
	mov.b32 	%r1614, %r1592;
	mov.b32 	%r1615, %r1592;
	mov.b32 	%r1616, %r1592;
	mov.b32 	%r1617, %r1592;
	mov.b32 	%r1618, %r1592;
	mov.b32 	%r1619, %r1592;
	mov.b32 	%r1620, %r1592;
	mov.b32 	%r1621, %r1592;
	mov.b32 	%r1622, %r1592;
	mov.b32 	%r1623, %r1592;
	mov.b32 	%r1624, %r1592;
	mov.b32 	%r1625, %r1592;
	mov.b32 	%r1626, %r1592;
	mov.b32 	%r1627, %r1592;
	mov.b32 	%r1628, %r1592;
	mov.b32 	%r1629, %r1592;
	mov.b32 	%r1630, %r1592;
	mov.b32 	%r1631, %r1592;
	mov.b32 	%r1632, %r1592;
	mov.b32 	%r1633, %r1592;
	mov.b32 	%r1634, %r1592;
	mov.b32 	%r1635, %r1592;
	mov.b32 	%r1636, %r1592;
	mov.b32 	%r1637, %r1592;
	mov.b32 	%r1638, %r1592;
	mov.b32 	%r1639, %r1592;
	mov.b32 	%r1640, %r1592;
	mov.b32 	%r1641, %r1592;
	mov.b32 	%r1642, %r1592;
	mov.b32 	%r1643, %r1592;
	mov.b32 	%r1644, %r1592;
	mov.b32 	%r1645, %r1592;
	mov.b32 	%r1646, %r1592;
	mov.b32 	%r1647, %r1592;
	mov.b32 	%r1648, %r1592;
	mov.b32 	%r1649, %r1592;
	mov.b32 	%r1650, %r1592;
	mov.b32 	%r1651, %r1592;
	mov.b32 	%r1652, %r1592;
	mov.b32 	%r1653, %r1592;
	mov.b32 	%r1654, %r1592;
	mov.b32 	%r1655, %r1592;
$L__BB0_4:                              // %._crit_edge
	.loc	1 20 49                         // matmul-with-dot-v2.py:20:49
	shl.b32 	%r1504, %r2, 2;
	and.b32 	%r1505, %r1504, 60;
	.loc	1 20 36                         // matmul-with-dot-v2.py:20:36
	or.b32 	%r1506, %r1505, %r10;
	.loc	1 19 49                         // matmul-with-dot-v2.py:19:49
	shr.u32 	%r1507, %r2, 4;
	.loc	1 19 36                         // matmul-with-dot-v2.py:19:36
	or.b32 	%r1508, %r1507, %r1;
	or.b32 	%r1509, %r1508, 120;
	.loc	1 19 49                         // matmul-with-dot-v2.py:19:49
	bfe.u32 	%r1510, %r2, 4, 3;
	.loc	1 19 36                         // matmul-with-dot-v2.py:19:36
	or.b32 	%r1511, %r1, %r1510;
	or.b32 	%r1512, %r1511, 112;
	or.b32 	%r1513, %r1511, 104;
	or.b32 	%r1514, %r1511, 96;
	or.b32 	%r1515, %r1511, 88;
	or.b32 	%r1516, %r1511, 80;
	or.b32 	%r1517, %r1511, 72;
	or.b32 	%r1518, %r1511, 64;
	or.b32 	%r1519, %r1508, 56;
	or.b32 	%r1520, %r1511, 48;
	or.b32 	%r1521, %r1511, 40;
	or.b32 	%r1522, %r1511, 32;
	or.b32 	%r1523, %r1511, 24;
	or.b32 	%r1524, %r1511, 16;
	or.b32 	%r1525, %r1511, 8;
	.loc	1 28 22                         // matmul-with-dot-v2.py:28:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 34 39                         // matmul-with-dot-v2.py:34:39
	mul.lo.s32 	%r1526, %r252, %r1511;
	shl.b32 	%r1527, %r252, 3;
	add.s32 	%r1528, %r1526, %r1527;
	add.s32 	%r1529, %r1528, %r1527;
	add.s32 	%r1530, %r1529, %r1527;
	add.s32 	%r1531, %r1530, %r1527;
	add.s32 	%r1532, %r1531, %r1527;
	add.s32 	%r1533, %r1532, %r1527;
	mul.lo.s32 	%r1534, %r252, %r1519;
	shl.b32 	%r1535, %r252, 4;
	add.s32 	%r1536, %r1533, %r1535;
	add.s32 	%r1537, %r1536, %r1527;
	add.s32 	%r1538, %r1537, %r1527;
	add.s32 	%r1539, %r1538, %r1527;
	add.s32 	%r1540, %r1539, %r1527;
	add.s32 	%r1541, %r1540, %r1527;
	add.s32 	%r1542, %r1541, %r1527;
	mul.lo.s32 	%r1543, %r252, %r1509;
	.loc	1 34 21                         // matmul-with-dot-v2.py:34:21
	mul.wide.s32 	%rd102, %r1526, 4;
	add.s64 	%rd103, %rd17, %rd102;
	mul.wide.s32 	%rd104, %r1528, 4;
	add.s64 	%rd105, %rd17, %rd104;
	mul.wide.s32 	%rd106, %r1529, 4;
	add.s64 	%rd107, %rd17, %rd106;
	mul.wide.s32 	%rd108, %r1530, 4;
	add.s64 	%rd109, %rd17, %rd108;
	mul.wide.s32 	%rd110, %r1531, 4;
	add.s64 	%rd111, %rd17, %rd110;
	mul.wide.s32 	%rd112, %r1532, 4;
	add.s64 	%rd113, %rd17, %rd112;
	mul.wide.s32 	%rd114, %r1533, 4;
	add.s64 	%rd115, %rd17, %rd114;
	mul.wide.s32 	%rd116, %r1534, 4;
	add.s64 	%rd117, %rd17, %rd116;
	mul.wide.s32 	%rd118, %r1536, 4;
	add.s64 	%rd119, %rd17, %rd118;
	mul.wide.s32 	%rd120, %r1537, 4;
	add.s64 	%rd121, %rd17, %rd120;
	mul.wide.s32 	%rd122, %r1538, 4;
	add.s64 	%rd123, %rd17, %rd122;
	mul.wide.s32 	%rd124, %r1539, 4;
	add.s64 	%rd125, %rd17, %rd124;
	mul.wide.s32 	%rd126, %r1540, 4;
	add.s64 	%rd127, %rd17, %rd126;
	mul.wide.s32 	%rd128, %r1541, 4;
	add.s64 	%rd129, %rd17, %rd128;
	mul.wide.s32 	%rd130, %r1542, 4;
	add.s64 	%rd131, %rd17, %rd130;
	mul.wide.s32 	%rd132, %r1543, 4;
	add.s64 	%rd133, %rd17, %rd132;
	.loc	1 34 51                         // matmul-with-dot-v2.py:34:51
	mul.wide.s32 	%rd134, %r1506, 4;
	add.s64 	%rd86, %rd103, %rd134;
	add.s64 	%rd87, %rd105, %rd134;
	add.s64 	%rd88, %rd107, %rd134;
	add.s64 	%rd89, %rd109, %rd134;
	add.s64 	%rd90, %rd111, %rd134;
	add.s64 	%rd91, %rd113, %rd134;
	add.s64 	%rd92, %rd115, %rd134;
	add.s64 	%rd93, %rd117, %rd134;
	add.s64 	%rd94, %rd119, %rd134;
	add.s64 	%rd95, %rd121, %rd134;
	add.s64 	%rd96, %rd123, %rd134;
	add.s64 	%rd97, %rd125, %rd134;
	add.s64 	%rd98, %rd127, %rd134;
	add.s64 	%rd99, %rd129, %rd134;
	add.s64 	%rd100, %rd131, %rd134;
	add.s64 	%rd101, %rd133, %rd134;
	.loc	1 37 33                         // matmul-with-dot-v2.py:37:33
	setp.lt.s32 	%p38, %r1511, %r248;
	setp.lt.s32 	%p39, %r1525, %r248;
	setp.lt.s32 	%p40, %r1524, %r248;
	setp.lt.s32 	%p41, %r1523, %r248;
	setp.lt.s32 	%p42, %r1522, %r248;
	setp.lt.s32 	%p43, %r1521, %r248;
	setp.lt.s32 	%p44, %r1520, %r248;
	setp.lt.s32 	%p45, %r1519, %r248;
	setp.lt.s32 	%p46, %r1518, %r248;
	setp.lt.s32 	%p47, %r1517, %r248;
	setp.lt.s32 	%p48, %r1516, %r248;
	setp.lt.s32 	%p49, %r1515, %r248;
	setp.lt.s32 	%p50, %r1514, %r248;
	setp.lt.s32 	%p51, %r1513, %r248;
	setp.lt.s32 	%p52, %r1512, %r248;
	setp.lt.s32 	%p53, %r1509, %r248;
	.loc	1 37 58                         // matmul-with-dot-v2.py:37:58
	setp.lt.s32 	%p54, %r1506, %r250;
	.loc	1 37 39                         // matmul-with-dot-v2.py:37:39
	and.pred 	%p22, %p38, %p54;
	and.pred 	%p23, %p39, %p54;
	and.pred 	%p24, %p40, %p54;
	and.pred 	%p25, %p41, %p54;
	and.pred 	%p26, %p42, %p54;
	and.pred 	%p27, %p43, %p54;
	and.pred 	%p28, %p44, %p54;
	and.pred 	%p29, %p45, %p54;
	and.pred 	%p30, %p46, %p54;
	and.pred 	%p31, %p47, %p54;
	and.pred 	%p32, %p48, %p54;
	and.pred 	%p33, %p49, %p54;
	and.pred 	%p34, %p50, %p54;
	and.pred 	%p35, %p51, %p54;
	and.pred 	%p36, %p52, %p54;
	and.pred 	%p37, %p53, %p54;
	.loc	1 38 21                         // matmul-with-dot-v2.py:38:21
	shl.b32 	%r1544, %r2, 1;
	and.b32 	%r1545, %r1544, 6;
	shl.b32 	%r1546, %r2, 4;
	and.b32 	%r1547, %r1546, 192;
	or.b32 	%r1548, %r1547, %r1545;
	shl.b32 	%r1549, %r3, 4;
	or.b32 	%r1550, %r1548, %r1549;
	or.b32 	%r1551, %r1550, %r1657;
	or.b32 	%r1552, %r1551, %r1656;
	and.b32 	%r1553, %r1504, 508;
	shr.u32 	%r1554, %r1552, 2;
	and.b32 	%r1555, %r1554, 508;
	add.s32 	%r1557, %r332, %r1555;
	shl.b32 	%r1558, %r1552, 2;
	add.s32 	%r1559, %r1557, %r1558;
	st.shared.v2.b32 	[%r1559], {%r1592, %r1593};
	or.b32 	%r1560, %r1552, 512;
	shr.u32 	%r1561, %r1560, 2;
	and.b32 	%r1562, %r1561, 1073741820;
	add.s32 	%r1563, %r332, %r1562;
	add.s32 	%r1564, %r1563, %r1558;
	st.shared.v2.b32 	[%r1564+2048], {%r1594, %r1595};
	st.shared.v2.b32 	[%r1559+64], {%r1596, %r1597};
	and.b32 	%r1565, %r1561, 1073741808;
	add.s32 	%r1566, %r332, %r1565;
	add.s32 	%r1567, %r1566, %r1558;
	st.shared.v2.b32 	[%r1567+2112], {%r1598, %r1599};
	st.shared.v2.b32 	[%r1559+128], {%r1600, %r1601};
	st.shared.v2.b32 	[%r1567+2176], {%r1602, %r1603};
	st.shared.v2.b32 	[%r1559+192], {%r1604, %r1605};
	st.shared.v2.b32 	[%r1567+2240], {%r1606, %r1607};
	bar.sync 	0;
	and.b32 	%r1568, %r2, 112;
	add.s32 	%r1569, %r332, %r1568;
	shl.b32 	%r1570, %r1553, 2;
	add.s32 	%r1571, %r1569, %r1570;
	ld.shared.v4.b32 	{%r1440, %r1441, %r1442, %r1443}, [%r1571];
	or.b32 	%r1572, %r1553, 512;
	shr.u32 	%r1573, %r1572, 2;
	and.b32 	%r1574, %r1573, 240;
	add.s32 	%r1575, %r332, %r1574;
	add.s32 	%r1576, %r1575, %r1570;
	ld.shared.v4.b32 	{%r1444, %r1445, %r1446, %r1447}, [%r1576+2048];
	or.b32 	%r1577, %r1553, 1024;
	shr.u32 	%r1578, %r1577, 2;
	and.b32 	%r1579, %r1578, 368;
	add.s32 	%r1580, %r332, %r1579;
	add.s32 	%r1581, %r1580, %r1570;
	ld.shared.v4.b32 	{%r1448, %r1449, %r1450, %r1451}, [%r1581+4096];
	or.b32 	%r1582, %r1553, 1536;
	shr.u32 	%r1583, %r1582, 2;
	and.b32 	%r1584, %r1583, 496;
	add.s32 	%r1585, %r332, %r1584;
	add.s32 	%r1586, %r1585, %r1570;
	ld.shared.v4.b32 	{%r1452, %r1453, %r1454, %r1455}, [%r1586+6144];
	bar.sync 	0;
	st.shared.v2.b32 	[%r1559], {%r1608, %r1609};
	st.shared.v2.b32 	[%r1564+2048], {%r1610, %r1611};
	st.shared.v2.b32 	[%r1559+64], {%r1612, %r1613};
	st.shared.v2.b32 	[%r1567+2112], {%r1614, %r1615};
	st.shared.v2.b32 	[%r1559+128], {%r1616, %r1617};
	st.shared.v2.b32 	[%r1567+2176], {%r1618, %r1619};
	st.shared.v2.b32 	[%r1559+192], {%r1620, %r1621};
	st.shared.v2.b32 	[%r1567+2240], {%r1622, %r1623};
	bar.sync 	0;
	ld.shared.v4.b32 	{%r1456, %r1457, %r1458, %r1459}, [%r1571];
	ld.shared.v4.b32 	{%r1460, %r1461, %r1462, %r1463}, [%r1576+2048];
	ld.shared.v4.b32 	{%r1464, %r1465, %r1466, %r1467}, [%r1581+4096];
	ld.shared.v4.b32 	{%r1468, %r1469, %r1470, %r1471}, [%r1586+6144];
	bar.sync 	0;
	st.shared.v2.b32 	[%r1559], {%r1624, %r1625};
	st.shared.v2.b32 	[%r1564+2048], {%r1626, %r1627};
	st.shared.v2.b32 	[%r1559+64], {%r1628, %r1629};
	st.shared.v2.b32 	[%r1567+2112], {%r1630, %r1631};
	st.shared.v2.b32 	[%r1559+128], {%r1632, %r1633};
	st.shared.v2.b32 	[%r1567+2176], {%r1634, %r1635};
	st.shared.v2.b32 	[%r1559+192], {%r1636, %r1637};
	st.shared.v2.b32 	[%r1567+2240], {%r1638, %r1639};
	bar.sync 	0;
	ld.shared.v4.b32 	{%r1472, %r1473, %r1474, %r1475}, [%r1571];
	ld.shared.v4.b32 	{%r1476, %r1477, %r1478, %r1479}, [%r1576+2048];
	ld.shared.v4.b32 	{%r1480, %r1481, %r1482, %r1483}, [%r1581+4096];
	ld.shared.v4.b32 	{%r1484, %r1485, %r1486, %r1487}, [%r1586+6144];
	bar.sync 	0;
	st.shared.v2.b32 	[%r1559], {%r1640, %r1641};
	st.shared.v2.b32 	[%r1564+2048], {%r1642, %r1643};
	st.shared.v2.b32 	[%r1559+64], {%r1644, %r1645};
	st.shared.v2.b32 	[%r1567+2112], {%r1646, %r1647};
	st.shared.v2.b32 	[%r1559+128], {%r1648, %r1649};
	st.shared.v2.b32 	[%r1567+2176], {%r1650, %r1651};
	st.shared.v2.b32 	[%r1559+192], {%r1652, %r1653};
	st.shared.v2.b32 	[%r1567+2240], {%r1654, %r1655};
	bar.sync 	0;
	ld.shared.v4.b32 	{%r1488, %r1489, %r1490, %r1491}, [%r1571];
	ld.shared.v4.b32 	{%r1492, %r1493, %r1494, %r1495}, [%r1576+2048];
	ld.shared.v4.b32 	{%r1496, %r1497, %r1498, %r1499}, [%r1581+4096];
	ld.shared.v4.b32 	{%r1500, %r1501, %r1502, %r1503}, [%r1586+6144];
	// begin inline asm
	@%p22 st.global.v4.b32 [ %rd86 + 0 ], { %r1440, %r1441, %r1442, %r1443 };
	// end inline asm
	// begin inline asm
	@%p23 st.global.v4.b32 [ %rd87 + 0 ], { %r1444, %r1445, %r1446, %r1447 };
	// end inline asm
	// begin inline asm
	@%p24 st.global.v4.b32 [ %rd88 + 0 ], { %r1448, %r1449, %r1450, %r1451 };
	// end inline asm
	// begin inline asm
	@%p25 st.global.v4.b32 [ %rd89 + 0 ], { %r1452, %r1453, %r1454, %r1455 };
	// end inline asm
	// begin inline asm
	@%p26 st.global.v4.b32 [ %rd90 + 0 ], { %r1456, %r1457, %r1458, %r1459 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd91 + 0 ], { %r1460, %r1461, %r1462, %r1463 };
	// end inline asm
	// begin inline asm
	@%p28 st.global.v4.b32 [ %rd92 + 0 ], { %r1464, %r1465, %r1466, %r1467 };
	// end inline asm
	// begin inline asm
	@%p29 st.global.v4.b32 [ %rd93 + 0 ], { %r1468, %r1469, %r1470, %r1471 };
	// end inline asm
	// begin inline asm
	@%p30 st.global.v4.b32 [ %rd94 + 0 ], { %r1472, %r1473, %r1474, %r1475 };
	// end inline asm
	// begin inline asm
	@%p31 st.global.v4.b32 [ %rd95 + 0 ], { %r1476, %r1477, %r1478, %r1479 };
	// end inline asm
	// begin inline asm
	@%p32 st.global.v4.b32 [ %rd96 + 0 ], { %r1480, %r1481, %r1482, %r1483 };
	// end inline asm
	// begin inline asm
	@%p33 st.global.v4.b32 [ %rd97 + 0 ], { %r1484, %r1485, %r1486, %r1487 };
	// end inline asm
	// begin inline asm
	@%p34 st.global.v4.b32 [ %rd98 + 0 ], { %r1488, %r1489, %r1490, %r1491 };
	// end inline asm
	// begin inline asm
	@%p35 st.global.v4.b32 [ %rd99 + 0 ], { %r1492, %r1493, %r1494, %r1495 };
	// end inline asm
	// begin inline asm
	@%p36 st.global.v4.b32 [ %rd100 + 0 ], { %r1496, %r1497, %r1498, %r1499 };
	// end inline asm
	// begin inline asm
	@%p37 st.global.v4.b32 [ %rd101 + 0 ], { %r1500, %r1501, %r1502, %r1503 };
	// end inline asm
	.loc	1 38 4                          // matmul-with-dot-v2.py:38:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-dot-v2.py"
	.file	2 "/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 156                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x95 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 45
.b8 119
.b8 105
.b8 116
.b8 104
.b8 45
.b8 100
.b8 111
.b8 116
.b8 45
.b8 118
.b8 50
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 114
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 47
.b8 101
.b8 120
.b8 97
.b8 109
.b8 112
.b8 108
.b8 101
.b8 115
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 2                                   // Abbrev [2] 0x61:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x71:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 97                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x86:0x18 DW_TAG_inlined_subroutine
.b32 97                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 28                                  // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
