//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_86
.address_size 64

	// .globl	matmul_kernel
.extern .shared .align 16 .b8 global_smem[];

.visible .entry matmul_kernel(
	.param .u64 matmul_kernel_param_0,
	.param .u64 matmul_kernel_param_1,
	.param .u64 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u32 matmul_kernel_param_8
)
.maxntid 128, 1, 1
{
	.reg .pred 	%p<92>;
	.reg .b32 	%r<1005>;
	.reg .f32 	%f<835>;
	.reg .b64 	%rd<130>;
	.loc	1 7 0
$L__func_begin0:
	.loc	1 7 0

	ld.param.u32 	%r130, [matmul_kernel_param_8];
	ld.param.u32 	%r129, [matmul_kernel_param_7];
	ld.param.u32 	%r128, [matmul_kernel_param_5];
	ld.param.u32 	%r127, [matmul_kernel_param_4];
	ld.param.u32 	%r126, [matmul_kernel_param_3];
	ld.param.u64 	%rd13, [matmul_kernel_param_2];
	ld.param.u64 	%rd38, [matmul_kernel_param_0];
	ld.param.u64 	%rd39, [matmul_kernel_param_1];
$L__tmp0:
	.loc	1 16 26
	// begin inline asm
	mov.u32 %r131, %ctaid.x;
	// end inline asm
	.loc	1 17 26
	// begin inline asm
	mov.u32 %r132, %ctaid.y;
	// end inline asm
	.loc	1 19 21
	shl.b32 	%r1, %r132, 7;
	.loc	1 19 49
	mov.u32 	%r2, %tid.x;
	and.b32  	%r3, %r2, 31;
	ld.param.u32 	%r211, [matmul_kernel_param_6];
	bfe.u32 	%r4, %r2, 3, 4;
	or.b32  	%r5, %r4, 16;
	or.b32  	%r6, %r4, 32;
	or.b32  	%r7, %r4, 48;
	or.b32  	%r212, %r4, 64;
	or.b32  	%r213, %r4, 80;
	or.b32  	%r214, %r4, 96;
	or.b32  	%r215, %r4, 112;
	.loc	1 19 36
	or.b32  	%r216, %r1, %r4;
	or.b32  	%r217, %r1, %r5;
	or.b32  	%r218, %r1, %r6;
	or.b32  	%r219, %r1, %r7;
	or.b32  	%r220, %r1, %r212;
	or.b32  	%r221, %r1, %r213;
	or.b32  	%r222, %r1, %r214;
	or.b32  	%r223, %r1, %r215;
	.loc	1 20 21
	shl.b32 	%r8, %r131, 6;
	.loc	1 20 49
	shl.b32 	%r224, %r2, 3;
	and.b32  	%r9, %r224, 56;
	.loc	1 20 36
	or.b32  	%r225, %r8, %r9;
	.loc	1 23 39
	mul.lo.s32 	%r226, %r216, %r211;
	mul.lo.s32 	%r227, %r217, %r211;
	mul.lo.s32 	%r228, %r218, %r211;
	mul.lo.s32 	%r229, %r219, %r211;
	mul.lo.s32 	%r230, %r220, %r211;
	mul.lo.s32 	%r231, %r221, %r211;
	mul.lo.s32 	%r232, %r222, %r211;
	mul.lo.s32 	%r233, %r223, %r211;
	.loc	1 23 21
	mul.wide.s32 	%rd40, %r226, 2;
	add.s64 	%rd41, %rd38, %rd40;
	mul.wide.s32 	%rd42, %r227, 2;
	add.s64 	%rd43, %rd38, %rd42;
	mul.wide.s32 	%rd44, %r228, 2;
	add.s64 	%rd45, %rd38, %rd44;
	mul.wide.s32 	%rd46, %r229, 2;
	add.s64 	%rd47, %rd38, %rd46;
	mul.wide.s32 	%rd48, %r230, 2;
	add.s64 	%rd49, %rd38, %rd48;
	mul.wide.s32 	%rd50, %r231, 2;
	add.s64 	%rd51, %rd38, %rd50;
	mul.wide.s32 	%rd52, %r232, 2;
	add.s64 	%rd53, %rd38, %rd52;
	mul.wide.s32 	%rd54, %r233, 2;
	add.s64 	%rd55, %rd38, %rd54;
	.loc	1 23 51
	mul.wide.u32 	%rd56, %r9, 2;
	add.s64 	%rd14, %rd41, %rd56;
	add.s64 	%rd15, %rd43, %rd56;
	add.s64 	%rd16, %rd45, %rd56;
	add.s64 	%rd17, %rd47, %rd56;
	add.s64 	%rd18, %rd49, %rd56;
	add.s64 	%rd19, %rd51, %rd56;
	add.s64 	%rd20, %rd53, %rd56;
	add.s64 	%rd21, %rd55, %rd56;
	.loc	1 24 39
	mul.lo.s32 	%r234, %r4, %r129;
	shl.b32 	%r235, %r129, 4;
	add.s32 	%r236, %r234, %r235;
	add.s32 	%r237, %r236, %r235;
	add.s32 	%r238, %r237, %r235;
	.loc	1 24 21
	mul.wide.s32 	%rd57, %r234, 2;
	add.s64 	%rd58, %rd39, %rd57;
	mul.wide.s32 	%rd59, %r236, 2;
	add.s64 	%rd60, %rd39, %rd59;
	mul.wide.s32 	%rd61, %r237, 2;
	add.s64 	%rd62, %rd39, %rd61;
	mul.wide.s32 	%rd63, %r238, 2;
	add.s64 	%rd64, %rd39, %rd63;
	.loc	1 24 51
	mul.wide.s32 	%rd65, %r225, 2;
	add.s64 	%rd22, %rd58, %rd65;
	add.s64 	%rd23, %rd60, %rd65;
	add.s64 	%rd24, %rd62, %rd65;
	add.s64 	%rd25, %rd64, %rd65;
$L__tmp1:
	.loc	2 44 22
	add.s32 	%r239, %r127, 63;
$L__tmp2:
	.loc	1 28 22
	setp.lt.s32 	%p25, %r239, 64;
	setp.gt.s32 	%p26, %r239, 63;
	.loc	1 30 82
	setp.lt.s32 	%p27, %r9, %r127;
	.loc	1 30 20
	shl.b32 	%r243, %r4, 6;
	xor.b32  	%r244, %r224, %r2;
	and.b32  	%r245, %r244, 56;
	or.b32  	%r11, %r243, %r245;
	shl.b32 	%r246, %r11, 1;
	mov.u32 	%r247, global_smem;
	add.s32 	%r133, %r247, %r246;
	shl.b32 	%r248, %r5, 6;
	or.b32  	%r12, %r248, %r245;
	shl.b32 	%r249, %r12, 1;
	add.s32 	%r135, %r247, %r249;
	shl.b32 	%r250, %r6, 6;
	or.b32  	%r13, %r250, %r245;
	shl.b32 	%r251, %r13, 1;
	add.s32 	%r137, %r247, %r251;
	shl.b32 	%r252, %r7, 6;
	or.b32  	%r14, %r252, %r245;
	shl.b32 	%r253, %r14, 1;
	add.s32 	%r139, %r247, %r253;
	shl.b32 	%r254, %r212, 6;
	or.b32  	%r15, %r254, %r245;
	shl.b32 	%r255, %r15, 1;
	add.s32 	%r141, %r247, %r255;
	shl.b32 	%r256, %r213, 6;
	or.b32  	%r16, %r256, %r245;
	shl.b32 	%r257, %r16, 1;
	add.s32 	%r143, %r247, %r257;
	shl.b32 	%r258, %r214, 6;
	or.b32  	%r17, %r258, %r245;
	shl.b32 	%r259, %r17, 1;
	add.s32 	%r145, %r247, %r259;
	shl.b32 	%r260, %r215, 6;
	or.b32  	%r18, %r260, %r245;
	shl.b32 	%r261, %r18, 1;
	add.s32 	%r147, %r247, %r261;
	selp.b32 	%r262, 16, 0, %p26;
	selp.b32 	%r136, %r262, 0, %p27;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r133 + 0 ], [ %rd14 + 0 ], 0x10, %r136;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r135 + 0 ], [ %rd15 + 0 ], 0x10, %r136;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r137 + 0 ], [ %rd16 + 0 ], 0x10, %r136;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r139 + 0 ], [ %rd17 + 0 ], 0x10, %r136;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r141 + 0 ], [ %rd18 + 0 ], 0x10, %r136;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r143 + 0 ], [ %rd19 + 0 ], 0x10, %r136;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r145 + 0 ], [ %rd20 + 0 ], 0x10, %r136;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r147 + 0 ], [ %rd21 + 0 ], 0x10, %r136;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 31 82
	setp.lt.s32 	%p28, %r4, %r127;
	setp.lt.s32 	%p29, %r5, %r127;
	setp.lt.s32 	%p30, %r6, %r127;
	setp.lt.s32 	%p31, %r7, %r127;
	.loc	1 31 20
	add.s32 	%r263, %r247, 32768;
	add.s32 	%r149, %r263, %r246;
	add.s32 	%r151, %r263, %r249;
	add.s32 	%r153, %r263, %r251;
	add.s32 	%r155, %r263, %r253;
	selp.b32 	%r150, %r262, 0, %p28;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r149 + 0 ], [ %rd22 + 0 ], 0x10, %r150;
	// end inline asm
	selp.b32 	%r152, %r262, 0, %p29;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r151 + 0 ], [ %rd23 + 0 ], 0x10, %r152;
	// end inline asm
	selp.b32 	%r154, %r262, 0, %p30;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r153 + 0 ], [ %rd24 + 0 ], 0x10, %r154;
	// end inline asm
	selp.b32 	%r156, %r262, 0, %p31;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r155 + 0 ], [ %rd25 + 0 ], 0x10, %r156;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 28 22
	setp.gt.s32 	%p32, %r239, 127;
	.loc	1 29 22
	add.s32 	%r264, %r127, -64;
	.loc	1 30 82
	setp.lt.s32 	%p33, %r9, %r264;
	.loc	1 30 29
	add.s64 	%rd26, %rd14, 128;
	add.s64 	%rd27, %rd15, 128;
	add.s64 	%rd28, %rd16, 128;
	add.s64 	%rd29, %rd17, 128;
	add.s64 	%rd30, %rd18, 128;
	add.s64 	%rd31, %rd19, 128;
	add.s64 	%rd32, %rd20, 128;
	add.s64 	%rd33, %rd21, 128;
	.loc	1 30 20
	bar.sync 	0;
	add.s32 	%r265, %r247, 16384;
	add.s32 	%r157, %r265, %r246;
	add.s32 	%r159, %r265, %r249;
	add.s32 	%r161, %r265, %r251;
	add.s32 	%r163, %r265, %r253;
	add.s32 	%r165, %r265, %r255;
	add.s32 	%r167, %r265, %r257;
	add.s32 	%r169, %r265, %r259;
	add.s32 	%r171, %r265, %r261;
	selp.b32 	%r266, 16, 0, %p33;
	selp.b32 	%r160, %r266, 0, %p32;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r157 + 0 ], [ %rd26 + 0 ], 0x10, %r160;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r159 + 0 ], [ %rd27 + 0 ], 0x10, %r160;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r161 + 0 ], [ %rd28 + 0 ], 0x10, %r160;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r163 + 0 ], [ %rd29 + 0 ], 0x10, %r160;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r165 + 0 ], [ %rd30 + 0 ], 0x10, %r160;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r167 + 0 ], [ %rd31 + 0 ], 0x10, %r160;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r169 + 0 ], [ %rd32 + 0 ], 0x10, %r160;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r171 + 0 ], [ %rd33 + 0 ], 0x10, %r160;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 31 82
	setp.lt.s32 	%p34, %r4, %r264;
	setp.lt.s32 	%p35, %r5, %r264;
	setp.lt.s32 	%p36, %r6, %r264;
	setp.lt.s32 	%p37, %r7, %r264;
	.loc	1 31 48
	shl.b32 	%r19, %r129, 6;
	.loc	1 31 29
	mul.wide.s32 	%rd66, %r19, 2;
	add.s64 	%rd34, %rd22, %rd66;
	add.s64 	%rd35, %rd23, %rd66;
	add.s64 	%rd36, %rd24, %rd66;
	add.s64 	%rd37, %rd25, %rd66;
	.loc	1 31 20
	add.s32 	%r267, %r247, 40960;
	add.s32 	%r173, %r267, %r246;
	add.s32 	%r175, %r267, %r249;
	add.s32 	%r177, %r267, %r251;
	add.s32 	%r179, %r267, %r253;
	selp.b32 	%r268, 16, 0, %p34;
	selp.b32 	%r174, %r268, 0, %p32;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r173 + 0 ], [ %rd34 + 0 ], 0x10, %r174;
	// end inline asm
	selp.b32 	%r269, 16, 0, %p35;
	selp.b32 	%r176, %r269, 0, %p32;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r175 + 0 ], [ %rd35 + 0 ], 0x10, %r176;
	// end inline asm
	selp.b32 	%r270, 16, 0, %p36;
	selp.b32 	%r178, %r270, 0, %p32;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r177 + 0 ], [ %rd36 + 0 ], 0x10, %r178;
	// end inline asm
	selp.b32 	%r271, 16, 0, %p37;
	selp.b32 	%r180, %r271, 0, %p32;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r179 + 0 ], [ %rd37 + 0 ], 0x10, %r180;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 30 20
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	bfe.u32 	%r20, %r2, 5, 2;
	and.b32  	%r272, %r2, 7;
	bfe.u32 	%r21, %r2, 4, 1;
	shl.b32 	%r22, %r20, 4;
	and.b32  	%r273, %r2, 8;
	or.b32  	%r274, %r22, %r273;
	or.b32  	%r275, %r274, %r272;
	xor.b32  	%r276, %r21, %r272;
	shl.b32 	%r23, %r275, 6;
	shl.b32 	%r277, %r276, 3;
	or.b32  	%r24, %r23, %r277;
	shl.b32 	%r278, %r24, 1;
	add.s32 	%r185, %r247, %r278;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r996, %r997, %r998, %r999 }, [ %r185 + 0 ];
	// end inline asm
	add.s32 	%r190, %r185, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r992, %r993, %r994, %r995 }, [ %r190 + 0 ];
	// end inline asm
	.loc	1 31 20
	and.b32  	%r279, %r2, 15;
	shl.b32 	%r280, %r279, 6;
	or.b32  	%r33, %r277, %r280;
	shl.b32 	%r281, %r33, 1;
	add.s32 	%r195, %r263, %r281;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r988, %r989, %r990, %r991 }, [ %r195 + 0 ];
	// end inline asm
	or.b32  	%r282, %r21, 2;
	xor.b32  	%r283, %r282, %r272;
	shl.b32 	%r38, %r283, 3;
	or.b32  	%r39, %r38, %r280;
	shl.b32 	%r284, %r39, 1;
	add.s32 	%r200, %r263, %r284;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r984, %r985, %r986, %r987 }, [ %r200 + 0 ];
	// end inline asm
	or.b32  	%r285, %r21, 4;
	xor.b32  	%r286, %r285, %r272;
	shl.b32 	%r44, %r286, 3;
	or.b32  	%r45, %r44, %r280;
	shl.b32 	%r287, %r45, 1;
	add.s32 	%r205, %r263, %r287;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r980, %r981, %r982, %r983 }, [ %r205 + 0 ];
	// end inline asm
	or.b32  	%r288, %r21, 6;
	xor.b32  	%r289, %r288, %r272;
	shl.b32 	%r50, %r289, 3;
	or.b32  	%r51, %r50, %r280;
	shl.b32 	%r290, %r51, 1;
	add.s32 	%r210, %r263, %r290;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r976, %r977, %r978, %r979 }, [ %r210 + 0 ];
	// end inline asm
	mov.f32 	%f707, 0f00000000;
	mov.f32 	%f708, %f707;
	mov.f32 	%f709, %f707;
	mov.f32 	%f710, %f707;
	mov.f32 	%f711, %f707;
	mov.f32 	%f712, %f707;
	mov.f32 	%f713, %f707;
	mov.f32 	%f714, %f707;
	mov.f32 	%f715, %f707;
	mov.f32 	%f716, %f707;
	mov.f32 	%f717, %f707;
	mov.f32 	%f718, %f707;
	mov.f32 	%f719, %f707;
	mov.f32 	%f720, %f707;
	mov.f32 	%f721, %f707;
	mov.f32 	%f722, %f707;
	mov.f32 	%f723, %f707;
	mov.f32 	%f724, %f707;
	mov.f32 	%f725, %f707;
	mov.f32 	%f726, %f707;
	mov.f32 	%f727, %f707;
	mov.f32 	%f728, %f707;
	mov.f32 	%f729, %f707;
	mov.f32 	%f730, %f707;
	mov.f32 	%f731, %f707;
	mov.f32 	%f732, %f707;
	mov.f32 	%f733, %f707;
	mov.f32 	%f734, %f707;
	mov.f32 	%f735, %f707;
	mov.f32 	%f736, %f707;
	mov.f32 	%f737, %f707;
	mov.f32 	%f738, %f707;
	mov.f32 	%f739, %f707;
	mov.f32 	%f740, %f707;
	mov.f32 	%f741, %f707;
	mov.f32 	%f742, %f707;
	mov.f32 	%f743, %f707;
	mov.f32 	%f744, %f707;
	mov.f32 	%f745, %f707;
	mov.f32 	%f746, %f707;
	mov.f32 	%f747, %f707;
	mov.f32 	%f748, %f707;
	mov.f32 	%f749, %f707;
	mov.f32 	%f750, %f707;
	mov.f32 	%f751, %f707;
	mov.f32 	%f752, %f707;
	mov.f32 	%f753, %f707;
	mov.f32 	%f754, %f707;
	mov.f32 	%f755, %f707;
	mov.f32 	%f756, %f707;
	mov.f32 	%f757, %f707;
	mov.f32 	%f758, %f707;
	mov.f32 	%f759, %f707;
	mov.f32 	%f760, %f707;
	mov.f32 	%f761, %f707;
	mov.f32 	%f762, %f707;
	mov.f32 	%f763, %f707;
	mov.f32 	%f764, %f707;
	mov.f32 	%f765, %f707;
	mov.f32 	%f766, %f707;
	mov.f32 	%f767, %f707;
	mov.f32 	%f768, %f707;
	mov.f32 	%f769, %f707;
	mov.f32 	%f770, %f707;
	.loc	1 28 22
	@%p25 bra 	$L__BB0_3;
	.loc	1 0 22
	shr.s32 	%r240, %r239, 31;
	shr.u32 	%r241, %r240, 26;
	add.s32 	%r242, %r239, %r241;
	shr.s32 	%r10, %r242, 6;
	add.s32 	%r56, %r10, -2;
	or.b32  	%r57, %r23, %r38;
	or.b32  	%r58, %r23, %r44;
	or.b32  	%r59, %r23, %r50;
	.loc	1 28 22
	shl.b32 	%r975, %r129, 7;
	add.s32 	%r973, %r127, -128;
	mov.f32 	%f707, 0f00000000;
	mov.b32 	%r1003, 1;
	mov.b32 	%r1002, 0;
	mov.b32 	%r974, 128;
	shl.b32 	%r824, %r57, 1;
	shl.b32 	%r833, %r58, 1;
	shl.b32 	%r834, %r59, 1;
	mov.u32 	%r1000, %r263;
	mov.u32 	%r1001, %r247;
	mov.f32 	%f708, %f707;
	mov.f32 	%f709, %f707;
	mov.f32 	%f710, %f707;
	mov.f32 	%f711, %f707;
	mov.f32 	%f712, %f707;
	mov.f32 	%f713, %f707;
	mov.f32 	%f714, %f707;
	mov.f32 	%f715, %f707;
	mov.f32 	%f716, %f707;
	mov.f32 	%f717, %f707;
	mov.f32 	%f718, %f707;
	mov.f32 	%f719, %f707;
	mov.f32 	%f720, %f707;
	mov.f32 	%f721, %f707;
	mov.f32 	%f722, %f707;
	mov.f32 	%f723, %f707;
	mov.f32 	%f724, %f707;
	mov.f32 	%f725, %f707;
	mov.f32 	%f726, %f707;
	mov.f32 	%f727, %f707;
	mov.f32 	%f728, %f707;
	mov.f32 	%f729, %f707;
	mov.f32 	%f730, %f707;
	mov.f32 	%f731, %f707;
	mov.f32 	%f732, %f707;
	mov.f32 	%f733, %f707;
	mov.f32 	%f734, %f707;
	mov.f32 	%f735, %f707;
	mov.f32 	%f736, %f707;
	mov.f32 	%f737, %f707;
	mov.f32 	%f738, %f707;
	mov.f32 	%f739, %f707;
	mov.f32 	%f740, %f707;
	mov.f32 	%f741, %f707;
	mov.f32 	%f742, %f707;
	mov.f32 	%f743, %f707;
	mov.f32 	%f744, %f707;
	mov.f32 	%f745, %f707;
	mov.f32 	%f746, %f707;
	mov.f32 	%f747, %f707;
	mov.f32 	%f748, %f707;
	mov.f32 	%f749, %f707;
	mov.f32 	%f750, %f707;
	mov.f32 	%f751, %f707;
	mov.f32 	%f752, %f707;
	mov.f32 	%f753, %f707;
	mov.f32 	%f754, %f707;
	mov.f32 	%f755, %f707;
	mov.f32 	%f756, %f707;
	mov.f32 	%f757, %f707;
	mov.f32 	%f758, %f707;
	mov.f32 	%f759, %f707;
	mov.f32 	%f760, %f707;
	mov.f32 	%f761, %f707;
	mov.f32 	%f762, %f707;
	mov.f32 	%f763, %f707;
	mov.f32 	%f764, %f707;
	mov.f32 	%f765, %f707;
	mov.f32 	%f766, %f707;
	mov.f32 	%f767, %f707;
	mov.f32 	%f768, %f707;
	mov.f32 	%f769, %f707;
	mov.f32 	%f770, %f707;
	mov.u32 	%r1004, %r1002;
$L__BB0_2:
	setp.lt.s32 	%p50, %r1004, %r56;
	.loc	1 30 20
	add.s32 	%r300, %r1001, %r824;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r452, %r453, %r454, %r455 }, [ %r300 + 0 ];
	// end inline asm
	add.s32 	%r305, %r300, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r500, %r501, %r502, %r503 }, [ %r305 + 0 ];
	// end inline asm
	.loc	1 31 20
	add.s32 	%r826, %r1000, %r281;
	add.s32 	%r310, %r826, 2048;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r456, %r457, %r462, %r463 }, [ %r310 + 0 ];
	// end inline asm
	add.s32 	%r828, %r1000, %r284;
	add.s32 	%r315, %r828, 2048;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r468, %r469, %r474, %r475 }, [ %r315 + 0 ];
	// end inline asm
	add.s32 	%r830, %r1000, %r287;
	add.s32 	%r320, %r830, 2048;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r480, %r481, %r486, %r487 }, [ %r320 + 0 ];
	// end inline asm
	add.s32 	%r832, %r1000, %r290;
	add.s32 	%r325, %r832, 2048;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r492, %r493, %r498, %r499 }, [ %r325 + 0 ];
	// end inline asm
	.loc	1 32 32
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f707, %f708, %f709, %f710 }, { %r996, %r997, %r998, %r999 }, { %r988, %r989 }, { %f707, %f708, %f709, %f710 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f711, %f712, %f713, %f714 }, { %r996, %r997, %r998, %r999 }, { %r990, %r991 }, { %f711, %f712, %f713, %f714 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f715, %f716, %f717, %f718 }, { %r996, %r997, %r998, %r999 }, { %r984, %r985 }, { %f715, %f716, %f717, %f718 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f719, %f720, %f721, %f722 }, { %r996, %r997, %r998, %r999 }, { %r986, %r987 }, { %f719, %f720, %f721, %f722 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f723, %f724, %f725, %f726 }, { %r996, %r997, %r998, %r999 }, { %r980, %r981 }, { %f723, %f724, %f725, %f726 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f727, %f728, %f729, %f730 }, { %r996, %r997, %r998, %r999 }, { %r982, %r983 }, { %f727, %f728, %f729, %f730 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f731, %f732, %f733, %f734 }, { %r996, %r997, %r998, %r999 }, { %r976, %r977 }, { %f731, %f732, %f733, %f734 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f735, %f736, %f737, %f738 }, { %r996, %r997, %r998, %r999 }, { %r978, %r979 }, { %f735, %f736, %f737, %f738 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f739, %f740, %f741, %f742 }, { %r992, %r993, %r994, %r995 }, { %r988, %r989 }, { %f739, %f740, %f741, %f742 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f743, %f744, %f745, %f746 }, { %r992, %r993, %r994, %r995 }, { %r990, %r991 }, { %f743, %f744, %f745, %f746 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f747, %f748, %f749, %f750 }, { %r992, %r993, %r994, %r995 }, { %r984, %r985 }, { %f747, %f748, %f749, %f750 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f751, %f752, %f753, %f754 }, { %r992, %r993, %r994, %r995 }, { %r986, %r987 }, { %f751, %f752, %f753, %f754 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f755, %f756, %f757, %f758 }, { %r992, %r993, %r994, %r995 }, { %r980, %r981 }, { %f755, %f756, %f757, %f758 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f759, %f760, %f761, %f762 }, { %r992, %r993, %r994, %r995 }, { %r982, %r983 }, { %f759, %f760, %f761, %f762 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f763, %f764, %f765, %f766 }, { %r992, %r993, %r994, %r995 }, { %r976, %r977 }, { %f763, %f764, %f765, %f766 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f767, %f768, %f769, %f770 }, { %r992, %r993, %r994, %r995 }, { %r978, %r979 }, { %f767, %f768, %f769, %f770 };
	// end inline asm
	.loc	1 30 20
	add.s32 	%r426, %r1001, %r833;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r578, %r579, %r580, %r581 }, [ %r426 + 0 ];
	// end inline asm
	add.s32 	%r431, %r426, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r626, %r627, %r628, %r629 }, [ %r431 + 0 ];
	// end inline asm
	.loc	1 31 20
	add.s32 	%r436, %r826, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r582, %r583, %r588, %r589 }, [ %r436 + 0 ];
	// end inline asm
	add.s32 	%r441, %r828, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r594, %r595, %r600, %r601 }, [ %r441 + 0 ];
	// end inline asm
	add.s32 	%r446, %r830, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r606, %r607, %r612, %r613 }, [ %r446 + 0 ];
	// end inline asm
	add.s32 	%r451, %r832, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r618, %r619, %r624, %r625 }, [ %r451 + 0 ];
	// end inline asm
	.loc	1 32 32
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f707, %f708, %f709, %f710 }, { %r452, %r453, %r454, %r455 }, { %r456, %r457 }, { %f707, %f708, %f709, %f710 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f711, %f712, %f713, %f714 }, { %r452, %r453, %r454, %r455 }, { %r462, %r463 }, { %f711, %f712, %f713, %f714 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f715, %f716, %f717, %f718 }, { %r452, %r453, %r454, %r455 }, { %r468, %r469 }, { %f715, %f716, %f717, %f718 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f719, %f720, %f721, %f722 }, { %r452, %r453, %r454, %r455 }, { %r474, %r475 }, { %f719, %f720, %f721, %f722 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f723, %f724, %f725, %f726 }, { %r452, %r453, %r454, %r455 }, { %r480, %r481 }, { %f723, %f724, %f725, %f726 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f727, %f728, %f729, %f730 }, { %r452, %r453, %r454, %r455 }, { %r486, %r487 }, { %f727, %f728, %f729, %f730 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f731, %f732, %f733, %f734 }, { %r452, %r453, %r454, %r455 }, { %r492, %r493 }, { %f731, %f732, %f733, %f734 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f735, %f736, %f737, %f738 }, { %r452, %r453, %r454, %r455 }, { %r498, %r499 }, { %f735, %f736, %f737, %f738 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f739, %f740, %f741, %f742 }, { %r500, %r501, %r502, %r503 }, { %r456, %r457 }, { %f739, %f740, %f741, %f742 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f743, %f744, %f745, %f746 }, { %r500, %r501, %r502, %r503 }, { %r462, %r463 }, { %f743, %f744, %f745, %f746 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f747, %f748, %f749, %f750 }, { %r500, %r501, %r502, %r503 }, { %r468, %r469 }, { %f747, %f748, %f749, %f750 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f751, %f752, %f753, %f754 }, { %r500, %r501, %r502, %r503 }, { %r474, %r475 }, { %f751, %f752, %f753, %f754 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f755, %f756, %f757, %f758 }, { %r500, %r501, %r502, %r503 }, { %r480, %r481 }, { %f755, %f756, %f757, %f758 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f759, %f760, %f761, %f762 }, { %r500, %r501, %r502, %r503 }, { %r486, %r487 }, { %f759, %f760, %f761, %f762 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f763, %f764, %f765, %f766 }, { %r500, %r501, %r502, %r503 }, { %r492, %r493 }, { %f763, %f764, %f765, %f766 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f767, %f768, %f769, %f770 }, { %r500, %r501, %r502, %r503 }, { %r498, %r499 }, { %f767, %f768, %f769, %f770 };
	// end inline asm
	.loc	1 30 20
	add.s32 	%r552, %r1001, %r834;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r674, %r675, %r676, %r677 }, [ %r552 + 0 ];
	// end inline asm
	add.s32 	%r557, %r552, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r722, %r723, %r724, %r725 }, [ %r557 + 0 ];
	// end inline asm
	.loc	1 31 20
	add.s32 	%r562, %r826, 6144;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r678, %r679, %r684, %r685 }, [ %r562 + 0 ];
	// end inline asm
	add.s32 	%r567, %r828, 6144;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r690, %r691, %r696, %r697 }, [ %r567 + 0 ];
	// end inline asm
	add.s32 	%r572, %r830, 6144;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r702, %r703, %r708, %r709 }, [ %r572 + 0 ];
	// end inline asm
	add.s32 	%r577, %r832, 6144;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r714, %r715, %r720, %r721 }, [ %r577 + 0 ];
	// end inline asm
	.loc	1 32 32
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f707, %f708, %f709, %f710 }, { %r578, %r579, %r580, %r581 }, { %r582, %r583 }, { %f707, %f708, %f709, %f710 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f711, %f712, %f713, %f714 }, { %r578, %r579, %r580, %r581 }, { %r588, %r589 }, { %f711, %f712, %f713, %f714 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f715, %f716, %f717, %f718 }, { %r578, %r579, %r580, %r581 }, { %r594, %r595 }, { %f715, %f716, %f717, %f718 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f719, %f720, %f721, %f722 }, { %r578, %r579, %r580, %r581 }, { %r600, %r601 }, { %f719, %f720, %f721, %f722 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f723, %f724, %f725, %f726 }, { %r578, %r579, %r580, %r581 }, { %r606, %r607 }, { %f723, %f724, %f725, %f726 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f727, %f728, %f729, %f730 }, { %r578, %r579, %r580, %r581 }, { %r612, %r613 }, { %f727, %f728, %f729, %f730 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f731, %f732, %f733, %f734 }, { %r578, %r579, %r580, %r581 }, { %r618, %r619 }, { %f731, %f732, %f733, %f734 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f735, %f736, %f737, %f738 }, { %r578, %r579, %r580, %r581 }, { %r624, %r625 }, { %f735, %f736, %f737, %f738 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f739, %f740, %f741, %f742 }, { %r626, %r627, %r628, %r629 }, { %r582, %r583 }, { %f739, %f740, %f741, %f742 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f743, %f744, %f745, %f746 }, { %r626, %r627, %r628, %r629 }, { %r588, %r589 }, { %f743, %f744, %f745, %f746 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f747, %f748, %f749, %f750 }, { %r626, %r627, %r628, %r629 }, { %r594, %r595 }, { %f747, %f748, %f749, %f750 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f751, %f752, %f753, %f754 }, { %r626, %r627, %r628, %r629 }, { %r600, %r601 }, { %f751, %f752, %f753, %f754 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f755, %f756, %f757, %f758 }, { %r626, %r627, %r628, %r629 }, { %r606, %r607 }, { %f755, %f756, %f757, %f758 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f759, %f760, %f761, %f762 }, { %r626, %r627, %r628, %r629 }, { %r612, %r613 }, { %f759, %f760, %f761, %f762 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f763, %f764, %f765, %f766 }, { %r626, %r627, %r628, %r629 }, { %r618, %r619 }, { %f763, %f764, %f765, %f766 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f767, %f768, %f769, %f770 }, { %r626, %r627, %r628, %r629 }, { %r624, %r625 }, { %f767, %f768, %f769, %f770 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f707, %f708, %f709, %f710 }, { %r674, %r675, %r676, %r677 }, { %r678, %r679 }, { %f707, %f708, %f709, %f710 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f711, %f712, %f713, %f714 }, { %r674, %r675, %r676, %r677 }, { %r684, %r685 }, { %f711, %f712, %f713, %f714 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f715, %f716, %f717, %f718 }, { %r674, %r675, %r676, %r677 }, { %r690, %r691 }, { %f715, %f716, %f717, %f718 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f719, %f720, %f721, %f722 }, { %r674, %r675, %r676, %r677 }, { %r696, %r697 }, { %f719, %f720, %f721, %f722 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f723, %f724, %f725, %f726 }, { %r674, %r675, %r676, %r677 }, { %r702, %r703 }, { %f723, %f724, %f725, %f726 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f727, %f728, %f729, %f730 }, { %r674, %r675, %r676, %r677 }, { %r708, %r709 }, { %f727, %f728, %f729, %f730 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f731, %f732, %f733, %f734 }, { %r674, %r675, %r676, %r677 }, { %r714, %r715 }, { %f731, %f732, %f733, %f734 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f735, %f736, %f737, %f738 }, { %r674, %r675, %r676, %r677 }, { %r720, %r721 }, { %f735, %f736, %f737, %f738 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f739, %f740, %f741, %f742 }, { %r722, %r723, %r724, %r725 }, { %r678, %r679 }, { %f739, %f740, %f741, %f742 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f743, %f744, %f745, %f746 }, { %r722, %r723, %r724, %r725 }, { %r684, %r685 }, { %f743, %f744, %f745, %f746 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f747, %f748, %f749, %f750 }, { %r722, %r723, %r724, %r725 }, { %r690, %r691 }, { %f747, %f748, %f749, %f750 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f751, %f752, %f753, %f754 }, { %r722, %r723, %r724, %r725 }, { %r696, %r697 }, { %f751, %f752, %f753, %f754 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f755, %f756, %f757, %f758 }, { %r722, %r723, %r724, %r725 }, { %r702, %r703 }, { %f755, %f756, %f757, %f758 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f759, %f760, %f761, %f762 }, { %r722, %r723, %r724, %r725 }, { %r708, %r709 }, { %f759, %f760, %f761, %f762 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f763, %f764, %f765, %f766 }, { %r722, %r723, %r724, %r725 }, { %r714, %r715 }, { %f763, %f764, %f765, %f766 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f767, %f768, %f769, %f770 }, { %r722, %r723, %r724, %r725 }, { %r720, %r721 }, { %f767, %f768, %f769, %f770 };
	// end inline asm
	.loc	1 28 22
	add.s32 	%r835, %r1003, 1;
	setp.lt.s32 	%p51, %r835, 2;
	selp.b32 	%r1003, %r835, 0, %p51;
	.loc	1 30 82
	setp.lt.s32 	%p52, %r9, %r973;
	.loc	1 30 29
	mul.wide.s32 	%rd79, %r974, 2;
	add.s64 	%rd67, %rd14, %rd79;
	add.s64 	%rd68, %rd15, %rd79;
	add.s64 	%rd69, %rd16, %rd79;
	add.s64 	%rd70, %rd17, %rd79;
	add.s64 	%rd71, %rd18, %rd79;
	add.s64 	%rd72, %rd19, %rd79;
	add.s64 	%rd73, %rd20, %rd79;
	add.s64 	%rd74, %rd21, %rd79;
	.loc	1 30 20
	shl.b32 	%r836, %r1003, 13;
	shl.b32 	%r837, %r1003, 14;
	add.s32 	%r839, %r247, %r837;
	bar.sync 	0;
	add.s32 	%r770, %r839, %r246;
	add.s32 	%r772, %r839, %r249;
	add.s32 	%r774, %r839, %r251;
	add.s32 	%r776, %r839, %r253;
	add.s32 	%r778, %r839, %r255;
	add.s32 	%r780, %r839, %r257;
	add.s32 	%r782, %r839, %r259;
	add.s32 	%r784, %r839, %r261;
	selp.b32 	%r848, 16, 0, %p52;
	selp.b32 	%r773, %r848, 0, %p50;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r770 + 0 ], [ %rd67 + 0 ], 0x10, %r773;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r772 + 0 ], [ %rd68 + 0 ], 0x10, %r773;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r774 + 0 ], [ %rd69 + 0 ], 0x10, %r773;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r776 + 0 ], [ %rd70 + 0 ], 0x10, %r773;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r778 + 0 ], [ %rd71 + 0 ], 0x10, %r773;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r780 + 0 ], [ %rd72 + 0 ], 0x10, %r773;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r782 + 0 ], [ %rd73 + 0 ], 0x10, %r773;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r784 + 0 ], [ %rd74 + 0 ], 0x10, %r773;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 31 82
	setp.lt.s32 	%p53, %r4, %r973;
	setp.lt.s32 	%p54, %r5, %r973;
	setp.lt.s32 	%p55, %r6, %r973;
	setp.lt.s32 	%p56, %r7, %r973;
	.loc	1 31 29
	mul.wide.s32 	%rd80, %r975, 2;
	add.s64 	%rd75, %rd22, %rd80;
	add.s64 	%rd76, %rd23, %rd80;
	add.s64 	%rd77, %rd24, %rd80;
	add.s64 	%rd78, %rd25, %rd80;
	.loc	1 31 20
	add.s32 	%r850, %r263, %r836;
	add.s32 	%r786, %r850, %r246;
	add.s32 	%r788, %r850, %r249;
	add.s32 	%r790, %r850, %r251;
	add.s32 	%r792, %r850, %r253;
	selp.b32 	%r851, 16, 0, %p53;
	selp.b32 	%r787, %r851, 0, %p50;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r786 + 0 ], [ %rd75 + 0 ], 0x10, %r787;
	// end inline asm
	selp.b32 	%r852, 16, 0, %p54;
	selp.b32 	%r789, %r852, 0, %p50;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r788 + 0 ], [ %rd76 + 0 ], 0x10, %r789;
	// end inline asm
	selp.b32 	%r853, 16, 0, %p55;
	selp.b32 	%r791, %r853, 0, %p50;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r790 + 0 ], [ %rd77 + 0 ], 0x10, %r791;
	// end inline asm
	selp.b32 	%r854, 16, 0, %p56;
	selp.b32 	%r793, %r854, 0, %p50;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r792 + 0 ], [ %rd78 + 0 ], 0x10, %r793;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 28 22
	add.s32 	%r855, %r1002, 1;
	setp.lt.s32 	%p57, %r855, 2;
	selp.b32 	%r1002, %r855, 0, %p57;
	.loc	1 30 20
	shl.b32 	%r856, %r1002, 13;
	shl.b32 	%r857, %r1002, 14;
	add.s32 	%r1001, %r247, %r857;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	.loc	1 31 20
	add.s32 	%r1000, %r263, %r856;
	.loc	1 30 20
	add.s32 	%r798, %r1001, %r278;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r996, %r997, %r998, %r999 }, [ %r798 + 0 ];
	// end inline asm
	add.s32 	%r803, %r798, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r992, %r993, %r994, %r995 }, [ %r803 + 0 ];
	// end inline asm
	.loc	1 31 20
	add.s32 	%r808, %r1000, %r281;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r988, %r989, %r990, %r991 }, [ %r808 + 0 ];
	// end inline asm
	add.s32 	%r813, %r1000, %r284;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r984, %r985, %r986, %r987 }, [ %r813 + 0 ];
	// end inline asm
	add.s32 	%r818, %r1000, %r287;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r980, %r981, %r982, %r983 }, [ %r818 + 0 ];
	// end inline asm
	add.s32 	%r823, %r1000, %r290;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r976, %r977, %r978, %r979 }, [ %r823 + 0 ];
	// end inline asm
	.loc	1 28 22
	add.s32 	%r1004, %r1004, 1;
	add.s32 	%r975, %r975, %r19;
	add.s32 	%r974, %r974, 64;
	add.s32 	%r973, %r973, -64;
	setp.lt.s32 	%p58, %r1004, %r10;
	@%p58 bra 	$L__BB0_2;
$L__BB0_3:
	.loc	1 30 20
	shl.b32 	%r923, %r20, 1;
	.loc	1 20 49
	shl.b32 	%r924, %r2, 2;
	and.b32  	%r925, %r924, 60;
	.loc	1 20 36
	or.b32  	%r926, %r925, %r8;
	.loc	1 19 49
	bfe.u32 	%r927, %r2, 4, 3;
	.loc	1 19 36
	or.b32  	%r928, %r927, %r1;
	or.b32  	%r929, %r928, 120;
	or.b32  	%r930, %r928, 112;
	or.b32  	%r931, %r928, 104;
	or.b32  	%r932, %r928, 96;
	or.b32  	%r933, %r928, 88;
	or.b32  	%r934, %r928, 80;
	or.b32  	%r935, %r928, 72;
	or.b32  	%r936, %r928, 64;
	or.b32  	%r937, %r928, 56;
	or.b32  	%r938, %r928, 48;
	or.b32  	%r939, %r928, 40;
	or.b32  	%r940, %r928, 32;
	or.b32  	%r941, %r928, 24;
	or.b32  	%r942, %r928, 16;
	or.b32  	%r943, %r928, 8;
	.loc	1 28 22
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	.loc	1 34 39
	mul.lo.s32 	%r944, %r928, %r130;
	shl.b32 	%r945, %r130, 3;
	add.s32 	%r946, %r944, %r945;
	add.s32 	%r947, %r946, %r945;
	add.s32 	%r948, %r947, %r945;
	add.s32 	%r949, %r948, %r945;
	add.s32 	%r950, %r949, %r945;
	add.s32 	%r951, %r950, %r945;
	add.s32 	%r952, %r951, %r945;
	add.s32 	%r953, %r952, %r945;
	add.s32 	%r954, %r953, %r945;
	add.s32 	%r955, %r954, %r945;
	add.s32 	%r956, %r955, %r945;
	add.s32 	%r957, %r956, %r945;
	add.s32 	%r958, %r957, %r945;
	add.s32 	%r959, %r958, %r945;
	add.s32 	%r960, %r959, %r945;
	.loc	1 34 21
	mul.wide.s32 	%rd97, %r944, 4;
	add.s64 	%rd98, %rd13, %rd97;
	mul.wide.s32 	%rd99, %r946, 4;
	add.s64 	%rd100, %rd13, %rd99;
	mul.wide.s32 	%rd101, %r947, 4;
	add.s64 	%rd102, %rd13, %rd101;
	mul.wide.s32 	%rd103, %r948, 4;
	add.s64 	%rd104, %rd13, %rd103;
	mul.wide.s32 	%rd105, %r949, 4;
	add.s64 	%rd106, %rd13, %rd105;
	mul.wide.s32 	%rd107, %r950, 4;
	add.s64 	%rd108, %rd13, %rd107;
	mul.wide.s32 	%rd109, %r951, 4;
	add.s64 	%rd110, %rd13, %rd109;
	mul.wide.s32 	%rd111, %r952, 4;
	add.s64 	%rd112, %rd13, %rd111;
	mul.wide.s32 	%rd113, %r953, 4;
	add.s64 	%rd114, %rd13, %rd113;
	mul.wide.s32 	%rd115, %r954, 4;
	add.s64 	%rd116, %rd13, %rd115;
	mul.wide.s32 	%rd117, %r955, 4;
	add.s64 	%rd118, %rd13, %rd117;
	mul.wide.s32 	%rd119, %r956, 4;
	add.s64 	%rd120, %rd13, %rd119;
	mul.wide.s32 	%rd121, %r957, 4;
	add.s64 	%rd122, %rd13, %rd121;
	mul.wide.s32 	%rd123, %r958, 4;
	add.s64 	%rd124, %rd13, %rd123;
	mul.wide.s32 	%rd125, %r959, 4;
	add.s64 	%rd126, %rd13, %rd125;
	mul.wide.s32 	%rd127, %r960, 4;
	add.s64 	%rd128, %rd13, %rd127;
	.loc	1 34 51
	mul.wide.s32 	%rd129, %r926, 4;
	add.s64 	%rd81, %rd98, %rd129;
	add.s64 	%rd82, %rd100, %rd129;
	add.s64 	%rd83, %rd102, %rd129;
	add.s64 	%rd84, %rd104, %rd129;
	add.s64 	%rd85, %rd106, %rd129;
	add.s64 	%rd86, %rd108, %rd129;
	add.s64 	%rd87, %rd110, %rd129;
	add.s64 	%rd88, %rd112, %rd129;
	add.s64 	%rd89, %rd114, %rd129;
	add.s64 	%rd90, %rd116, %rd129;
	add.s64 	%rd91, %rd118, %rd129;
	add.s64 	%rd92, %rd120, %rd129;
	add.s64 	%rd93, %rd122, %rd129;
	add.s64 	%rd94, %rd124, %rd129;
	add.s64 	%rd95, %rd126, %rd129;
	add.s64 	%rd96, %rd128, %rd129;
	.loc	1 35 32
	setp.lt.s32 	%p75, %r928, %r126;
	setp.lt.s32 	%p76, %r943, %r126;
	setp.lt.s32 	%p77, %r942, %r126;
	setp.lt.s32 	%p78, %r941, %r126;
	setp.lt.s32 	%p79, %r940, %r126;
	setp.lt.s32 	%p80, %r939, %r126;
	setp.lt.s32 	%p81, %r938, %r126;
	setp.lt.s32 	%p82, %r937, %r126;
	setp.lt.s32 	%p83, %r936, %r126;
	setp.lt.s32 	%p84, %r935, %r126;
	setp.lt.s32 	%p85, %r934, %r126;
	setp.lt.s32 	%p86, %r933, %r126;
	setp.lt.s32 	%p87, %r932, %r126;
	setp.lt.s32 	%p88, %r931, %r126;
	setp.lt.s32 	%p89, %r930, %r126;
	setp.lt.s32 	%p90, %r929, %r126;
	.loc	1 35 56
	setp.lt.s32 	%p91, %r926, %r128;
	.loc	1 35 38
	and.pred  	%p59, %p91, %p75;
	and.pred  	%p60, %p91, %p76;
	and.pred  	%p61, %p91, %p77;
	and.pred  	%p62, %p91, %p78;
	and.pred  	%p63, %p91, %p79;
	and.pred  	%p64, %p91, %p80;
	and.pred  	%p65, %p91, %p81;
	and.pred  	%p66, %p91, %p82;
	and.pred  	%p67, %p91, %p83;
	and.pred  	%p68, %p91, %p84;
	and.pred  	%p69, %p91, %p85;
	and.pred  	%p70, %p91, %p86;
	and.pred  	%p71, %p91, %p87;
	and.pred  	%p72, %p91, %p88;
	and.pred  	%p73, %p91, %p89;
	and.pred  	%p74, %p91, %p90;
	.loc	1 36 21
	shr.u32 	%r961, %r3, 2;
	shl.b32 	%r962, %r2, 1;
	and.b32  	%r963, %r962, 6;
	or.b32  	%r964, %r22, %r961;
	mad.lo.s32 	%r965, %r964, 68, %r963;
	shl.b32 	%r966, %r965, 2;
	add.s32 	%r968, %r247, %r966;
	st.shared.v2.f32 	[%r968], {%f707, %f708};
	st.shared.v2.f32 	[%r968+2176], {%f709, %f710};
	st.shared.v2.f32 	[%r968+32], {%f711, %f712};
	st.shared.v2.f32 	[%r968+2208], {%f713, %f714};
	st.shared.v2.f32 	[%r968+64], {%f715, %f716};
	st.shared.v2.f32 	[%r968+2240], {%f717, %f718};
	st.shared.v2.f32 	[%r968+96], {%f719, %f720};
	st.shared.v2.f32 	[%r968+2272], {%f721, %f722};
	st.shared.v2.f32 	[%r968+128], {%f723, %f724};
	st.shared.v2.f32 	[%r968+2304], {%f725, %f726};
	st.shared.v2.f32 	[%r968+160], {%f727, %f728};
	st.shared.v2.f32 	[%r968+2336], {%f729, %f730};
	st.shared.v2.f32 	[%r968+192], {%f731, %f732};
	st.shared.v2.f32 	[%r968+2368], {%f733, %f734};
	st.shared.v2.f32 	[%r968+224], {%f735, %f736};
	st.shared.v2.f32 	[%r968+2400], {%f737, %f738};
	bar.sync 	0;
	or.b32  	%r969, %r923, %r21;
	mad.lo.s32 	%r970, %r969, 68, %r925;
	shl.b32 	%r971, %r970, 2;
	add.s32 	%r972, %r247, %r971;
	ld.shared.v4.u32 	{%r859, %r860, %r861, %r862}, [%r972];
	ld.shared.v4.u32 	{%r863, %r864, %r865, %r866}, [%r972+2176];
	ld.shared.v4.u32 	{%r867, %r868, %r869, %r870}, [%r972+4352];
	ld.shared.v4.u32 	{%r871, %r872, %r873, %r874}, [%r972+6528];
	ld.shared.v4.u32 	{%r875, %r876, %r877, %r878}, [%r972+8704];
	ld.shared.v4.u32 	{%r879, %r880, %r881, %r882}, [%r972+10880];
	ld.shared.v4.u32 	{%r883, %r884, %r885, %r886}, [%r972+13056];
	ld.shared.v4.u32 	{%r887, %r888, %r889, %r890}, [%r972+15232];
	bar.sync 	0;
	st.shared.v2.f32 	[%r968], {%f739, %f740};
	st.shared.v2.f32 	[%r968+2176], {%f741, %f742};
	st.shared.v2.f32 	[%r968+32], {%f743, %f744};
	st.shared.v2.f32 	[%r968+2208], {%f745, %f746};
	st.shared.v2.f32 	[%r968+64], {%f747, %f748};
	st.shared.v2.f32 	[%r968+2240], {%f749, %f750};
	st.shared.v2.f32 	[%r968+96], {%f751, %f752};
	st.shared.v2.f32 	[%r968+2272], {%f753, %f754};
	st.shared.v2.f32 	[%r968+128], {%f755, %f756};
	st.shared.v2.f32 	[%r968+2304], {%f757, %f758};
	st.shared.v2.f32 	[%r968+160], {%f759, %f760};
	st.shared.v2.f32 	[%r968+2336], {%f761, %f762};
	st.shared.v2.f32 	[%r968+192], {%f763, %f764};
	st.shared.v2.f32 	[%r968+2368], {%f765, %f766};
	st.shared.v2.f32 	[%r968+224], {%f767, %f768};
	st.shared.v2.f32 	[%r968+2400], {%f769, %f770};
	bar.sync 	0;
	ld.shared.v4.u32 	{%r891, %r892, %r893, %r894}, [%r972];
	ld.shared.v4.u32 	{%r895, %r896, %r897, %r898}, [%r972+2176];
	ld.shared.v4.u32 	{%r899, %r900, %r901, %r902}, [%r972+4352];
	ld.shared.v4.u32 	{%r903, %r904, %r905, %r906}, [%r972+6528];
	ld.shared.v4.u32 	{%r907, %r908, %r909, %r910}, [%r972+8704];
	ld.shared.v4.u32 	{%r911, %r912, %r913, %r914}, [%r972+10880];
	ld.shared.v4.u32 	{%r915, %r916, %r917, %r918}, [%r972+13056];
	ld.shared.v4.u32 	{%r919, %r920, %r921, %r922}, [%r972+15232];
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd81 + 0 ], { %r859, %r860, %r861, %r862 };
	// end inline asm
	// begin inline asm
	@%p60 st.global.v4.b32 [ %rd82 + 0 ], { %r863, %r864, %r865, %r866 };
	// end inline asm
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd83 + 0 ], { %r867, %r868, %r869, %r870 };
	// end inline asm
	// begin inline asm
	@%p62 st.global.v4.b32 [ %rd84 + 0 ], { %r871, %r872, %r873, %r874 };
	// end inline asm
	// begin inline asm
	@%p63 st.global.v4.b32 [ %rd85 + 0 ], { %r875, %r876, %r877, %r878 };
	// end inline asm
	// begin inline asm
	@%p64 st.global.v4.b32 [ %rd86 + 0 ], { %r879, %r880, %r881, %r882 };
	// end inline asm
	// begin inline asm
	@%p65 st.global.v4.b32 [ %rd87 + 0 ], { %r883, %r884, %r885, %r886 };
	// end inline asm
	// begin inline asm
	@%p66 st.global.v4.b32 [ %rd88 + 0 ], { %r887, %r888, %r889, %r890 };
	// end inline asm
	// begin inline asm
	@%p67 st.global.v4.b32 [ %rd89 + 0 ], { %r891, %r892, %r893, %r894 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd90 + 0 ], { %r895, %r896, %r897, %r898 };
	// end inline asm
	// begin inline asm
	@%p69 st.global.v4.b32 [ %rd91 + 0 ], { %r899, %r900, %r901, %r902 };
	// end inline asm
	// begin inline asm
	@%p70 st.global.v4.b32 [ %rd92 + 0 ], { %r903, %r904, %r905, %r906 };
	// end inline asm
	// begin inline asm
	@%p71 st.global.v4.b32 [ %rd93 + 0 ], { %r907, %r908, %r909, %r910 };
	// end inline asm
	// begin inline asm
	@%p72 st.global.v4.b32 [ %rd94 + 0 ], { %r911, %r912, %r913, %r914 };
	// end inline asm
	// begin inline asm
	@%p73 st.global.v4.b32 [ %rd95 + 0 ], { %r915, %r916, %r917, %r918 };
	// end inline asm
	// begin inline asm
	@%p74 st.global.v4.b32 [ %rd96 + 0 ], { %r919, %r920, %r921, %r922 };
	// end inline asm
	.loc	1 36 4
	ret;
$L__tmp3:
$L__func_end0:

}
	.file	1 "/root/triton-runner/examples/python_runner/matmul-with-dot-v2.py"
	.file	2 "/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 1
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 2
.b8 46
.b8 0
.b8 3
.b8 8
.b8 32
.b8 11
.b8 0
.b8 0
.b8 3
.b8 46
.b8 1
.b8 17
.b8 1
.b8 18
.b8 1
.b8 49
.b8 19
.b8 0
.b8 0
.b8 4
.b8 29
.b8 0
.b8 49
.b8 19
.b8 17
.b8 1
.b8 18
.b8 1
.b8 88
.b8 11
.b8 89
.b8 11
.b8 87
.b8 11
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 165
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 109
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 45
.b8 119
.b8 105
.b8 116
.b8 104
.b8 45
.b8 100
.b8 111
.b8 116
.b8 45
.b8 118
.b8 50
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 114
.b8 111
.b8 111
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 45
.b8 114
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 47
.b8 101
.b8 120
.b8 97
.b8 109
.b8 112
.b8 108
.b8 101
.b8 115
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 95
.b8 114
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
.b8 2
.b8 109
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1
.b8 3
.b64 $L__func_begin0
.b64 $L__func_end0
.b32 106
.b8 4
.b32 106
.b64 $L__tmp1
.b64 $L__tmp2
.b8 1
.b8 28
.b8 33
.b8 0
.b8 0
	}
	.section	.debug_loc	{	}
