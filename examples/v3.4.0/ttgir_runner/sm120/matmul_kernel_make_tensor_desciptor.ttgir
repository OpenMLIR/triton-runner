#loc = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":12:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2], instrShape = [16, 8]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 64, transposed = false, elementBitWidth = 8}>
#shared1 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared2 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:120", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel_make_tensor_desciptor(%arg0: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":12:0), %arg1: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":12:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":12:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":12:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":12:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":12:0)) attributes {noinline = false} {
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c2_i64 = arith.constant 2 : i64 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.extsi %arg4 : i32 to i64 loc(#loc4)
    %3 = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc4)
    ttng.tensormap_create %3, %arg0, [%c64_i32, %c128_i32], [%arg4, %arg3], [%2], [%c1_i32, %c1_i32] {elem_type = 0 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 2 : i32} : (!tt.ptr<i8>, !tt.ptr<f8E5M2>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc4)
    ttng.tensormap_fenceproxy_acquire %3 : !tt.ptr<i8> loc(#loc4)
    %4 = ttng.reinterpret_tensor_descriptor %3 : !tt.ptr<i8> to !tt.tensordesc<tensor<128x64xf8E5M2, #shared>> loc(#loc4)
    %5 = arith.extsi %arg5 : i32 to i64 loc(#loc5)
    %6 = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc5)
    ttng.tensormap_create %6, %arg1, [%c64_i32, %c64_i32], [%arg5, %arg4], [%5], [%c1_i32, %c1_i32] {elem_type = 0 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 2 : i32} : (!tt.ptr<i8>, !tt.ptr<f8E5M2>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc5)
    ttng.tensormap_fenceproxy_acquire %6 : !tt.ptr<i8> loc(#loc5)
    %7 = ttng.reinterpret_tensor_descriptor %6 : !tt.ptr<i8> to !tt.tensordesc<tensor<64x64xf8E5M2, #shared>> loc(#loc5)
    %8 = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc6)
    %9 = arith.muli %5, %c2_i64 : i64 loc(#loc6)
    ttng.tensormap_create %8, %arg2, [%c64_i32, %c128_i32], [%arg5, %arg3], [%9], [%c1_i32, %c1_i32] {elem_type = 6 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 3 : i32} : (!tt.ptr<i8>, !tt.ptr<f16>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc6)
    ttng.tensormap_fenceproxy_acquire %8 : !tt.ptr<i8> loc(#loc6)
    %10 = ttng.reinterpret_tensor_descriptor %8 : !tt.ptr<i8> to !tt.tensordesc<tensor<128x64xf16, #shared1>> loc(#loc6)
    %11 = arith.addi %arg4, %c63_i32 : i32 loc(#loc20)
    %12 = arith.divsi %11, %c64_i32 : i32 loc(#loc21)
    %13 = arith.muli %0, %c128_i32 : i32 loc(#loc10)
    %14 = arith.muli %1, %c64_i32 : i32 loc(#loc11)
    %15 = ttg.local_alloc : () -> !ttg.memdesc<2x128x64xf8E5M2, #shared, #smem, mutable> loc(#loc12)
    %16 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> loc(#loc13)
    %17 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared2, #smem, mutable> loc(#loc14)
    %18 = ttg.memdesc_subview %17[%c0_i32] : !ttg.memdesc<2xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
    ttng.init_barrier %18, 1 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
    %19 = ttg.memdesc_subview %17[%c1_i32] : !ttg.memdesc<2xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
    ttng.init_barrier %19, 1 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
    %20 = arith.cmpi sgt, %12, %c0_i32 : i32 loc(#loc14)
    ttng.barrier_expect %18, 12288, %20 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
    %21 = ttg.memdesc_subview %15[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 2x128x64> loc(#loc12)
    ttng.async_tma_copy_global_to_local %4[%13, %c0_i32] %21, %18, %20 : !tt.tensordesc<tensor<128x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 2x128x64> loc(#loc12)
    %22 = ttg.memdesc_subview %16[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc13)
    ttng.async_tma_copy_global_to_local %7[%c0_i32, %14] %22, %18, %20 : !tt.tensordesc<tensor<64x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc13)
    %23 = arith.cmpi sgt, %12, %c1_i32 : i32 loc(#loc14)
    ttng.barrier_expect %19, 12288, %23 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
    %24 = ttg.memdesc_subview %15[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 2x128x64> loc(#loc12)
    ttng.async_tma_copy_global_to_local %4[%13, %c64_i32] %24, %19, %23 : !tt.tensordesc<tensor<128x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 2x128x64> loc(#loc12)
    %25 = ttg.memdesc_subview %16[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc13)
    ttng.async_tma_copy_global_to_local %7[%c64_i32, %14] %25, %19, %23 : !tt.tensordesc<tensor<64x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc13)
    %26:4 = scf.for %arg6 = %c0_i32 to %12 step %c1_i32 iter_args(%arg7 = %cst, %arg8 = %c1_i32, %arg9 = %c-1_i32, %arg10 = %c0_i32) -> (tensor<128x64xf32, #mma>, i32, i32, i32)  : i32 {
      %29 = arith.subi %12, %c2_i32 : i32 loc(#loc14)
      %30 = arith.cmpi slt, %arg6, %29 : i32 loc(#loc14)
      %31 = arith.addi %arg9, %c1_i32 : i32 loc(#loc14)
      %32 = arith.cmpi sge, %31, %c2_i32 : i32 loc(#loc14)
      %33 = arith.select %32, %c0_i32, %31 : i32 loc(#loc14)
      %34 = arith.xori %arg10, %c1_i32 : i32 loc(#loc14)
      %35 = arith.select %32, %34, %arg10 : i32 loc(#loc14)
      %36 = ttg.memdesc_subview %17[%33] : !ttg.memdesc<2xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
      ttng.wait_barrier %36, %35 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
      %37 = ttg.memdesc_subview %16[%33, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc13)
      %38 = ttg.local_load %37 : !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> -> tensor<64x64xf8E5M2, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc13)
      %39 = ttg.memdesc_subview %15[%33, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 2x128x64> loc(#loc12)
      %40 = ttg.local_load %39 : !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 2x128x64> -> tensor<128x64xf8E5M2, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc12)
      %41 = tt.fp_to_fp %40 : tensor<128x64xf8E5M2, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> -> tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc15)
      %42 = tt.fp_to_fp %38 : tensor<64x64xf8E5M2, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc15)
      %43 = tt.dot %41, %42, %arg7, inputPrecision = tf32 : tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x64xf32, #mma> loc(#loc15)
      %44 = arith.addi %arg8, %c1_i32 : i32 loc(#loc14)
      %45 = arith.cmpi sge, %44, %c2_i32 : i32 loc(#loc14)
      %46 = arith.select %45, %c0_i32, %44 : i32 loc(#loc14)
      %47 = arith.addi %arg6, %c2_i32 : i32 loc(#loc14)
      %48 = arith.muli %47, %c64_i32 : i32 loc(#loc16)
      %49 = ttg.memdesc_subview %17[%46] : !ttg.memdesc<2xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
      ttng.barrier_expect %49, 12288, %30 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
      %50 = ttg.memdesc_subview %15[%46, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 2x128x64> loc(#loc12)
      ttng.async_tma_copy_global_to_local %4[%13, %48] %50, %49, %30 : !tt.tensordesc<tensor<128x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 2x128x64> loc(#loc12)
      %51 = ttg.memdesc_subview %16[%46, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc13)
      ttng.async_tma_copy_global_to_local %7[%48, %14] %51, %49, %30 : !tt.tensordesc<tensor<64x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc13)
      scf.yield %43, %46, %33, %35 : tensor<128x64xf32, #mma>, i32, i32, i32 loc(#loc14)
    } loc(#loc14)
    ttng.inval_barrier %18 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
    ttng.inval_barrier %19 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2> loc(#loc14)
    ttg.local_dealloc %17 : !ttg.memdesc<2xi64, #shared2, #smem, mutable> loc(#loc14)
    ttg.local_dealloc %16 : !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> loc(#loc14)
    ttg.local_dealloc %15 : !ttg.memdesc<2x128x64xf8E5M2, #shared, #smem, mutable> loc(#loc14)
    %27 = arith.truncf %26#0 : tensor<128x64xf32, #mma> to tensor<128x64xf16, #mma> loc(#loc17)
    %28 = ttg.local_alloc %27 : (tensor<128x64xf16, #mma>) -> !ttg.memdesc<128x64xf16, #shared1, #smem, mutable> loc(#loc18)
    ttng.fence_async_shared {bCluster = false} loc(#loc18)
    ttng.async_tma_copy_local_to_global %10[%13, %14] %28 : !tt.tensordesc<tensor<128x64xf16, #shared1>>, !ttg.memdesc<128x64xf16, #shared1, #smem, mutable> loc(#loc18)
    ttng.async_tma_store_wait {pendings = 0 : i32} loc(#loc18)
    tt.return loc(#loc19)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":17:26)
#loc3 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":18:26)
#loc4 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":21:8)
#loc5 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":27:8)
#loc6 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":33:8)
#loc7 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:22)
#loc8 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":40:30)
#loc9 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:28)
#loc10 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":41:33)
#loc11 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":42:51)
#loc12 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":41:24)
#loc13 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":42:24)
#loc14 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":40:19)
#loc15 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":43:32)
#loc16 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":41:51)
#loc17 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":45:33)
#loc18 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":46:63)
#loc19 = loc("/home/ubuntu/triton_runner/examples/triton_kernel/matmul-with-tma-v4.py":46:4)
#loc20 = loc(callsite(#loc7 at #loc8))
#loc21 = loc(callsite(#loc9 at #loc8))
