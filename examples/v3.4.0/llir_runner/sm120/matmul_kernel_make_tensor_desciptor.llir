; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel_make_tensor_desciptor(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, ptr addrspace(1) %6) local_unnamed_addr #0 !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %10 = sext i32 %4 to i64, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y(), !dbg !10
  %14 = mul nuw i32 %11, %13, !dbg !10
  %15 = add nuw i32 %14, %9, !dbg !10
  %16 = mul i32 %15, %12, !dbg !10
  %17 = add i32 %16, %8, !dbg !10
  %18 = mul i32 %17, 384, !dbg !10
  %19 = sext i32 %18 to i64, !dbg !10
  %20 = getelementptr i8, ptr addrspace(1) %6, i64 %19, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %22 = icmp samesign ult i32 %21, 32, !dbg !10
  %23 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %21, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> zeroinitializer, i1 %22) #4, !dbg !10
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !10
  %24 = icmp eq i32 %21, 0, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %0, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 128, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %4, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %3, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %10, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x2;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %20, ptr addrspace(3) @global_smem, i1 %22) #4, !dbg !10
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %20, i1 %22) #4, !dbg !10
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !10
  %25 = addrspacecast ptr addrspace(1) %20 to ptr, !dbg !10
  %26 = sext i32 %5 to i64, !dbg !11
  %27 = add i32 %18, 128, !dbg !11
  %28 = sext i32 %27 to i64, !dbg !11
  %29 = getelementptr i8, ptr addrspace(1) %6, i64 %28, !dbg !11
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !11
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> zeroinitializer, i1 %22) #4, !dbg !11
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %1, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %5, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %4, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %26, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x2;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %29, ptr addrspace(3) @global_smem, i1 %22) #4, !dbg !11
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %29, i1 %22) #4, !dbg !11
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !11
  %30 = addrspacecast ptr addrspace(1) %29 to ptr, !dbg !11
  %31 = add i32 %18, 256, !dbg !12
  %32 = sext i32 %31 to i64, !dbg !12
  %33 = getelementptr i8, ptr addrspace(1) %6, i64 %32, !dbg !12
  %34 = shl nsw i64 %26, 1, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !12
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> zeroinitializer, i1 %22) #4, !dbg !12
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %2, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 128, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %5, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %3, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %34, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x6;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x3;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %33, ptr addrspace(3) @global_smem, i1 %22) #4, !dbg !12
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %33, i1 %22) #4, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !12
  %35 = add i32 %4, 63, !dbg !13
  %36 = sdiv i32 %35, 64, !dbg !17
  %37 = shl i32 %8, 7, !dbg !18
  %38 = shl nuw nsw i32 %9, 6, !dbg !19
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24584)) #4, !dbg !20
  %39 = icmp sgt i32 %35, 63, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  %40 = and i1 %24, %39, !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 12288;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %41 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !21
  %42 = extractvalue { i32, i1 } %41, 1, !dbg !21
  %43 = and i1 %39, %42, !dbg !21
  %44 = and i1 %22, %43, !dbg !21
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %44, ptr addrspace(3) @global_smem, ptr %25, i32 0, i32 %37, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576)) #4, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %45 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %46 = extractvalue { i32, i1 } %45, 1, !dbg !22
  %47 = and i1 %39, %46, !dbg !22
  %48 = and i1 %22, %47, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %48, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), ptr %30, i32 %38, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576)) #4, !dbg !22
  %49 = icmp sgt i32 %35, 127, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  %50 = and i1 %24, %49, !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 12288;", "b,r"(i1 %50, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24584)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %51 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !21
  %52 = extractvalue { i32, i1 } %51, 1, !dbg !21
  %53 = and i1 %49, %52, !dbg !21
  %54 = and i1 %22, %53, !dbg !21
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %54, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), ptr %25, i32 64, i32 %37, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24584)) #4, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %55 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %56 = extractvalue { i32, i1 } %55, 1, !dbg !22
  %57 = and i1 %49, %56, !dbg !22
  %58 = and i1 %22, %57, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %58, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), ptr %30, i32 %38, i32 64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24584)) #4, !dbg !22
  br i1 %39, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !20

.._crit_edge_crit_edge:                           ; preds = %7
  %.pre = and i32 %21, 4, !dbg !23
  %.pre97 = and i32 %21, 16, !dbg !23
  %.pre99 = lshr i32 %21, 2, !dbg !23
  %.pre101 = and i32 %.pre99, 8, !dbg !23
  %.pre103 = shl nuw nsw i32 %21, 4, !dbg !23
  %.pre105 = and i32 %.pre103, 1024, !dbg !23
  br label %._crit_edge, !dbg !20

.lr.ph:                                           ; preds = %7
  %59 = add nsw i32 %36, -2
  %60 = and i32 %21, 1
  %61 = icmp eq i32 %60, 0
  %62 = select i1 %61, i32 0, i32 288
  %63 = and i32 %21, 2
  %64 = icmp eq i32 %63, 0
  %65 = shl nuw nsw i32 %63, 8
  %66 = and i32 %21, 4
  %.not = icmp eq i32 %66, 0
  %.lobit = lshr exact i32 %66, 2
  %67 = and i32 %21, 8
  %68 = lshr exact i32 %67, 2
  %69 = and i32 %21, 16
  %70 = lshr exact i32 %69, 2
  %71 = lshr i32 %21, 2
  %72 = and i32 %71, 8
  %73 = or disjoint i32 %.lobit, %65
  %74 = or disjoint i32 %73, %68
  %75 = or disjoint i32 %74, %70
  %76 = or disjoint i32 %75, %62
  %77 = or disjoint i32 %76, 64
  %78 = xor i32 %77, %72
  %79 = or disjoint i32 %76, 144
  %80 = xor i32 %79, %72
  %81 = or disjoint i32 %76, 208
  %82 = xor i32 %81, %72
  %83 = or disjoint i32 %76, 1024
  %84 = xor i32 %83, %72
  %85 = or disjoint i32 %76, 1088
  %86 = xor i32 %85, %72
  %87 = or disjoint i32 %76, 1168
  %88 = xor i32 %87, %72
  %89 = or disjoint i32 %76, 1232
  %90 = xor i32 %89, %72
  %91 = or disjoint i32 %76, 2048
  %92 = xor i32 %91, %72
  %93 = or disjoint i32 %76, 2112
  %94 = xor i32 %93, %72
  %95 = or disjoint i32 %76, 2192
  %96 = xor i32 %95, %72
  %97 = or disjoint i32 %76, 2256
  %98 = xor i32 %97, %72
  %99 = or disjoint i32 %76, 3072
  %100 = xor i32 %99, %72
  %101 = or disjoint i32 %76, 3136
  %102 = xor i32 %101, %72
  %103 = or disjoint i32 %76, 3216
  %104 = xor i32 %103, %72
  %105 = or disjoint i32 %76, 3280
  %106 = xor i32 %105, %72
  %107 = or disjoint i32 %76, 16
  %108 = xor i32 %107, %72
  %109 = or disjoint i32 %76, 80
  %110 = xor i32 %109, %72
  %111 = or disjoint i32 %76, 128
  %112 = xor i32 %111, %72
  %113 = or disjoint i32 %76, 192
  %114 = xor i32 %113, %72
  %115 = or disjoint i32 %76, 1040
  %116 = xor i32 %115, %72
  %117 = or disjoint i32 %76, 1104
  %118 = xor i32 %117, %72
  %119 = or disjoint i32 %76, 1152
  %120 = xor i32 %119, %72
  %121 = or disjoint i32 %76, 1216
  %122 = xor i32 %121, %72
  %123 = or disjoint i32 %76, 2064
  %124 = xor i32 %123, %72
  %125 = or disjoint i32 %76, 2128
  %126 = xor i32 %125, %72
  %127 = or disjoint i32 %76, 2176
  %128 = xor i32 %127, %72
  %129 = or disjoint i32 %76, 2240
  %130 = xor i32 %129, %72
  %131 = or disjoint i32 %76, 3088
  %132 = xor i32 %131, %72
  %133 = or disjoint i32 %76, 3152
  %134 = xor i32 %133, %72
  %135 = or disjoint i32 %76, 3200
  %136 = xor i32 %135, %72
  %137 = or disjoint i32 %76, 3264
  %138 = xor i32 %137, %72
  %139 = or disjoint i32 %76, %72
  %140 = xor i32 %139, 32
  %141 = xor i32 %139, 96
  %142 = xor i32 %139, 176
  %143 = xor i32 %139, 240
  %144 = xor i32 %139, 1056
  %145 = xor i32 %139, 1120
  %146 = xor i32 %139, 1200
  %147 = xor i32 %139, 1264
  %148 = xor i32 %139, 2080
  %149 = xor i32 %139, 2144
  %150 = xor i32 %139, 2224
  %151 = xor i32 %139, 2288
  %152 = xor i32 %139, 3104
  %153 = xor i32 %139, 3168
  %154 = xor i32 %139, 3248
  %155 = xor i32 %139, 3312
  %156 = xor i32 %139, 48
  %157 = xor i32 %139, 112
  %158 = xor i32 %139, 160
  %159 = xor i32 %139, 224
  %160 = xor i32 %139, 1072
  %161 = xor i32 %139, 1136
  %162 = xor i32 %139, 1184
  %163 = xor i32 %139, 1248
  %164 = xor i32 %139, 2096
  %165 = xor i32 %139, 2160
  %166 = xor i32 %139, 2208
  %167 = xor i32 %139, 2272
  %168 = xor i32 %139, 3120
  %169 = xor i32 %139, 3184
  %170 = xor i32 %139, 3232
  %171 = xor i32 %139, 3296
  %172 = shl nuw nsw i32 %60, 6
  %173 = select i1 %64, i32 0, i32 144
  %174 = or disjoint i32 %173, %172
  %175 = select i1 %.not, i32 0, i32 288
  %176 = or disjoint i32 %174, %175
  %177 = shl nuw nsw i32 %67, 6
  %178 = or disjoint i32 %176, %177
  %179 = shl nuw nsw i32 %21, 4
  %180 = and i32 %179, 1024
  %181 = or disjoint i32 %178, %180
  %182 = xor i32 %181, %69
  %183 = xor i32 %182, 32
  %184 = xor i32 %182, 2048
  %185 = xor i32 %182, 2080
  %186 = xor i32 %182, 4096
  %187 = xor i32 %182, 4128
  %188 = xor i32 %182, 6144
  %189 = xor i32 %182, 6176
  br label %190, !dbg !20

190:                                              ; preds = %.lr.ph, %190
  %191 = phi i32 [ 0, %.lr.ph ], [ %264, %190 ]
  %192 = phi i32 [ -1, %.lr.ph ], [ %262, %190 ]
  %193 = phi i32 [ 1, %.lr.ph ], [ %1037, %190 ]
  %194 = phi float [ 0.000000e+00, %.lr.ph ], [ %956, %190 ]
  %195 = phi float [ 0.000000e+00, %.lr.ph ], [ %957, %190 ]
  %196 = phi float [ 0.000000e+00, %.lr.ph ], [ %958, %190 ]
  %197 = phi float [ 0.000000e+00, %.lr.ph ], [ %959, %190 ]
  %198 = phi float [ 0.000000e+00, %.lr.ph ], [ %961, %190 ]
  %199 = phi float [ 0.000000e+00, %.lr.ph ], [ %962, %190 ]
  %200 = phi float [ 0.000000e+00, %.lr.ph ], [ %963, %190 ]
  %201 = phi float [ 0.000000e+00, %.lr.ph ], [ %964, %190 ]
  %202 = phi float [ 0.000000e+00, %.lr.ph ], [ %966, %190 ]
  %203 = phi float [ 0.000000e+00, %.lr.ph ], [ %967, %190 ]
  %204 = phi float [ 0.000000e+00, %.lr.ph ], [ %968, %190 ]
  %205 = phi float [ 0.000000e+00, %.lr.ph ], [ %969, %190 ]
  %206 = phi float [ 0.000000e+00, %.lr.ph ], [ %971, %190 ]
  %207 = phi float [ 0.000000e+00, %.lr.ph ], [ %972, %190 ]
  %208 = phi float [ 0.000000e+00, %.lr.ph ], [ %973, %190 ]
  %209 = phi float [ 0.000000e+00, %.lr.ph ], [ %974, %190 ]
  %210 = phi float [ 0.000000e+00, %.lr.ph ], [ %976, %190 ]
  %211 = phi float [ 0.000000e+00, %.lr.ph ], [ %977, %190 ]
  %212 = phi float [ 0.000000e+00, %.lr.ph ], [ %978, %190 ]
  %213 = phi float [ 0.000000e+00, %.lr.ph ], [ %979, %190 ]
  %214 = phi float [ 0.000000e+00, %.lr.ph ], [ %981, %190 ]
  %215 = phi float [ 0.000000e+00, %.lr.ph ], [ %982, %190 ]
  %216 = phi float [ 0.000000e+00, %.lr.ph ], [ %983, %190 ]
  %217 = phi float [ 0.000000e+00, %.lr.ph ], [ %984, %190 ]
  %218 = phi float [ 0.000000e+00, %.lr.ph ], [ %986, %190 ]
  %219 = phi float [ 0.000000e+00, %.lr.ph ], [ %987, %190 ]
  %220 = phi float [ 0.000000e+00, %.lr.ph ], [ %988, %190 ]
  %221 = phi float [ 0.000000e+00, %.lr.ph ], [ %989, %190 ]
  %222 = phi float [ 0.000000e+00, %.lr.ph ], [ %991, %190 ]
  %223 = phi float [ 0.000000e+00, %.lr.ph ], [ %992, %190 ]
  %224 = phi float [ 0.000000e+00, %.lr.ph ], [ %993, %190 ]
  %225 = phi float [ 0.000000e+00, %.lr.ph ], [ %994, %190 ]
  %226 = phi float [ 0.000000e+00, %.lr.ph ], [ %996, %190 ]
  %227 = phi float [ 0.000000e+00, %.lr.ph ], [ %997, %190 ]
  %228 = phi float [ 0.000000e+00, %.lr.ph ], [ %998, %190 ]
  %229 = phi float [ 0.000000e+00, %.lr.ph ], [ %999, %190 ]
  %230 = phi float [ 0.000000e+00, %.lr.ph ], [ %1001, %190 ]
  %231 = phi float [ 0.000000e+00, %.lr.ph ], [ %1002, %190 ]
  %232 = phi float [ 0.000000e+00, %.lr.ph ], [ %1003, %190 ]
  %233 = phi float [ 0.000000e+00, %.lr.ph ], [ %1004, %190 ]
  %234 = phi float [ 0.000000e+00, %.lr.ph ], [ %1006, %190 ]
  %235 = phi float [ 0.000000e+00, %.lr.ph ], [ %1007, %190 ]
  %236 = phi float [ 0.000000e+00, %.lr.ph ], [ %1008, %190 ]
  %237 = phi float [ 0.000000e+00, %.lr.ph ], [ %1009, %190 ]
  %238 = phi float [ 0.000000e+00, %.lr.ph ], [ %1011, %190 ]
  %239 = phi float [ 0.000000e+00, %.lr.ph ], [ %1012, %190 ]
  %240 = phi float [ 0.000000e+00, %.lr.ph ], [ %1013, %190 ]
  %241 = phi float [ 0.000000e+00, %.lr.ph ], [ %1014, %190 ]
  %242 = phi float [ 0.000000e+00, %.lr.ph ], [ %1016, %190 ]
  %243 = phi float [ 0.000000e+00, %.lr.ph ], [ %1017, %190 ]
  %244 = phi float [ 0.000000e+00, %.lr.ph ], [ %1018, %190 ]
  %245 = phi float [ 0.000000e+00, %.lr.ph ], [ %1019, %190 ]
  %246 = phi float [ 0.000000e+00, %.lr.ph ], [ %1021, %190 ]
  %247 = phi float [ 0.000000e+00, %.lr.ph ], [ %1022, %190 ]
  %248 = phi float [ 0.000000e+00, %.lr.ph ], [ %1023, %190 ]
  %249 = phi float [ 0.000000e+00, %.lr.ph ], [ %1024, %190 ]
  %250 = phi float [ 0.000000e+00, %.lr.ph ], [ %1026, %190 ]
  %251 = phi float [ 0.000000e+00, %.lr.ph ], [ %1027, %190 ]
  %252 = phi float [ 0.000000e+00, %.lr.ph ], [ %1028, %190 ]
  %253 = phi float [ 0.000000e+00, %.lr.ph ], [ %1029, %190 ]
  %254 = phi float [ 0.000000e+00, %.lr.ph ], [ %1031, %190 ]
  %255 = phi float [ 0.000000e+00, %.lr.ph ], [ %1032, %190 ]
  %256 = phi float [ 0.000000e+00, %.lr.ph ], [ %1033, %190 ]
  %257 = phi float [ 0.000000e+00, %.lr.ph ], [ %1034, %190 ]
  %258 = phi i32 [ 0, %.lr.ph ], [ %1054, %190 ]
  %259 = icmp slt i32 %258, %59, !dbg !20
  %260 = add i32 %192, 1, !dbg !20
  %261 = icmp sgt i32 %260, 1, !dbg !20
  %262 = select i1 %261, i32 0, i32 %260, !dbg !20
  %263 = zext i1 %261 to i32, !dbg !20
  %264 = xor i32 %191, %263, !dbg !20
  %265 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %262, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) %265, i32 %264) #4, !dbg !20
  %266 = shl i32 %262, 12, !dbg !22
  %267 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %266, !dbg !22
  %268 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %62, !dbg !22
  %269 = getelementptr inbounds nuw i8, ptr addrspace(3) %268, i32 %65, !dbg !22
  %270 = getelementptr inbounds nuw i8, ptr addrspace(3) %269, i32 %.lobit, !dbg !22
  %271 = getelementptr inbounds nuw i8, ptr addrspace(3) %270, i32 %68, !dbg !22
  %272 = getelementptr inbounds nuw i8, ptr addrspace(3) %271, i32 %70, !dbg !22
  %273 = getelementptr inbounds nuw i8, ptr addrspace(3) %272, i32 %72, !dbg !22
  %274 = load <1 x i8>, ptr addrspace(3) %273, align 1, !dbg !22
  %275 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %78, !dbg !22
  %276 = load <1 x i8>, ptr addrspace(3) %275, align 1, !dbg !22
  %277 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %80, !dbg !22
  %278 = load <1 x i8>, ptr addrspace(3) %277, align 1, !dbg !22
  %279 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %82, !dbg !22
  %280 = load <1 x i8>, ptr addrspace(3) %279, align 1, !dbg !22
  %281 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %84, !dbg !22
  %282 = load <1 x i8>, ptr addrspace(3) %281, align 1, !dbg !22
  %283 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %86, !dbg !22
  %284 = load <1 x i8>, ptr addrspace(3) %283, align 1, !dbg !22
  %285 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %88, !dbg !22
  %286 = load <1 x i8>, ptr addrspace(3) %285, align 1, !dbg !22
  %287 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %90, !dbg !22
  %288 = load <1 x i8>, ptr addrspace(3) %287, align 1, !dbg !22
  %289 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %92, !dbg !22
  %290 = load <1 x i8>, ptr addrspace(3) %289, align 1, !dbg !22
  %291 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %94, !dbg !22
  %292 = load <1 x i8>, ptr addrspace(3) %291, align 1, !dbg !22
  %293 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %96, !dbg !22
  %294 = load <1 x i8>, ptr addrspace(3) %293, align 1, !dbg !22
  %295 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %98, !dbg !22
  %296 = load <1 x i8>, ptr addrspace(3) %295, align 1, !dbg !22
  %297 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %100, !dbg !22
  %298 = load <1 x i8>, ptr addrspace(3) %297, align 1, !dbg !22
  %299 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %102, !dbg !22
  %300 = load <1 x i8>, ptr addrspace(3) %299, align 1, !dbg !22
  %301 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %104, !dbg !22
  %302 = load <1 x i8>, ptr addrspace(3) %301, align 1, !dbg !22
  %303 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %106, !dbg !22
  %304 = load <1 x i8>, ptr addrspace(3) %303, align 1, !dbg !22
  %305 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %108, !dbg !22
  %306 = load <1 x i8>, ptr addrspace(3) %305, align 1, !dbg !22
  %307 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %110, !dbg !22
  %308 = load <1 x i8>, ptr addrspace(3) %307, align 1, !dbg !22
  %309 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %112, !dbg !22
  %310 = load <1 x i8>, ptr addrspace(3) %309, align 1, !dbg !22
  %311 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %114, !dbg !22
  %312 = load <1 x i8>, ptr addrspace(3) %311, align 1, !dbg !22
  %313 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %116, !dbg !22
  %314 = load <1 x i8>, ptr addrspace(3) %313, align 1, !dbg !22
  %315 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %118, !dbg !22
  %316 = load <1 x i8>, ptr addrspace(3) %315, align 1, !dbg !22
  %317 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %120, !dbg !22
  %318 = load <1 x i8>, ptr addrspace(3) %317, align 1, !dbg !22
  %319 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %122, !dbg !22
  %320 = load <1 x i8>, ptr addrspace(3) %319, align 1, !dbg !22
  %321 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %124, !dbg !22
  %322 = load <1 x i8>, ptr addrspace(3) %321, align 1, !dbg !22
  %323 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %126, !dbg !22
  %324 = load <1 x i8>, ptr addrspace(3) %323, align 1, !dbg !22
  %325 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %128, !dbg !22
  %326 = load <1 x i8>, ptr addrspace(3) %325, align 1, !dbg !22
  %327 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %130, !dbg !22
  %328 = load <1 x i8>, ptr addrspace(3) %327, align 1, !dbg !22
  %329 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %132, !dbg !22
  %330 = load <1 x i8>, ptr addrspace(3) %329, align 1, !dbg !22
  %331 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %134, !dbg !22
  %332 = load <1 x i8>, ptr addrspace(3) %331, align 1, !dbg !22
  %333 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %136, !dbg !22
  %334 = load <1 x i8>, ptr addrspace(3) %333, align 1, !dbg !22
  %335 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %138, !dbg !22
  %336 = load <1 x i8>, ptr addrspace(3) %335, align 1, !dbg !22
  %337 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %140, !dbg !22
  %338 = load <1 x i8>, ptr addrspace(3) %337, align 1, !dbg !22
  %339 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %141, !dbg !22
  %340 = load <1 x i8>, ptr addrspace(3) %339, align 1, !dbg !22
  %341 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %142, !dbg !22
  %342 = load <1 x i8>, ptr addrspace(3) %341, align 1, !dbg !22
  %343 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %143, !dbg !22
  %344 = load <1 x i8>, ptr addrspace(3) %343, align 1, !dbg !22
  %345 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %144, !dbg !22
  %346 = load <1 x i8>, ptr addrspace(3) %345, align 1, !dbg !22
  %347 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %145, !dbg !22
  %348 = load <1 x i8>, ptr addrspace(3) %347, align 1, !dbg !22
  %349 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %146, !dbg !22
  %350 = load <1 x i8>, ptr addrspace(3) %349, align 1, !dbg !22
  %351 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %147, !dbg !22
  %352 = load <1 x i8>, ptr addrspace(3) %351, align 1, !dbg !22
  %353 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %148, !dbg !22
  %354 = load <1 x i8>, ptr addrspace(3) %353, align 1, !dbg !22
  %355 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %149, !dbg !22
  %356 = load <1 x i8>, ptr addrspace(3) %355, align 1, !dbg !22
  %357 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %150, !dbg !22
  %358 = load <1 x i8>, ptr addrspace(3) %357, align 1, !dbg !22
  %359 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %151, !dbg !22
  %360 = load <1 x i8>, ptr addrspace(3) %359, align 1, !dbg !22
  %361 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %152, !dbg !22
  %362 = load <1 x i8>, ptr addrspace(3) %361, align 1, !dbg !22
  %363 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %153, !dbg !22
  %364 = load <1 x i8>, ptr addrspace(3) %363, align 1, !dbg !22
  %365 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %154, !dbg !22
  %366 = load <1 x i8>, ptr addrspace(3) %365, align 1, !dbg !22
  %367 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %155, !dbg !22
  %368 = load <1 x i8>, ptr addrspace(3) %367, align 1, !dbg !22
  %369 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %156, !dbg !22
  %370 = load <1 x i8>, ptr addrspace(3) %369, align 1, !dbg !22
  %371 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %157, !dbg !22
  %372 = load <1 x i8>, ptr addrspace(3) %371, align 1, !dbg !22
  %373 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %158, !dbg !22
  %374 = load <1 x i8>, ptr addrspace(3) %373, align 1, !dbg !22
  %375 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %159, !dbg !22
  %376 = load <1 x i8>, ptr addrspace(3) %375, align 1, !dbg !22
  %377 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %160, !dbg !22
  %378 = load <1 x i8>, ptr addrspace(3) %377, align 1, !dbg !22
  %379 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %161, !dbg !22
  %380 = load <1 x i8>, ptr addrspace(3) %379, align 1, !dbg !22
  %381 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %162, !dbg !22
  %382 = load <1 x i8>, ptr addrspace(3) %381, align 1, !dbg !22
  %383 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %163, !dbg !22
  %384 = load <1 x i8>, ptr addrspace(3) %383, align 1, !dbg !22
  %385 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %164, !dbg !22
  %386 = load <1 x i8>, ptr addrspace(3) %385, align 1, !dbg !22
  %387 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %165, !dbg !22
  %388 = load <1 x i8>, ptr addrspace(3) %387, align 1, !dbg !22
  %389 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %166, !dbg !22
  %390 = load <1 x i8>, ptr addrspace(3) %389, align 1, !dbg !22
  %391 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %167, !dbg !22
  %392 = load <1 x i8>, ptr addrspace(3) %391, align 1, !dbg !22
  %393 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %168, !dbg !22
  %394 = load <1 x i8>, ptr addrspace(3) %393, align 1, !dbg !22
  %395 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %169, !dbg !22
  %396 = load <1 x i8>, ptr addrspace(3) %395, align 1, !dbg !22
  %397 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %170, !dbg !22
  %398 = load <1 x i8>, ptr addrspace(3) %397, align 1, !dbg !22
  %399 = getelementptr inbounds nuw i8, ptr addrspace(3) %267, i32 %171, !dbg !22
  %400 = load <1 x i8>, ptr addrspace(3) %399, align 1, !dbg !22
  %401 = shl i32 %262, 13, !dbg !21
  %402 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %401, !dbg !21
  %403 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 %182, !dbg !21
  %404 = ptrtoint ptr addrspace(3) %403 to i32, !dbg !21
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %404) #4, !dbg !21
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !21
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !21
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !21
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !21
  %410 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 %183, !dbg !21
  %411 = ptrtoint ptr addrspace(3) %410 to i32, !dbg !21
  %412 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %411) #4, !dbg !21
  %413 = extractvalue { i32, i32, i32, i32 } %412, 0, !dbg !21
  %414 = extractvalue { i32, i32, i32, i32 } %412, 1, !dbg !21
  %415 = extractvalue { i32, i32, i32, i32 } %412, 2, !dbg !21
  %416 = extractvalue { i32, i32, i32, i32 } %412, 3, !dbg !21
  %417 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 %184, !dbg !21
  %418 = ptrtoint ptr addrspace(3) %417 to i32, !dbg !21
  %419 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %418) #4, !dbg !21
  %420 = extractvalue { i32, i32, i32, i32 } %419, 0, !dbg !21
  %421 = extractvalue { i32, i32, i32, i32 } %419, 1, !dbg !21
  %422 = extractvalue { i32, i32, i32, i32 } %419, 2, !dbg !21
  %423 = extractvalue { i32, i32, i32, i32 } %419, 3, !dbg !21
  %424 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 %185, !dbg !21
  %425 = ptrtoint ptr addrspace(3) %424 to i32, !dbg !21
  %426 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %425) #4, !dbg !21
  %427 = extractvalue { i32, i32, i32, i32 } %426, 0, !dbg !21
  %428 = extractvalue { i32, i32, i32, i32 } %426, 1, !dbg !21
  %429 = extractvalue { i32, i32, i32, i32 } %426, 2, !dbg !21
  %430 = extractvalue { i32, i32, i32, i32 } %426, 3, !dbg !21
  %431 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 %186, !dbg !21
  %432 = ptrtoint ptr addrspace(3) %431 to i32, !dbg !21
  %433 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %432) #4, !dbg !21
  %434 = extractvalue { i32, i32, i32, i32 } %433, 0, !dbg !21
  %435 = extractvalue { i32, i32, i32, i32 } %433, 1, !dbg !21
  %436 = extractvalue { i32, i32, i32, i32 } %433, 2, !dbg !21
  %437 = extractvalue { i32, i32, i32, i32 } %433, 3, !dbg !21
  %438 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 %187, !dbg !21
  %439 = ptrtoint ptr addrspace(3) %438 to i32, !dbg !21
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %439) #4, !dbg !21
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !21
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !21
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !21
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !21
  %445 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 %188, !dbg !21
  %446 = ptrtoint ptr addrspace(3) %445 to i32, !dbg !21
  %447 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %446) #4, !dbg !21
  %448 = extractvalue { i32, i32, i32, i32 } %447, 0, !dbg !21
  %449 = extractvalue { i32, i32, i32, i32 } %447, 1, !dbg !21
  %450 = extractvalue { i32, i32, i32, i32 } %447, 2, !dbg !21
  %451 = extractvalue { i32, i32, i32, i32 } %447, 3, !dbg !21
  %452 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 %189, !dbg !21
  %453 = ptrtoint ptr addrspace(3) %452 to i32, !dbg !21
  %454 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %453) #4, !dbg !21
  %455 = extractvalue { i32, i32, i32, i32 } %454, 0, !dbg !21
  %456 = extractvalue { i32, i32, i32, i32 } %454, 1, !dbg !21
  %457 = extractvalue { i32, i32, i32, i32 } %454, 2, !dbg !21
  %458 = extractvalue { i32, i32, i32, i32 } %454, 3, !dbg !21
  %.extract = trunc i32 %406 to i16, !dbg !24
  %459 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract) #4, !dbg !24
  %extelt.offset = lshr i32 %406, 16, !dbg !24
  %.extract2 = trunc nuw i32 %extelt.offset to i16, !dbg !24
  %460 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract2) #4, !dbg !24
  %.extract3 = trunc i32 %407 to i16, !dbg !24
  %461 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract3) #4, !dbg !24
  %extelt.offset5 = lshr i32 %407, 16, !dbg !24
  %.extract4 = trunc nuw i32 %extelt.offset5 to i16, !dbg !24
  %462 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract4) #4, !dbg !24
  %.extract6 = trunc i32 %408 to i16, !dbg !24
  %463 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract6) #4, !dbg !24
  %extelt.offset8 = lshr i32 %408, 16, !dbg !24
  %.extract7 = trunc nuw i32 %extelt.offset8 to i16, !dbg !24
  %464 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract7) #4, !dbg !24
  %.extract9 = trunc i32 %409 to i16, !dbg !24
  %465 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract9) #4, !dbg !24
  %extelt.offset11 = lshr i32 %409, 16, !dbg !24
  %.extract10 = trunc nuw i32 %extelt.offset11 to i16, !dbg !24
  %466 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract10) #4, !dbg !24
  %.extract12 = trunc i32 %413 to i16, !dbg !24
  %467 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract12) #4, !dbg !24
  %extelt.offset14 = lshr i32 %413, 16, !dbg !24
  %.extract13 = trunc nuw i32 %extelt.offset14 to i16, !dbg !24
  %468 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract13) #4, !dbg !24
  %.extract15 = trunc i32 %414 to i16, !dbg !24
  %469 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract15) #4, !dbg !24
  %extelt.offset17 = lshr i32 %414, 16, !dbg !24
  %.extract16 = trunc nuw i32 %extelt.offset17 to i16, !dbg !24
  %470 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract16) #4, !dbg !24
  %.extract18 = trunc i32 %415 to i16, !dbg !24
  %471 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract18) #4, !dbg !24
  %extelt.offset20 = lshr i32 %415, 16, !dbg !24
  %.extract19 = trunc nuw i32 %extelt.offset20 to i16, !dbg !24
  %472 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract19) #4, !dbg !24
  %.extract21 = trunc i32 %416 to i16, !dbg !24
  %473 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract21) #4, !dbg !24
  %extelt.offset23 = lshr i32 %416, 16, !dbg !24
  %.extract22 = trunc nuw i32 %extelt.offset23 to i16, !dbg !24
  %474 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract22) #4, !dbg !24
  %.extract24 = trunc i32 %420 to i16, !dbg !24
  %475 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract24) #4, !dbg !24
  %extelt.offset26 = lshr i32 %420, 16, !dbg !24
  %.extract25 = trunc nuw i32 %extelt.offset26 to i16, !dbg !24
  %476 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract25) #4, !dbg !24
  %.extract27 = trunc i32 %421 to i16, !dbg !24
  %477 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract27) #4, !dbg !24
  %extelt.offset29 = lshr i32 %421, 16, !dbg !24
  %.extract28 = trunc nuw i32 %extelt.offset29 to i16, !dbg !24
  %478 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract28) #4, !dbg !24
  %.extract30 = trunc i32 %422 to i16, !dbg !24
  %479 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract30) #4, !dbg !24
  %extelt.offset32 = lshr i32 %422, 16, !dbg !24
  %.extract31 = trunc nuw i32 %extelt.offset32 to i16, !dbg !24
  %480 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract31) #4, !dbg !24
  %.extract33 = trunc i32 %423 to i16, !dbg !24
  %481 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract33) #4, !dbg !24
  %extelt.offset35 = lshr i32 %423, 16, !dbg !24
  %.extract34 = trunc nuw i32 %extelt.offset35 to i16, !dbg !24
  %482 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract34) #4, !dbg !24
  %.extract36 = trunc i32 %427 to i16, !dbg !24
  %483 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract36) #4, !dbg !24
  %extelt.offset38 = lshr i32 %427, 16, !dbg !24
  %.extract37 = trunc nuw i32 %extelt.offset38 to i16, !dbg !24
  %484 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract37) #4, !dbg !24
  %.extract39 = trunc i32 %428 to i16, !dbg !24
  %485 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract39) #4, !dbg !24
  %extelt.offset41 = lshr i32 %428, 16, !dbg !24
  %.extract40 = trunc nuw i32 %extelt.offset41 to i16, !dbg !24
  %486 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract40) #4, !dbg !24
  %.extract42 = trunc i32 %429 to i16, !dbg !24
  %487 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract42) #4, !dbg !24
  %extelt.offset44 = lshr i32 %429, 16, !dbg !24
  %.extract43 = trunc nuw i32 %extelt.offset44 to i16, !dbg !24
  %488 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract43) #4, !dbg !24
  %.extract45 = trunc i32 %430 to i16, !dbg !24
  %489 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract45) #4, !dbg !24
  %extelt.offset47 = lshr i32 %430, 16, !dbg !24
  %.extract46 = trunc nuw i32 %extelt.offset47 to i16, !dbg !24
  %490 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract46) #4, !dbg !24
  %.extract48 = trunc i32 %434 to i16, !dbg !24
  %491 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract48) #4, !dbg !24
  %extelt.offset50 = lshr i32 %434, 16, !dbg !24
  %.extract49 = trunc nuw i32 %extelt.offset50 to i16, !dbg !24
  %492 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract49) #4, !dbg !24
  %.extract51 = trunc i32 %435 to i16, !dbg !24
  %493 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract51) #4, !dbg !24
  %extelt.offset53 = lshr i32 %435, 16, !dbg !24
  %.extract52 = trunc nuw i32 %extelt.offset53 to i16, !dbg !24
  %494 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract52) #4, !dbg !24
  %.extract54 = trunc i32 %436 to i16, !dbg !24
  %495 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract54) #4, !dbg !24
  %extelt.offset56 = lshr i32 %436, 16, !dbg !24
  %.extract55 = trunc nuw i32 %extelt.offset56 to i16, !dbg !24
  %496 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract55) #4, !dbg !24
  %.extract57 = trunc i32 %437 to i16, !dbg !24
  %497 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract57) #4, !dbg !24
  %extelt.offset59 = lshr i32 %437, 16, !dbg !24
  %.extract58 = trunc nuw i32 %extelt.offset59 to i16, !dbg !24
  %498 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract58) #4, !dbg !24
  %.extract60 = trunc i32 %441 to i16, !dbg !24
  %499 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract60) #4, !dbg !24
  %extelt.offset62 = lshr i32 %441, 16, !dbg !24
  %.extract61 = trunc nuw i32 %extelt.offset62 to i16, !dbg !24
  %500 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract61) #4, !dbg !24
  %.extract63 = trunc i32 %442 to i16, !dbg !24
  %501 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract63) #4, !dbg !24
  %extelt.offset65 = lshr i32 %442, 16, !dbg !24
  %.extract64 = trunc nuw i32 %extelt.offset65 to i16, !dbg !24
  %502 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract64) #4, !dbg !24
  %.extract66 = trunc i32 %443 to i16, !dbg !24
  %503 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract66) #4, !dbg !24
  %extelt.offset68 = lshr i32 %443, 16, !dbg !24
  %.extract67 = trunc nuw i32 %extelt.offset68 to i16, !dbg !24
  %504 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract67) #4, !dbg !24
  %.extract69 = trunc i32 %444 to i16, !dbg !24
  %505 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract69) #4, !dbg !24
  %extelt.offset71 = lshr i32 %444, 16, !dbg !24
  %.extract70 = trunc nuw i32 %extelt.offset71 to i16, !dbg !24
  %506 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract70) #4, !dbg !24
  %.extract72 = trunc i32 %448 to i16, !dbg !24
  %507 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract72) #4, !dbg !24
  %extelt.offset74 = lshr i32 %448, 16, !dbg !24
  %.extract73 = trunc nuw i32 %extelt.offset74 to i16, !dbg !24
  %508 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract73) #4, !dbg !24
  %.extract75 = trunc i32 %449 to i16, !dbg !24
  %509 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract75) #4, !dbg !24
  %extelt.offset77 = lshr i32 %449, 16, !dbg !24
  %.extract76 = trunc nuw i32 %extelt.offset77 to i16, !dbg !24
  %510 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract76) #4, !dbg !24
  %.extract78 = trunc i32 %450 to i16, !dbg !24
  %511 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract78) #4, !dbg !24
  %extelt.offset80 = lshr i32 %450, 16, !dbg !24
  %.extract79 = trunc nuw i32 %extelt.offset80 to i16, !dbg !24
  %512 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract79) #4, !dbg !24
  %.extract81 = trunc i32 %451 to i16, !dbg !24
  %513 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract81) #4, !dbg !24
  %extelt.offset83 = lshr i32 %451, 16, !dbg !24
  %.extract82 = trunc nuw i32 %extelt.offset83 to i16, !dbg !24
  %514 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract82) #4, !dbg !24
  %.extract84 = trunc i32 %455 to i16, !dbg !24
  %515 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract84) #4, !dbg !24
  %extelt.offset86 = lshr i32 %455, 16, !dbg !24
  %.extract85 = trunc nuw i32 %extelt.offset86 to i16, !dbg !24
  %516 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract85) #4, !dbg !24
  %.extract87 = trunc i32 %456 to i16, !dbg !24
  %517 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract87) #4, !dbg !24
  %extelt.offset89 = lshr i32 %456, 16, !dbg !24
  %.extract88 = trunc nuw i32 %extelt.offset89 to i16, !dbg !24
  %518 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract88) #4, !dbg !24
  %.extract90 = trunc i32 %457 to i16, !dbg !24
  %519 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract90) #4, !dbg !24
  %extelt.offset92 = lshr i32 %457, 16, !dbg !24
  %.extract91 = trunc nuw i32 %extelt.offset92 to i16, !dbg !24
  %520 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract91) #4, !dbg !24
  %.extract93 = trunc i32 %458 to i16, !dbg !24
  %521 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract93) #4, !dbg !24
  %extelt.offset95 = lshr i32 %458, 16, !dbg !24
  %.extract94 = trunc nuw i32 %extelt.offset95 to i16, !dbg !24
  %522 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract94) #4, !dbg !24
  %523 = shufflevector <1 x i8> %274, <1 x i8> %276, <2 x i32> <i32 0, i32 1>, !dbg !24
  %524 = bitcast <2 x i8> %523 to i16, !dbg !24
  %525 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %524) #4, !dbg !24
  %526 = shufflevector <1 x i8> %278, <1 x i8> %280, <2 x i32> <i32 0, i32 1>, !dbg !24
  %527 = bitcast <2 x i8> %526 to i16, !dbg !24
  %528 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %527) #4, !dbg !24
  %529 = shufflevector <1 x i8> %282, <1 x i8> %284, <2 x i32> <i32 0, i32 1>, !dbg !24
  %530 = bitcast <2 x i8> %529 to i16, !dbg !24
  %531 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %530) #4, !dbg !24
  %532 = shufflevector <1 x i8> %286, <1 x i8> %288, <2 x i32> <i32 0, i32 1>, !dbg !24
  %533 = bitcast <2 x i8> %532 to i16, !dbg !24
  %534 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %533) #4, !dbg !24
  %535 = shufflevector <1 x i8> %290, <1 x i8> %292, <2 x i32> <i32 0, i32 1>, !dbg !24
  %536 = bitcast <2 x i8> %535 to i16, !dbg !24
  %537 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %536) #4, !dbg !24
  %538 = shufflevector <1 x i8> %294, <1 x i8> %296, <2 x i32> <i32 0, i32 1>, !dbg !24
  %539 = bitcast <2 x i8> %538 to i16, !dbg !24
  %540 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %539) #4, !dbg !24
  %541 = shufflevector <1 x i8> %298, <1 x i8> %300, <2 x i32> <i32 0, i32 1>, !dbg !24
  %542 = bitcast <2 x i8> %541 to i16, !dbg !24
  %543 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %542) #4, !dbg !24
  %544 = shufflevector <1 x i8> %302, <1 x i8> %304, <2 x i32> <i32 0, i32 1>, !dbg !24
  %545 = bitcast <2 x i8> %544 to i16, !dbg !24
  %546 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %545) #4, !dbg !24
  %547 = shufflevector <1 x i8> %306, <1 x i8> %308, <2 x i32> <i32 0, i32 1>, !dbg !24
  %548 = bitcast <2 x i8> %547 to i16, !dbg !24
  %549 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %548) #4, !dbg !24
  %550 = shufflevector <1 x i8> %310, <1 x i8> %312, <2 x i32> <i32 0, i32 1>, !dbg !24
  %551 = bitcast <2 x i8> %550 to i16, !dbg !24
  %552 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %551) #4, !dbg !24
  %553 = shufflevector <1 x i8> %314, <1 x i8> %316, <2 x i32> <i32 0, i32 1>, !dbg !24
  %554 = bitcast <2 x i8> %553 to i16, !dbg !24
  %555 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %554) #4, !dbg !24
  %556 = shufflevector <1 x i8> %318, <1 x i8> %320, <2 x i32> <i32 0, i32 1>, !dbg !24
  %557 = bitcast <2 x i8> %556 to i16, !dbg !24
  %558 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %557) #4, !dbg !24
  %559 = shufflevector <1 x i8> %322, <1 x i8> %324, <2 x i32> <i32 0, i32 1>, !dbg !24
  %560 = bitcast <2 x i8> %559 to i16, !dbg !24
  %561 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %560) #4, !dbg !24
  %562 = shufflevector <1 x i8> %326, <1 x i8> %328, <2 x i32> <i32 0, i32 1>, !dbg !24
  %563 = bitcast <2 x i8> %562 to i16, !dbg !24
  %564 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %563) #4, !dbg !24
  %565 = shufflevector <1 x i8> %330, <1 x i8> %332, <2 x i32> <i32 0, i32 1>, !dbg !24
  %566 = bitcast <2 x i8> %565 to i16, !dbg !24
  %567 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %566) #4, !dbg !24
  %568 = shufflevector <1 x i8> %334, <1 x i8> %336, <2 x i32> <i32 0, i32 1>, !dbg !24
  %569 = bitcast <2 x i8> %568 to i16, !dbg !24
  %570 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %569) #4, !dbg !24
  %571 = shufflevector <1 x i8> %338, <1 x i8> %340, <2 x i32> <i32 0, i32 1>, !dbg !24
  %572 = bitcast <2 x i8> %571 to i16, !dbg !24
  %573 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %572) #4, !dbg !24
  %574 = shufflevector <1 x i8> %342, <1 x i8> %344, <2 x i32> <i32 0, i32 1>, !dbg !24
  %575 = bitcast <2 x i8> %574 to i16, !dbg !24
  %576 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %575) #4, !dbg !24
  %577 = shufflevector <1 x i8> %346, <1 x i8> %348, <2 x i32> <i32 0, i32 1>, !dbg !24
  %578 = bitcast <2 x i8> %577 to i16, !dbg !24
  %579 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %578) #4, !dbg !24
  %580 = shufflevector <1 x i8> %350, <1 x i8> %352, <2 x i32> <i32 0, i32 1>, !dbg !24
  %581 = bitcast <2 x i8> %580 to i16, !dbg !24
  %582 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %581) #4, !dbg !24
  %583 = shufflevector <1 x i8> %354, <1 x i8> %356, <2 x i32> <i32 0, i32 1>, !dbg !24
  %584 = bitcast <2 x i8> %583 to i16, !dbg !24
  %585 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %584) #4, !dbg !24
  %586 = shufflevector <1 x i8> %358, <1 x i8> %360, <2 x i32> <i32 0, i32 1>, !dbg !24
  %587 = bitcast <2 x i8> %586 to i16, !dbg !24
  %588 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %587) #4, !dbg !24
  %589 = shufflevector <1 x i8> %362, <1 x i8> %364, <2 x i32> <i32 0, i32 1>, !dbg !24
  %590 = bitcast <2 x i8> %589 to i16, !dbg !24
  %591 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %590) #4, !dbg !24
  %592 = shufflevector <1 x i8> %366, <1 x i8> %368, <2 x i32> <i32 0, i32 1>, !dbg !24
  %593 = bitcast <2 x i8> %592 to i16, !dbg !24
  %594 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %593) #4, !dbg !24
  %595 = shufflevector <1 x i8> %370, <1 x i8> %372, <2 x i32> <i32 0, i32 1>, !dbg !24
  %596 = bitcast <2 x i8> %595 to i16, !dbg !24
  %597 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %596) #4, !dbg !24
  %598 = shufflevector <1 x i8> %374, <1 x i8> %376, <2 x i32> <i32 0, i32 1>, !dbg !24
  %599 = bitcast <2 x i8> %598 to i16, !dbg !24
  %600 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %599) #4, !dbg !24
  %601 = shufflevector <1 x i8> %378, <1 x i8> %380, <2 x i32> <i32 0, i32 1>, !dbg !24
  %602 = bitcast <2 x i8> %601 to i16, !dbg !24
  %603 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %602) #4, !dbg !24
  %604 = shufflevector <1 x i8> %382, <1 x i8> %384, <2 x i32> <i32 0, i32 1>, !dbg !24
  %605 = bitcast <2 x i8> %604 to i16, !dbg !24
  %606 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %605) #4, !dbg !24
  %607 = shufflevector <1 x i8> %386, <1 x i8> %388, <2 x i32> <i32 0, i32 1>, !dbg !24
  %608 = bitcast <2 x i8> %607 to i16, !dbg !24
  %609 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %608) #4, !dbg !24
  %610 = shufflevector <1 x i8> %390, <1 x i8> %392, <2 x i32> <i32 0, i32 1>, !dbg !24
  %611 = bitcast <2 x i8> %610 to i16, !dbg !24
  %612 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %611) #4, !dbg !24
  %613 = shufflevector <1 x i8> %394, <1 x i8> %396, <2 x i32> <i32 0, i32 1>, !dbg !24
  %614 = bitcast <2 x i8> %613 to i16, !dbg !24
  %615 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %614) #4, !dbg !24
  %616 = shufflevector <1 x i8> %398, <1 x i8> %400, <2 x i32> <i32 0, i32 1>, !dbg !24
  %617 = bitcast <2 x i8> %616 to i16, !dbg !24
  %618 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %617) #4, !dbg !24
  %619 = bitcast <2 x half> %459 to i32, !dbg !24
  %620 = bitcast <2 x half> %461 to i32, !dbg !24
  %621 = bitcast <2 x half> %463 to i32, !dbg !24
  %622 = bitcast <2 x half> %465 to i32, !dbg !24
  %623 = bitcast <2 x half> %460 to i32, !dbg !24
  %624 = bitcast <2 x half> %462 to i32, !dbg !24
  %625 = bitcast <2 x half> %464 to i32, !dbg !24
  %626 = bitcast <2 x half> %466 to i32, !dbg !24
  %627 = bitcast <2 x half> %467 to i32, !dbg !24
  %628 = bitcast <2 x half> %469 to i32, !dbg !24
  %629 = bitcast <2 x half> %471 to i32, !dbg !24
  %630 = bitcast <2 x half> %473 to i32, !dbg !24
  %631 = bitcast <2 x half> %468 to i32, !dbg !24
  %632 = bitcast <2 x half> %470 to i32, !dbg !24
  %633 = bitcast <2 x half> %472 to i32, !dbg !24
  %634 = bitcast <2 x half> %474 to i32, !dbg !24
  %635 = bitcast <2 x half> %475 to i32, !dbg !24
  %636 = bitcast <2 x half> %477 to i32, !dbg !24
  %637 = bitcast <2 x half> %479 to i32, !dbg !24
  %638 = bitcast <2 x half> %481 to i32, !dbg !24
  %639 = bitcast <2 x half> %476 to i32, !dbg !24
  %640 = bitcast <2 x half> %478 to i32, !dbg !24
  %641 = bitcast <2 x half> %480 to i32, !dbg !24
  %642 = bitcast <2 x half> %482 to i32, !dbg !24
  %643 = bitcast <2 x half> %483 to i32, !dbg !24
  %644 = bitcast <2 x half> %485 to i32, !dbg !24
  %645 = bitcast <2 x half> %487 to i32, !dbg !24
  %646 = bitcast <2 x half> %489 to i32, !dbg !24
  %647 = bitcast <2 x half> %484 to i32, !dbg !24
  %648 = bitcast <2 x half> %486 to i32, !dbg !24
  %649 = bitcast <2 x half> %488 to i32, !dbg !24
  %650 = bitcast <2 x half> %490 to i32, !dbg !24
  %651 = bitcast <2 x half> %491 to i32, !dbg !24
  %652 = bitcast <2 x half> %493 to i32, !dbg !24
  %653 = bitcast <2 x half> %495 to i32, !dbg !24
  %654 = bitcast <2 x half> %497 to i32, !dbg !24
  %655 = bitcast <2 x half> %492 to i32, !dbg !24
  %656 = bitcast <2 x half> %494 to i32, !dbg !24
  %657 = bitcast <2 x half> %496 to i32, !dbg !24
  %658 = bitcast <2 x half> %498 to i32, !dbg !24
  %659 = bitcast <2 x half> %499 to i32, !dbg !24
  %660 = bitcast <2 x half> %501 to i32, !dbg !24
  %661 = bitcast <2 x half> %503 to i32, !dbg !24
  %662 = bitcast <2 x half> %505 to i32, !dbg !24
  %663 = bitcast <2 x half> %500 to i32, !dbg !24
  %664 = bitcast <2 x half> %502 to i32, !dbg !24
  %665 = bitcast <2 x half> %504 to i32, !dbg !24
  %666 = bitcast <2 x half> %506 to i32, !dbg !24
  %667 = bitcast <2 x half> %507 to i32, !dbg !24
  %668 = bitcast <2 x half> %509 to i32, !dbg !24
  %669 = bitcast <2 x half> %511 to i32, !dbg !24
  %670 = bitcast <2 x half> %513 to i32, !dbg !24
  %671 = bitcast <2 x half> %508 to i32, !dbg !24
  %672 = bitcast <2 x half> %510 to i32, !dbg !24
  %673 = bitcast <2 x half> %512 to i32, !dbg !24
  %674 = bitcast <2 x half> %514 to i32, !dbg !24
  %675 = bitcast <2 x half> %515 to i32, !dbg !24
  %676 = bitcast <2 x half> %517 to i32, !dbg !24
  %677 = bitcast <2 x half> %519 to i32, !dbg !24
  %678 = bitcast <2 x half> %521 to i32, !dbg !24
  %679 = bitcast <2 x half> %516 to i32, !dbg !24
  %680 = bitcast <2 x half> %518 to i32, !dbg !24
  %681 = bitcast <2 x half> %520 to i32, !dbg !24
  %682 = bitcast <2 x half> %522 to i32, !dbg !24
  %683 = bitcast <2 x half> %525 to i32, !dbg !24
  %684 = bitcast <2 x half> %531 to i32, !dbg !24
  %685 = bitcast <2 x half> %528 to i32, !dbg !24
  %686 = bitcast <2 x half> %534 to i32, !dbg !24
  %687 = bitcast <2 x half> %537 to i32, !dbg !24
  %688 = bitcast <2 x half> %543 to i32, !dbg !24
  %689 = bitcast <2 x half> %540 to i32, !dbg !24
  %690 = bitcast <2 x half> %546 to i32, !dbg !24
  %691 = bitcast <2 x half> %549 to i32, !dbg !24
  %692 = bitcast <2 x half> %555 to i32, !dbg !24
  %693 = bitcast <2 x half> %552 to i32, !dbg !24
  %694 = bitcast <2 x half> %558 to i32, !dbg !24
  %695 = bitcast <2 x half> %561 to i32, !dbg !24
  %696 = bitcast <2 x half> %567 to i32, !dbg !24
  %697 = bitcast <2 x half> %564 to i32, !dbg !24
  %698 = bitcast <2 x half> %570 to i32, !dbg !24
  %699 = bitcast <2 x half> %573 to i32, !dbg !24
  %700 = bitcast <2 x half> %579 to i32, !dbg !24
  %701 = bitcast <2 x half> %576 to i32, !dbg !24
  %702 = bitcast <2 x half> %582 to i32, !dbg !24
  %703 = bitcast <2 x half> %585 to i32, !dbg !24
  %704 = bitcast <2 x half> %591 to i32, !dbg !24
  %705 = bitcast <2 x half> %588 to i32, !dbg !24
  %706 = bitcast <2 x half> %594 to i32, !dbg !24
  %707 = bitcast <2 x half> %597 to i32, !dbg !24
  %708 = bitcast <2 x half> %603 to i32, !dbg !24
  %709 = bitcast <2 x half> %600 to i32, !dbg !24
  %710 = bitcast <2 x half> %606 to i32, !dbg !24
  %711 = bitcast <2 x half> %609 to i32, !dbg !24
  %712 = bitcast <2 x half> %615 to i32, !dbg !24
  %713 = bitcast <2 x half> %612 to i32, !dbg !24
  %714 = bitcast <2 x half> %618 to i32, !dbg !24
  %715 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %194, float %195, float %196, float %197, i32 %619, i32 %620, i32 %621, i32 %622, i32 %683, i32 %684) #4, !dbg !24
  %716 = extractvalue { float, float, float, float } %715, 0, !dbg !24
  %717 = extractvalue { float, float, float, float } %715, 1, !dbg !24
  %718 = extractvalue { float, float, float, float } %715, 2, !dbg !24
  %719 = extractvalue { float, float, float, float } %715, 3, !dbg !24
  %720 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %198, float %199, float %200, float %201, i32 %619, i32 %620, i32 %621, i32 %622, i32 %691, i32 %692) #4, !dbg !24
  %721 = extractvalue { float, float, float, float } %720, 0, !dbg !24
  %722 = extractvalue { float, float, float, float } %720, 1, !dbg !24
  %723 = extractvalue { float, float, float, float } %720, 2, !dbg !24
  %724 = extractvalue { float, float, float, float } %720, 3, !dbg !24
  %725 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %202, float %203, float %204, float %205, i32 %619, i32 %620, i32 %621, i32 %622, i32 %699, i32 %700) #4, !dbg !24
  %726 = extractvalue { float, float, float, float } %725, 0, !dbg !24
  %727 = extractvalue { float, float, float, float } %725, 1, !dbg !24
  %728 = extractvalue { float, float, float, float } %725, 2, !dbg !24
  %729 = extractvalue { float, float, float, float } %725, 3, !dbg !24
  %730 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %206, float %207, float %208, float %209, i32 %619, i32 %620, i32 %621, i32 %622, i32 %707, i32 %708) #4, !dbg !24
  %731 = extractvalue { float, float, float, float } %730, 0, !dbg !24
  %732 = extractvalue { float, float, float, float } %730, 1, !dbg !24
  %733 = extractvalue { float, float, float, float } %730, 2, !dbg !24
  %734 = extractvalue { float, float, float, float } %730, 3, !dbg !24
  %735 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %210, float %211, float %212, float %213, i32 %635, i32 %636, i32 %637, i32 %638, i32 %683, i32 %684) #4, !dbg !24
  %736 = extractvalue { float, float, float, float } %735, 0, !dbg !24
  %737 = extractvalue { float, float, float, float } %735, 1, !dbg !24
  %738 = extractvalue { float, float, float, float } %735, 2, !dbg !24
  %739 = extractvalue { float, float, float, float } %735, 3, !dbg !24
  %740 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %214, float %215, float %216, float %217, i32 %635, i32 %636, i32 %637, i32 %638, i32 %691, i32 %692) #4, !dbg !24
  %741 = extractvalue { float, float, float, float } %740, 0, !dbg !24
  %742 = extractvalue { float, float, float, float } %740, 1, !dbg !24
  %743 = extractvalue { float, float, float, float } %740, 2, !dbg !24
  %744 = extractvalue { float, float, float, float } %740, 3, !dbg !24
  %745 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %218, float %219, float %220, float %221, i32 %635, i32 %636, i32 %637, i32 %638, i32 %699, i32 %700) #4, !dbg !24
  %746 = extractvalue { float, float, float, float } %745, 0, !dbg !24
  %747 = extractvalue { float, float, float, float } %745, 1, !dbg !24
  %748 = extractvalue { float, float, float, float } %745, 2, !dbg !24
  %749 = extractvalue { float, float, float, float } %745, 3, !dbg !24
  %750 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %222, float %223, float %224, float %225, i32 %635, i32 %636, i32 %637, i32 %638, i32 %707, i32 %708) #4, !dbg !24
  %751 = extractvalue { float, float, float, float } %750, 0, !dbg !24
  %752 = extractvalue { float, float, float, float } %750, 1, !dbg !24
  %753 = extractvalue { float, float, float, float } %750, 2, !dbg !24
  %754 = extractvalue { float, float, float, float } %750, 3, !dbg !24
  %755 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %226, float %227, float %228, float %229, i32 %651, i32 %652, i32 %653, i32 %654, i32 %683, i32 %684) #4, !dbg !24
  %756 = extractvalue { float, float, float, float } %755, 0, !dbg !24
  %757 = extractvalue { float, float, float, float } %755, 1, !dbg !24
  %758 = extractvalue { float, float, float, float } %755, 2, !dbg !24
  %759 = extractvalue { float, float, float, float } %755, 3, !dbg !24
  %760 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %230, float %231, float %232, float %233, i32 %651, i32 %652, i32 %653, i32 %654, i32 %691, i32 %692) #4, !dbg !24
  %761 = extractvalue { float, float, float, float } %760, 0, !dbg !24
  %762 = extractvalue { float, float, float, float } %760, 1, !dbg !24
  %763 = extractvalue { float, float, float, float } %760, 2, !dbg !24
  %764 = extractvalue { float, float, float, float } %760, 3, !dbg !24
  %765 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %234, float %235, float %236, float %237, i32 %651, i32 %652, i32 %653, i32 %654, i32 %699, i32 %700) #4, !dbg !24
  %766 = extractvalue { float, float, float, float } %765, 0, !dbg !24
  %767 = extractvalue { float, float, float, float } %765, 1, !dbg !24
  %768 = extractvalue { float, float, float, float } %765, 2, !dbg !24
  %769 = extractvalue { float, float, float, float } %765, 3, !dbg !24
  %770 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %238, float %239, float %240, float %241, i32 %651, i32 %652, i32 %653, i32 %654, i32 %707, i32 %708) #4, !dbg !24
  %771 = extractvalue { float, float, float, float } %770, 0, !dbg !24
  %772 = extractvalue { float, float, float, float } %770, 1, !dbg !24
  %773 = extractvalue { float, float, float, float } %770, 2, !dbg !24
  %774 = extractvalue { float, float, float, float } %770, 3, !dbg !24
  %775 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %242, float %243, float %244, float %245, i32 %667, i32 %668, i32 %669, i32 %670, i32 %683, i32 %684) #4, !dbg !24
  %776 = extractvalue { float, float, float, float } %775, 0, !dbg !24
  %777 = extractvalue { float, float, float, float } %775, 1, !dbg !24
  %778 = extractvalue { float, float, float, float } %775, 2, !dbg !24
  %779 = extractvalue { float, float, float, float } %775, 3, !dbg !24
  %780 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %246, float %247, float %248, float %249, i32 %667, i32 %668, i32 %669, i32 %670, i32 %691, i32 %692) #4, !dbg !24
  %781 = extractvalue { float, float, float, float } %780, 0, !dbg !24
  %782 = extractvalue { float, float, float, float } %780, 1, !dbg !24
  %783 = extractvalue { float, float, float, float } %780, 2, !dbg !24
  %784 = extractvalue { float, float, float, float } %780, 3, !dbg !24
  %785 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %250, float %251, float %252, float %253, i32 %667, i32 %668, i32 %669, i32 %670, i32 %699, i32 %700) #4, !dbg !24
  %786 = extractvalue { float, float, float, float } %785, 0, !dbg !24
  %787 = extractvalue { float, float, float, float } %785, 1, !dbg !24
  %788 = extractvalue { float, float, float, float } %785, 2, !dbg !24
  %789 = extractvalue { float, float, float, float } %785, 3, !dbg !24
  %790 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %254, float %255, float %256, float %257, i32 %667, i32 %668, i32 %669, i32 %670, i32 %707, i32 %708) #4, !dbg !24
  %791 = extractvalue { float, float, float, float } %790, 0, !dbg !24
  %792 = extractvalue { float, float, float, float } %790, 1, !dbg !24
  %793 = extractvalue { float, float, float, float } %790, 2, !dbg !24
  %794 = extractvalue { float, float, float, float } %790, 3, !dbg !24
  %795 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %716, float %717, float %718, float %719, i32 %623, i32 %624, i32 %625, i32 %626, i32 %685, i32 %686) #4, !dbg !24
  %796 = extractvalue { float, float, float, float } %795, 0, !dbg !24
  %797 = extractvalue { float, float, float, float } %795, 1, !dbg !24
  %798 = extractvalue { float, float, float, float } %795, 2, !dbg !24
  %799 = extractvalue { float, float, float, float } %795, 3, !dbg !24
  %800 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %721, float %722, float %723, float %724, i32 %623, i32 %624, i32 %625, i32 %626, i32 %693, i32 %694) #4, !dbg !24
  %801 = extractvalue { float, float, float, float } %800, 0, !dbg !24
  %802 = extractvalue { float, float, float, float } %800, 1, !dbg !24
  %803 = extractvalue { float, float, float, float } %800, 2, !dbg !24
  %804 = extractvalue { float, float, float, float } %800, 3, !dbg !24
  %805 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %726, float %727, float %728, float %729, i32 %623, i32 %624, i32 %625, i32 %626, i32 %701, i32 %702) #4, !dbg !24
  %806 = extractvalue { float, float, float, float } %805, 0, !dbg !24
  %807 = extractvalue { float, float, float, float } %805, 1, !dbg !24
  %808 = extractvalue { float, float, float, float } %805, 2, !dbg !24
  %809 = extractvalue { float, float, float, float } %805, 3, !dbg !24
  %810 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %731, float %732, float %733, float %734, i32 %623, i32 %624, i32 %625, i32 %626, i32 %709, i32 %710) #4, !dbg !24
  %811 = extractvalue { float, float, float, float } %810, 0, !dbg !24
  %812 = extractvalue { float, float, float, float } %810, 1, !dbg !24
  %813 = extractvalue { float, float, float, float } %810, 2, !dbg !24
  %814 = extractvalue { float, float, float, float } %810, 3, !dbg !24
  %815 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %736, float %737, float %738, float %739, i32 %639, i32 %640, i32 %641, i32 %642, i32 %685, i32 %686) #4, !dbg !24
  %816 = extractvalue { float, float, float, float } %815, 0, !dbg !24
  %817 = extractvalue { float, float, float, float } %815, 1, !dbg !24
  %818 = extractvalue { float, float, float, float } %815, 2, !dbg !24
  %819 = extractvalue { float, float, float, float } %815, 3, !dbg !24
  %820 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %741, float %742, float %743, float %744, i32 %639, i32 %640, i32 %641, i32 %642, i32 %693, i32 %694) #4, !dbg !24
  %821 = extractvalue { float, float, float, float } %820, 0, !dbg !24
  %822 = extractvalue { float, float, float, float } %820, 1, !dbg !24
  %823 = extractvalue { float, float, float, float } %820, 2, !dbg !24
  %824 = extractvalue { float, float, float, float } %820, 3, !dbg !24
  %825 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %746, float %747, float %748, float %749, i32 %639, i32 %640, i32 %641, i32 %642, i32 %701, i32 %702) #4, !dbg !24
  %826 = extractvalue { float, float, float, float } %825, 0, !dbg !24
  %827 = extractvalue { float, float, float, float } %825, 1, !dbg !24
  %828 = extractvalue { float, float, float, float } %825, 2, !dbg !24
  %829 = extractvalue { float, float, float, float } %825, 3, !dbg !24
  %830 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %751, float %752, float %753, float %754, i32 %639, i32 %640, i32 %641, i32 %642, i32 %709, i32 %710) #4, !dbg !24
  %831 = extractvalue { float, float, float, float } %830, 0, !dbg !24
  %832 = extractvalue { float, float, float, float } %830, 1, !dbg !24
  %833 = extractvalue { float, float, float, float } %830, 2, !dbg !24
  %834 = extractvalue { float, float, float, float } %830, 3, !dbg !24
  %835 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %756, float %757, float %758, float %759, i32 %655, i32 %656, i32 %657, i32 %658, i32 %685, i32 %686) #4, !dbg !24
  %836 = extractvalue { float, float, float, float } %835, 0, !dbg !24
  %837 = extractvalue { float, float, float, float } %835, 1, !dbg !24
  %838 = extractvalue { float, float, float, float } %835, 2, !dbg !24
  %839 = extractvalue { float, float, float, float } %835, 3, !dbg !24
  %840 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %761, float %762, float %763, float %764, i32 %655, i32 %656, i32 %657, i32 %658, i32 %693, i32 %694) #4, !dbg !24
  %841 = extractvalue { float, float, float, float } %840, 0, !dbg !24
  %842 = extractvalue { float, float, float, float } %840, 1, !dbg !24
  %843 = extractvalue { float, float, float, float } %840, 2, !dbg !24
  %844 = extractvalue { float, float, float, float } %840, 3, !dbg !24
  %845 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %766, float %767, float %768, float %769, i32 %655, i32 %656, i32 %657, i32 %658, i32 %701, i32 %702) #4, !dbg !24
  %846 = extractvalue { float, float, float, float } %845, 0, !dbg !24
  %847 = extractvalue { float, float, float, float } %845, 1, !dbg !24
  %848 = extractvalue { float, float, float, float } %845, 2, !dbg !24
  %849 = extractvalue { float, float, float, float } %845, 3, !dbg !24
  %850 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %771, float %772, float %773, float %774, i32 %655, i32 %656, i32 %657, i32 %658, i32 %709, i32 %710) #4, !dbg !24
  %851 = extractvalue { float, float, float, float } %850, 0, !dbg !24
  %852 = extractvalue { float, float, float, float } %850, 1, !dbg !24
  %853 = extractvalue { float, float, float, float } %850, 2, !dbg !24
  %854 = extractvalue { float, float, float, float } %850, 3, !dbg !24
  %855 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %776, float %777, float %778, float %779, i32 %671, i32 %672, i32 %673, i32 %674, i32 %685, i32 %686) #4, !dbg !24
  %856 = extractvalue { float, float, float, float } %855, 0, !dbg !24
  %857 = extractvalue { float, float, float, float } %855, 1, !dbg !24
  %858 = extractvalue { float, float, float, float } %855, 2, !dbg !24
  %859 = extractvalue { float, float, float, float } %855, 3, !dbg !24
  %860 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %781, float %782, float %783, float %784, i32 %671, i32 %672, i32 %673, i32 %674, i32 %693, i32 %694) #4, !dbg !24
  %861 = extractvalue { float, float, float, float } %860, 0, !dbg !24
  %862 = extractvalue { float, float, float, float } %860, 1, !dbg !24
  %863 = extractvalue { float, float, float, float } %860, 2, !dbg !24
  %864 = extractvalue { float, float, float, float } %860, 3, !dbg !24
  %865 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %786, float %787, float %788, float %789, i32 %671, i32 %672, i32 %673, i32 %674, i32 %701, i32 %702) #4, !dbg !24
  %866 = extractvalue { float, float, float, float } %865, 0, !dbg !24
  %867 = extractvalue { float, float, float, float } %865, 1, !dbg !24
  %868 = extractvalue { float, float, float, float } %865, 2, !dbg !24
  %869 = extractvalue { float, float, float, float } %865, 3, !dbg !24
  %870 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %791, float %792, float %793, float %794, i32 %671, i32 %672, i32 %673, i32 %674, i32 %709, i32 %710) #4, !dbg !24
  %871 = extractvalue { float, float, float, float } %870, 0, !dbg !24
  %872 = extractvalue { float, float, float, float } %870, 1, !dbg !24
  %873 = extractvalue { float, float, float, float } %870, 2, !dbg !24
  %874 = extractvalue { float, float, float, float } %870, 3, !dbg !24
  %875 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %796, float %797, float %798, float %799, i32 %627, i32 %628, i32 %629, i32 %630, i32 %687, i32 %688) #4, !dbg !24
  %876 = extractvalue { float, float, float, float } %875, 0, !dbg !24
  %877 = extractvalue { float, float, float, float } %875, 1, !dbg !24
  %878 = extractvalue { float, float, float, float } %875, 2, !dbg !24
  %879 = extractvalue { float, float, float, float } %875, 3, !dbg !24
  %880 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %801, float %802, float %803, float %804, i32 %627, i32 %628, i32 %629, i32 %630, i32 %695, i32 %696) #4, !dbg !24
  %881 = extractvalue { float, float, float, float } %880, 0, !dbg !24
  %882 = extractvalue { float, float, float, float } %880, 1, !dbg !24
  %883 = extractvalue { float, float, float, float } %880, 2, !dbg !24
  %884 = extractvalue { float, float, float, float } %880, 3, !dbg !24
  %885 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %806, float %807, float %808, float %809, i32 %627, i32 %628, i32 %629, i32 %630, i32 %703, i32 %704) #4, !dbg !24
  %886 = extractvalue { float, float, float, float } %885, 0, !dbg !24
  %887 = extractvalue { float, float, float, float } %885, 1, !dbg !24
  %888 = extractvalue { float, float, float, float } %885, 2, !dbg !24
  %889 = extractvalue { float, float, float, float } %885, 3, !dbg !24
  %890 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %811, float %812, float %813, float %814, i32 %627, i32 %628, i32 %629, i32 %630, i32 %711, i32 %712) #4, !dbg !24
  %891 = extractvalue { float, float, float, float } %890, 0, !dbg !24
  %892 = extractvalue { float, float, float, float } %890, 1, !dbg !24
  %893 = extractvalue { float, float, float, float } %890, 2, !dbg !24
  %894 = extractvalue { float, float, float, float } %890, 3, !dbg !24
  %895 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %816, float %817, float %818, float %819, i32 %643, i32 %644, i32 %645, i32 %646, i32 %687, i32 %688) #4, !dbg !24
  %896 = extractvalue { float, float, float, float } %895, 0, !dbg !24
  %897 = extractvalue { float, float, float, float } %895, 1, !dbg !24
  %898 = extractvalue { float, float, float, float } %895, 2, !dbg !24
  %899 = extractvalue { float, float, float, float } %895, 3, !dbg !24
  %900 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %821, float %822, float %823, float %824, i32 %643, i32 %644, i32 %645, i32 %646, i32 %695, i32 %696) #4, !dbg !24
  %901 = extractvalue { float, float, float, float } %900, 0, !dbg !24
  %902 = extractvalue { float, float, float, float } %900, 1, !dbg !24
  %903 = extractvalue { float, float, float, float } %900, 2, !dbg !24
  %904 = extractvalue { float, float, float, float } %900, 3, !dbg !24
  %905 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %826, float %827, float %828, float %829, i32 %643, i32 %644, i32 %645, i32 %646, i32 %703, i32 %704) #4, !dbg !24
  %906 = extractvalue { float, float, float, float } %905, 0, !dbg !24
  %907 = extractvalue { float, float, float, float } %905, 1, !dbg !24
  %908 = extractvalue { float, float, float, float } %905, 2, !dbg !24
  %909 = extractvalue { float, float, float, float } %905, 3, !dbg !24
  %910 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %831, float %832, float %833, float %834, i32 %643, i32 %644, i32 %645, i32 %646, i32 %711, i32 %712) #4, !dbg !24
  %911 = extractvalue { float, float, float, float } %910, 0, !dbg !24
  %912 = extractvalue { float, float, float, float } %910, 1, !dbg !24
  %913 = extractvalue { float, float, float, float } %910, 2, !dbg !24
  %914 = extractvalue { float, float, float, float } %910, 3, !dbg !24
  %915 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %836, float %837, float %838, float %839, i32 %659, i32 %660, i32 %661, i32 %662, i32 %687, i32 %688) #4, !dbg !24
  %916 = extractvalue { float, float, float, float } %915, 0, !dbg !24
  %917 = extractvalue { float, float, float, float } %915, 1, !dbg !24
  %918 = extractvalue { float, float, float, float } %915, 2, !dbg !24
  %919 = extractvalue { float, float, float, float } %915, 3, !dbg !24
  %920 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %841, float %842, float %843, float %844, i32 %659, i32 %660, i32 %661, i32 %662, i32 %695, i32 %696) #4, !dbg !24
  %921 = extractvalue { float, float, float, float } %920, 0, !dbg !24
  %922 = extractvalue { float, float, float, float } %920, 1, !dbg !24
  %923 = extractvalue { float, float, float, float } %920, 2, !dbg !24
  %924 = extractvalue { float, float, float, float } %920, 3, !dbg !24
  %925 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %846, float %847, float %848, float %849, i32 %659, i32 %660, i32 %661, i32 %662, i32 %703, i32 %704) #4, !dbg !24
  %926 = extractvalue { float, float, float, float } %925, 0, !dbg !24
  %927 = extractvalue { float, float, float, float } %925, 1, !dbg !24
  %928 = extractvalue { float, float, float, float } %925, 2, !dbg !24
  %929 = extractvalue { float, float, float, float } %925, 3, !dbg !24
  %930 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %851, float %852, float %853, float %854, i32 %659, i32 %660, i32 %661, i32 %662, i32 %711, i32 %712) #4, !dbg !24
  %931 = extractvalue { float, float, float, float } %930, 0, !dbg !24
  %932 = extractvalue { float, float, float, float } %930, 1, !dbg !24
  %933 = extractvalue { float, float, float, float } %930, 2, !dbg !24
  %934 = extractvalue { float, float, float, float } %930, 3, !dbg !24
  %935 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %856, float %857, float %858, float %859, i32 %675, i32 %676, i32 %677, i32 %678, i32 %687, i32 %688) #4, !dbg !24
  %936 = extractvalue { float, float, float, float } %935, 0, !dbg !24
  %937 = extractvalue { float, float, float, float } %935, 1, !dbg !24
  %938 = extractvalue { float, float, float, float } %935, 2, !dbg !24
  %939 = extractvalue { float, float, float, float } %935, 3, !dbg !24
  %940 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %861, float %862, float %863, float %864, i32 %675, i32 %676, i32 %677, i32 %678, i32 %695, i32 %696) #4, !dbg !24
  %941 = extractvalue { float, float, float, float } %940, 0, !dbg !24
  %942 = extractvalue { float, float, float, float } %940, 1, !dbg !24
  %943 = extractvalue { float, float, float, float } %940, 2, !dbg !24
  %944 = extractvalue { float, float, float, float } %940, 3, !dbg !24
  %945 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %866, float %867, float %868, float %869, i32 %675, i32 %676, i32 %677, i32 %678, i32 %703, i32 %704) #4, !dbg !24
  %946 = extractvalue { float, float, float, float } %945, 0, !dbg !24
  %947 = extractvalue { float, float, float, float } %945, 1, !dbg !24
  %948 = extractvalue { float, float, float, float } %945, 2, !dbg !24
  %949 = extractvalue { float, float, float, float } %945, 3, !dbg !24
  %950 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %871, float %872, float %873, float %874, i32 %675, i32 %676, i32 %677, i32 %678, i32 %711, i32 %712) #4, !dbg !24
  %951 = extractvalue { float, float, float, float } %950, 0, !dbg !24
  %952 = extractvalue { float, float, float, float } %950, 1, !dbg !24
  %953 = extractvalue { float, float, float, float } %950, 2, !dbg !24
  %954 = extractvalue { float, float, float, float } %950, 3, !dbg !24
  %955 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %876, float %877, float %878, float %879, i32 %631, i32 %632, i32 %633, i32 %634, i32 %689, i32 %690) #4, !dbg !24
  %956 = extractvalue { float, float, float, float } %955, 0, !dbg !24
  %957 = extractvalue { float, float, float, float } %955, 1, !dbg !24
  %958 = extractvalue { float, float, float, float } %955, 2, !dbg !24
  %959 = extractvalue { float, float, float, float } %955, 3, !dbg !24
  %960 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %881, float %882, float %883, float %884, i32 %631, i32 %632, i32 %633, i32 %634, i32 %697, i32 %698) #4, !dbg !24
  %961 = extractvalue { float, float, float, float } %960, 0, !dbg !24
  %962 = extractvalue { float, float, float, float } %960, 1, !dbg !24
  %963 = extractvalue { float, float, float, float } %960, 2, !dbg !24
  %964 = extractvalue { float, float, float, float } %960, 3, !dbg !24
  %965 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %886, float %887, float %888, float %889, i32 %631, i32 %632, i32 %633, i32 %634, i32 %705, i32 %706) #4, !dbg !24
  %966 = extractvalue { float, float, float, float } %965, 0, !dbg !24
  %967 = extractvalue { float, float, float, float } %965, 1, !dbg !24
  %968 = extractvalue { float, float, float, float } %965, 2, !dbg !24
  %969 = extractvalue { float, float, float, float } %965, 3, !dbg !24
  %970 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %891, float %892, float %893, float %894, i32 %631, i32 %632, i32 %633, i32 %634, i32 %713, i32 %714) #4, !dbg !24
  %971 = extractvalue { float, float, float, float } %970, 0, !dbg !24
  %972 = extractvalue { float, float, float, float } %970, 1, !dbg !24
  %973 = extractvalue { float, float, float, float } %970, 2, !dbg !24
  %974 = extractvalue { float, float, float, float } %970, 3, !dbg !24
  %975 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %896, float %897, float %898, float %899, i32 %647, i32 %648, i32 %649, i32 %650, i32 %689, i32 %690) #4, !dbg !24
  %976 = extractvalue { float, float, float, float } %975, 0, !dbg !24
  %977 = extractvalue { float, float, float, float } %975, 1, !dbg !24
  %978 = extractvalue { float, float, float, float } %975, 2, !dbg !24
  %979 = extractvalue { float, float, float, float } %975, 3, !dbg !24
  %980 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %901, float %902, float %903, float %904, i32 %647, i32 %648, i32 %649, i32 %650, i32 %697, i32 %698) #4, !dbg !24
  %981 = extractvalue { float, float, float, float } %980, 0, !dbg !24
  %982 = extractvalue { float, float, float, float } %980, 1, !dbg !24
  %983 = extractvalue { float, float, float, float } %980, 2, !dbg !24
  %984 = extractvalue { float, float, float, float } %980, 3, !dbg !24
  %985 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %906, float %907, float %908, float %909, i32 %647, i32 %648, i32 %649, i32 %650, i32 %705, i32 %706) #4, !dbg !24
  %986 = extractvalue { float, float, float, float } %985, 0, !dbg !24
  %987 = extractvalue { float, float, float, float } %985, 1, !dbg !24
  %988 = extractvalue { float, float, float, float } %985, 2, !dbg !24
  %989 = extractvalue { float, float, float, float } %985, 3, !dbg !24
  %990 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %911, float %912, float %913, float %914, i32 %647, i32 %648, i32 %649, i32 %650, i32 %713, i32 %714) #4, !dbg !24
  %991 = extractvalue { float, float, float, float } %990, 0, !dbg !24
  %992 = extractvalue { float, float, float, float } %990, 1, !dbg !24
  %993 = extractvalue { float, float, float, float } %990, 2, !dbg !24
  %994 = extractvalue { float, float, float, float } %990, 3, !dbg !24
  %995 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %916, float %917, float %918, float %919, i32 %663, i32 %664, i32 %665, i32 %666, i32 %689, i32 %690) #4, !dbg !24
  %996 = extractvalue { float, float, float, float } %995, 0, !dbg !24
  %997 = extractvalue { float, float, float, float } %995, 1, !dbg !24
  %998 = extractvalue { float, float, float, float } %995, 2, !dbg !24
  %999 = extractvalue { float, float, float, float } %995, 3, !dbg !24
  %1000 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %921, float %922, float %923, float %924, i32 %663, i32 %664, i32 %665, i32 %666, i32 %697, i32 %698) #4, !dbg !24
  %1001 = extractvalue { float, float, float, float } %1000, 0, !dbg !24
  %1002 = extractvalue { float, float, float, float } %1000, 1, !dbg !24
  %1003 = extractvalue { float, float, float, float } %1000, 2, !dbg !24
  %1004 = extractvalue { float, float, float, float } %1000, 3, !dbg !24
  %1005 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %926, float %927, float %928, float %929, i32 %663, i32 %664, i32 %665, i32 %666, i32 %705, i32 %706) #4, !dbg !24
  %1006 = extractvalue { float, float, float, float } %1005, 0, !dbg !24
  %1007 = extractvalue { float, float, float, float } %1005, 1, !dbg !24
  %1008 = extractvalue { float, float, float, float } %1005, 2, !dbg !24
  %1009 = extractvalue { float, float, float, float } %1005, 3, !dbg !24
  %1010 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %931, float %932, float %933, float %934, i32 %663, i32 %664, i32 %665, i32 %666, i32 %713, i32 %714) #4, !dbg !24
  %1011 = extractvalue { float, float, float, float } %1010, 0, !dbg !24
  %1012 = extractvalue { float, float, float, float } %1010, 1, !dbg !24
  %1013 = extractvalue { float, float, float, float } %1010, 2, !dbg !24
  %1014 = extractvalue { float, float, float, float } %1010, 3, !dbg !24
  %1015 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %936, float %937, float %938, float %939, i32 %679, i32 %680, i32 %681, i32 %682, i32 %689, i32 %690) #4, !dbg !24
  %1016 = extractvalue { float, float, float, float } %1015, 0, !dbg !24
  %1017 = extractvalue { float, float, float, float } %1015, 1, !dbg !24
  %1018 = extractvalue { float, float, float, float } %1015, 2, !dbg !24
  %1019 = extractvalue { float, float, float, float } %1015, 3, !dbg !24
  %1020 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %941, float %942, float %943, float %944, i32 %679, i32 %680, i32 %681, i32 %682, i32 %697, i32 %698) #4, !dbg !24
  %1021 = extractvalue { float, float, float, float } %1020, 0, !dbg !24
  %1022 = extractvalue { float, float, float, float } %1020, 1, !dbg !24
  %1023 = extractvalue { float, float, float, float } %1020, 2, !dbg !24
  %1024 = extractvalue { float, float, float, float } %1020, 3, !dbg !24
  %1025 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %946, float %947, float %948, float %949, i32 %679, i32 %680, i32 %681, i32 %682, i32 %705, i32 %706) #4, !dbg !24
  %1026 = extractvalue { float, float, float, float } %1025, 0, !dbg !24
  %1027 = extractvalue { float, float, float, float } %1025, 1, !dbg !24
  %1028 = extractvalue { float, float, float, float } %1025, 2, !dbg !24
  %1029 = extractvalue { float, float, float, float } %1025, 3, !dbg !24
  %1030 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %951, float %952, float %953, float %954, i32 %679, i32 %680, i32 %681, i32 %682, i32 %713, i32 %714) #4, !dbg !24
  %1031 = extractvalue { float, float, float, float } %1030, 0, !dbg !24
  %1032 = extractvalue { float, float, float, float } %1030, 1, !dbg !24
  %1033 = extractvalue { float, float, float, float } %1030, 2, !dbg !24
  %1034 = extractvalue { float, float, float, float } %1030, 3, !dbg !24
  %1035 = add i32 %193, 1, !dbg !20
  %1036 = icmp sgt i32 %1035, 1, !dbg !20
  %1037 = select i1 %1036, i32 0, i32 %1035, !dbg !20
  %1038 = shl i32 %258, 6, !dbg !25
  %1039 = add nuw i32 %1038, 128, !dbg !25
  %1040 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %1037, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  %1041 = and i1 %24, %259, !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 12288;", "b,r"(i1 %1041, ptr addrspace(3) %1040) #4, !dbg !20
  %1042 = shl i32 %1037, 13, !dbg !21
  %1043 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %1042, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %1044 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !21
  %1045 = extractvalue { i32, i1 } %1044, 1, !dbg !21
  %1046 = and i1 %259, %1045, !dbg !21
  %1047 = and i1 %22, %1046, !dbg !21
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %1047, ptr addrspace(3) %1043, ptr %25, i32 %1039, i32 %37, ptr addrspace(3) %1040) #4, !dbg !21
  %1048 = shl i32 %1037, 12, !dbg !22
  %1049 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %1048, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %1050 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %1051 = extractvalue { i32, i1 } %1050, 1, !dbg !22
  %1052 = and i1 %259, %1051, !dbg !22
  %1053 = and i1 %22, %1052, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %1053, ptr addrspace(3) %1049, ptr %30, i32 %38, i32 %1039, ptr addrspace(3) %1040) #4, !dbg !22
  %1054 = add nuw nsw i32 %258, 1, !dbg !20
  %exitcond.not = icmp eq i32 %1054, %36, !dbg !20
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %190, !dbg !20

._crit_edge.loopexit:                             ; preds = %190
  %1055 = insertelement <64 x float> poison, float %956, i64 0, !dbg !26
  %1056 = insertelement <64 x float> %1055, float %957, i64 1, !dbg !26
  %1057 = insertelement <64 x float> %1056, float %958, i64 2, !dbg !26
  %1058 = insertelement <64 x float> %1057, float %959, i64 3, !dbg !26
  %1059 = insertelement <64 x float> %1058, float %961, i64 4, !dbg !26
  %1060 = insertelement <64 x float> %1059, float %962, i64 5, !dbg !26
  %1061 = insertelement <64 x float> %1060, float %963, i64 6, !dbg !26
  %1062 = insertelement <64 x float> %1061, float %964, i64 7, !dbg !26
  %1063 = insertelement <64 x float> %1062, float %966, i64 8, !dbg !26
  %1064 = insertelement <64 x float> %1063, float %967, i64 9, !dbg !26
  %1065 = insertelement <64 x float> %1064, float %968, i64 10, !dbg !26
  %1066 = insertelement <64 x float> %1065, float %969, i64 11, !dbg !26
  %1067 = insertelement <64 x float> %1066, float %971, i64 12, !dbg !26
  %1068 = insertelement <64 x float> %1067, float %972, i64 13, !dbg !26
  %1069 = insertelement <64 x float> %1068, float %973, i64 14, !dbg !26
  %1070 = insertelement <64 x float> %1069, float %974, i64 15, !dbg !26
  %1071 = insertelement <64 x float> %1070, float %976, i64 16, !dbg !26
  %1072 = insertelement <64 x float> %1071, float %977, i64 17, !dbg !26
  %1073 = insertelement <64 x float> %1072, float %978, i64 18, !dbg !26
  %1074 = insertelement <64 x float> %1073, float %979, i64 19, !dbg !26
  %1075 = insertelement <64 x float> %1074, float %981, i64 20, !dbg !26
  %1076 = insertelement <64 x float> %1075, float %982, i64 21, !dbg !26
  %1077 = insertelement <64 x float> %1076, float %983, i64 22, !dbg !26
  %1078 = insertelement <64 x float> %1077, float %984, i64 23, !dbg !26
  %1079 = insertelement <64 x float> %1078, float %986, i64 24, !dbg !26
  %1080 = insertelement <64 x float> %1079, float %987, i64 25, !dbg !26
  %1081 = insertelement <64 x float> %1080, float %988, i64 26, !dbg !26
  %1082 = insertelement <64 x float> %1081, float %989, i64 27, !dbg !26
  %1083 = insertelement <64 x float> %1082, float %991, i64 28, !dbg !26
  %1084 = insertelement <64 x float> %1083, float %992, i64 29, !dbg !26
  %1085 = insertelement <64 x float> %1084, float %993, i64 30, !dbg !26
  %1086 = insertelement <64 x float> %1085, float %994, i64 31, !dbg !26
  %1087 = insertelement <64 x float> %1086, float %996, i64 32, !dbg !26
  %1088 = insertelement <64 x float> %1087, float %997, i64 33, !dbg !26
  %1089 = insertelement <64 x float> %1088, float %998, i64 34, !dbg !26
  %1090 = insertelement <64 x float> %1089, float %999, i64 35, !dbg !26
  %1091 = insertelement <64 x float> %1090, float %1001, i64 36, !dbg !26
  %1092 = insertelement <64 x float> %1091, float %1002, i64 37, !dbg !26
  %1093 = insertelement <64 x float> %1092, float %1003, i64 38, !dbg !26
  %1094 = insertelement <64 x float> %1093, float %1004, i64 39, !dbg !26
  %1095 = insertelement <64 x float> %1094, float %1006, i64 40, !dbg !26
  %1096 = insertelement <64 x float> %1095, float %1007, i64 41, !dbg !26
  %1097 = insertelement <64 x float> %1096, float %1008, i64 42, !dbg !26
  %1098 = insertelement <64 x float> %1097, float %1009, i64 43, !dbg !26
  %1099 = insertelement <64 x float> %1098, float %1011, i64 44, !dbg !26
  %1100 = insertelement <64 x float> %1099, float %1012, i64 45, !dbg !26
  %1101 = insertelement <64 x float> %1100, float %1013, i64 46, !dbg !26
  %1102 = insertelement <64 x float> %1101, float %1014, i64 47, !dbg !26
  %1103 = insertelement <64 x float> %1102, float %1016, i64 48, !dbg !26
  %1104 = insertelement <64 x float> %1103, float %1017, i64 49, !dbg !26
  %1105 = insertelement <64 x float> %1104, float %1018, i64 50, !dbg !26
  %1106 = insertelement <64 x float> %1105, float %1019, i64 51, !dbg !26
  %1107 = insertelement <64 x float> %1106, float %1021, i64 52, !dbg !26
  %1108 = insertelement <64 x float> %1107, float %1022, i64 53, !dbg !26
  %1109 = insertelement <64 x float> %1108, float %1023, i64 54, !dbg !26
  %1110 = insertelement <64 x float> %1109, float %1024, i64 55, !dbg !26
  %1111 = insertelement <64 x float> %1110, float %1026, i64 56, !dbg !26
  %1112 = insertelement <64 x float> %1111, float %1027, i64 57, !dbg !26
  %1113 = insertelement <64 x float> %1112, float %1028, i64 58, !dbg !26
  %1114 = insertelement <64 x float> %1113, float %1029, i64 59, !dbg !26
  %1115 = insertelement <64 x float> %1114, float %1031, i64 60, !dbg !26
  %1116 = insertelement <64 x float> %1115, float %1032, i64 61, !dbg !26
  %1117 = insertelement <64 x float> %1116, float %1033, i64 62, !dbg !26
  %1118 = insertelement <64 x float> %1117, float %1034, i64 63, !dbg !26
  %1119 = fptrunc <64 x float> %1118 to <64 x half>, !dbg !26
  %1120 = bitcast <64 x half> %1119 to <32 x i32>, !dbg !23
  br label %._crit_edge, !dbg !12

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi106 = phi i32 [ %.pre105, %.._crit_edge_crit_edge ], [ %180, %._crit_edge.loopexit ], !dbg !23
  %.pre-phi102 = phi i32 [ %.pre101, %.._crit_edge_crit_edge ], [ %72, %._crit_edge.loopexit ], !dbg !23
  %.pre-phi98 = phi i32 [ %.pre97, %.._crit_edge_crit_edge ], [ %69, %._crit_edge.loopexit ], !dbg !23
  %.pre-phi = phi i32 [ %.pre, %.._crit_edge_crit_edge ], [ %66, %._crit_edge.loopexit ], !dbg !23
  %.bc232 = phi <32 x i32> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %1120, %._crit_edge.loopexit ]
  %1121 = addrspacecast ptr addrspace(1) %33 to ptr, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24584)) #4, !dbg !20
  %1122 = and i32 %21, 3, !dbg !23
  %1123 = mul nuw nsw i32 %1122, 72, !dbg !23
  %1124 = icmp eq i32 %.pre-phi, 0, !dbg !23
  %1125 = select i1 %1124, i32 0, i32 288, !dbg !23
  %1126 = xor i32 %1125, %1123, !dbg !23
  %1127 = shl nuw nsw i32 %21, 6, !dbg !23
  %1128 = and i32 %1127, 512, !dbg !23
  %1129 = or disjoint i32 %1126, %1128, !dbg !23
  %1130 = or disjoint i32 %.pre-phi102, %.pre-phi98, !dbg !23
  %1131 = or disjoint i32 %1130, %.pre-phi106, !dbg !23
  %1132 = xor i32 %1131, %1129, !dbg !23
  %1133 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1132, !dbg !23
  %.extract171 = extractelement <32 x i32> %.bc232, i64 0, !dbg !23
  %.extract173 = extractelement <32 x i32> %.bc232, i64 1, !dbg !23
  %.extract175 = extractelement <32 x i32> %.bc232, i64 2, !dbg !23
  %.extract177 = extractelement <32 x i32> %.bc232, i64 3, !dbg !23
  %1134 = ptrtoint ptr addrspace(3) %1133 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %1134, i32 %.extract171, i32 %.extract173, i32 %.extract175, i32 %.extract177) #4, !dbg !23
  %1135 = xor i32 %1132, 32, !dbg !23
  %1136 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1135, !dbg !23
  %.extract179 = extractelement <32 x i32> %.bc232, i64 4, !dbg !23
  %.extract181 = extractelement <32 x i32> %.bc232, i64 5, !dbg !23
  %.extract183 = extractelement <32 x i32> %.bc232, i64 6, !dbg !23
  %.extract185 = extractelement <32 x i32> %.bc232, i64 7, !dbg !23
  %1137 = ptrtoint ptr addrspace(3) %1136 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %1137, i32 %.extract179, i32 %.extract181, i32 %.extract183, i32 %.extract185) #4, !dbg !23
  %1138 = getelementptr inbounds nuw i8, ptr addrspace(3) %1133, i32 4096, !dbg !23
  %.extract187 = extractelement <32 x i32> %.bc232, i64 8, !dbg !23
  %.extract189 = extractelement <32 x i32> %.bc232, i64 9, !dbg !23
  %.extract191 = extractelement <32 x i32> %.bc232, i64 10, !dbg !23
  %.extract193 = extractelement <32 x i32> %.bc232, i64 11, !dbg !23
  %1139 = ptrtoint ptr addrspace(3) %1138 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %1139, i32 %.extract187, i32 %.extract189, i32 %.extract191, i32 %.extract193) #4, !dbg !23
  %1140 = xor i32 %1132, 2080, !dbg !23
  %1141 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1140, !dbg !23
  %.extract195 = extractelement <32 x i32> %.bc232, i64 12, !dbg !23
  %.extract197 = extractelement <32 x i32> %.bc232, i64 13, !dbg !23
  %.extract199 = extractelement <32 x i32> %.bc232, i64 14, !dbg !23
  %.extract201 = extractelement <32 x i32> %.bc232, i64 15, !dbg !23
  %1142 = ptrtoint ptr addrspace(3) %1141 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %1142, i32 %.extract195, i32 %.extract197, i32 %.extract199, i32 %.extract201) #4, !dbg !23
  %1143 = getelementptr inbounds nuw i8, ptr addrspace(3) %1133, i32 8192, !dbg !23
  %.extract203 = extractelement <32 x i32> %.bc232, i64 16, !dbg !23
  %.extract205 = extractelement <32 x i32> %.bc232, i64 17, !dbg !23
  %.extract207 = extractelement <32 x i32> %.bc232, i64 18, !dbg !23
  %.extract209 = extractelement <32 x i32> %.bc232, i64 19, !dbg !23
  %1144 = ptrtoint ptr addrspace(3) %1143 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %1144, i32 %.extract203, i32 %.extract205, i32 %.extract207, i32 %.extract209) #4, !dbg !23
  %1145 = xor i32 %1132, 4128, !dbg !23
  %1146 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1145, !dbg !23
  %.extract211 = extractelement <32 x i32> %.bc232, i64 20, !dbg !23
  %.extract213 = extractelement <32 x i32> %.bc232, i64 21, !dbg !23
  %.extract215 = extractelement <32 x i32> %.bc232, i64 22, !dbg !23
  %.extract217 = extractelement <32 x i32> %.bc232, i64 23, !dbg !23
  %1147 = ptrtoint ptr addrspace(3) %1146 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %1147, i32 %.extract211, i32 %.extract213, i32 %.extract215, i32 %.extract217) #4, !dbg !23
  %1148 = getelementptr inbounds nuw i8, ptr addrspace(3) %1133, i32 12288, !dbg !23
  %.extract219 = extractelement <32 x i32> %.bc232, i64 24, !dbg !23
  %.extract221 = extractelement <32 x i32> %.bc232, i64 25, !dbg !23
  %.extract223 = extractelement <32 x i32> %.bc232, i64 26, !dbg !23
  %.extract225 = extractelement <32 x i32> %.bc232, i64 27, !dbg !23
  %1149 = ptrtoint ptr addrspace(3) %1148 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %1149, i32 %.extract219, i32 %.extract221, i32 %.extract223, i32 %.extract225) #4, !dbg !23
  %1150 = xor i32 %1132, 6176, !dbg !23
  %1151 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1150, !dbg !23
  %.extract227 = extractelement <32 x i32> %.bc232, i64 28, !dbg !23
  %.extract229 = extractelement <32 x i32> %.bc232, i64 29, !dbg !23
  %.extract231 = extractelement <32 x i32> %.bc232, i64 30, !dbg !23
  %.extract233 = extractelement <32 x i32> %.bc232, i64 31, !dbg !23
  %1152 = ptrtoint ptr addrspace(3) %1151 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %1152, i32 %.extract227, i32 %.extract229, i32 %.extract231, i32 %.extract233) #4, !dbg !23
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %1153 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !23
  %1154 = extractvalue { i32, i1 } %1153, 1, !dbg !23
  %1155 = and i1 %22, %1154, !dbg !23
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1155, ptr %1121, i32 %38, i32 %37, ptr addrspace(3) @global_smem) #4, !dbg !23
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !23
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 1, -2147483648) i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 1, 65536) i32 @llvm.nvvm.read.ptx.sreg.nctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.bar.warp.sync(i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare { i32, i1 } @llvm.nvvm.elect.sync(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.commit.group() #4

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 immarg) #4

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "matmul-with-tma-v4.py", directory: "/home/ubuntu/triton_runner/examples/triton_kernel")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "matmul_kernel_make_tensor_desciptor", linkageName: "matmul_kernel_make_tensor_desciptor", scope: !1, file: !1, line: 12, type: !6, scopeLine: 12, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 17, column: 26, scope: !5)
!9 = !DILocation(line: 18, column: 26, scope: !5)
!10 = !DILocation(line: 21, column: 8, scope: !5)
!11 = !DILocation(line: 27, column: 8, scope: !5)
!12 = !DILocation(line: 33, column: 8, scope: !5)
!13 = !DILocation(line: 40, column: 22, scope: !14, inlinedAt: !16)
!14 = distinct !DILexicalBlockFile(scope: !5, file: !15, discriminator: 0)
!15 = !DIFile(filename: "standard.py", directory: "/home/ubuntu/triton/python/triton/language")
!16 = !DILocation(line: 40, column: 30, scope: !5)
!17 = !DILocation(line: 40, column: 28, scope: !14, inlinedAt: !16)
!18 = !DILocation(line: 41, column: 33, scope: !5)
!19 = !DILocation(line: 42, column: 51, scope: !5)
!20 = !DILocation(line: 40, column: 19, scope: !5)
!21 = !DILocation(line: 41, column: 24, scope: !5)
!22 = !DILocation(line: 42, column: 24, scope: !5)
!23 = !DILocation(line: 46, column: 63, scope: !5)
!24 = !DILocation(line: 43, column: 32, scope: !5)
!25 = !DILocation(line: 41, column: 51, scope: !5)
!26 = !DILocation(line: 45, column: 33, scope: !5)
!27 = !DILocation(line: 46, column: 4, scope: !5)
