//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	matmul_kernel_make_tensor_desciptor // -- Begin function matmul_kernel_make_tensor_desciptor
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel_make_tensor_desciptor
.visible .entry matmul_kernel_make_tensor_desciptor(
	.param .u64 .ptr .global .align 1 matmul_kernel_make_tensor_desciptor_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_make_tensor_desciptor_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_make_tensor_desciptor_param_2,
	.param .u32 matmul_kernel_make_tensor_desciptor_param_3,
	.param .u32 matmul_kernel_make_tensor_desciptor_param_4,
	.param .u32 matmul_kernel_make_tensor_desciptor_param_5,
	.param .u64 .ptr .global .align 1 matmul_kernel_make_tensor_desciptor_param_6
)
.reqntid 128
{
	.reg .pred 	%p<101>;
	.reg .b16 	%rs<33>;
	.reg .b32 	%r<1256>;
	.reg .b64 	%rd<85>;
	.loc	1 15 0                          // matmul-with-tma-v3.py:15:0
$L__func_begin0:
	.loc	1 15 0                          // matmul-with-tma-v3.py:15:0

// %bb.0:
	ld.param.b64 	%rd7, [matmul_kernel_make_tensor_desciptor_param_0];
	ld.param.b64 	%rd25, [matmul_kernel_make_tensor_desciptor_param_1];
$L__tmp0:
	.loc	1 20 26                         // matmul-with-tma-v3.py:20:26
	mov.u32 	%r329, %ctaid.x;
	ld.param.b64 	%rd43, [matmul_kernel_make_tensor_desciptor_param_2];
	.loc	1 21 26                         // matmul-with-tma-v3.py:21:26
	mov.u32 	%r330, %ctaid.y;
	ld.param.b32 	%r284, [matmul_kernel_make_tensor_desciptor_param_4];
	.loc	1 24 8                          // matmul-with-tma-v3.py:24:8
	cvt.s64.s32 	%rd14, %r284;
	ld.param.b32 	%r285, [matmul_kernel_make_tensor_desciptor_param_3];
	mov.u32 	%r331, %ctaid.z;
	ld.param.b32 	%r292, [matmul_kernel_make_tensor_desciptor_param_5];
	mov.u32 	%r332, %nctaid.x;
	ld.param.b64 	%rd64, [matmul_kernel_make_tensor_desciptor_param_6];
	mov.u32 	%r333, %nctaid.y;
	mad.lo.s32 	%r334, %r331, %r333, %r330;
	mad.lo.s32 	%r335, %r334, %r332, %r329;
	mul.lo.s32 	%r336, %r335, 384;
	cvt.s64.s32 	%rd65, %r336;
	add.s64 	%rd21, %rd64, %rd65;
	mov.u32 	%r1, %tid.x;
	setp.lt.u32 	%p1, %r1, 32;
	shl.b32 	%r337, %r1, 2;
	mov.b32 	%r310, global_smem;
	add.s32 	%r280, %r310, %r337;
	mov.b32 	%r1224, 0;
	// begin inline asm
	@%p1 st.shared.b32 [ %r280 + 0 ], %r1224;
	// end inline asm
	bar.warp.sync 	-1;
	setp.eq.s32 	%p92, %r1, 0;
	cvt.u64.u32 	%rd6, %r310;
	// begin inline asm
	@%p92 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ %rd6 + 0 ], %rd7;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1;
	// end inline asm
	mov.b32 	%r282, 64;
	// begin inline asm
	@%p92 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r282;
	// end inline asm
	mov.b32 	%r1150, 128;
	// begin inline asm
	@%p92 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r1150;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r284;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r285;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ %rd6 + 0 ], 0x0, %rd14;
	// end inline asm
	mov.b32 	%r1219, 1;
	// begin inline asm
	@%p92 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r1219;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r1219;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x2;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p1 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ %rd21 + 0 ], [ %rd6 + 0 ], 0x80;
	// end inline asm
	// begin inline asm
	@%p1 fence.proxy.tensormap::generic.acquire.gpu [ %rd21 + 0 ], 0x80;
	// end inline asm
	bar.sync 	0;
	cvta.global.u64 	%rd1, %rd21;
	.loc	1 30 8                          // matmul-with-tma-v3.py:30:8
	cvt.s64.s32 	%rd32, %r292;
	add.s32 	%r338, %r336, 128;
	cvt.s64.s32 	%rd66, %r338;
	add.s64 	%rd39, %rd64, %rd66;
	bar.sync 	0;
	// begin inline asm
	@%p1 st.shared.b32 [ %r280 + 0 ], %r1224;
	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	@%p92 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ %rd6 + 0 ], %rd25;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r282;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r282;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r292;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r284;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ %rd6 + 0 ], 0x0, %rd32;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r1219;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r1219;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x2;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p1 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ %rd39 + 0 ], [ %rd6 + 0 ], 0x80;
	// end inline asm
	// begin inline asm
	@%p1 fence.proxy.tensormap::generic.acquire.gpu [ %rd39 + 0 ], 0x80;
	// end inline asm
	bar.sync 	0;
	cvta.global.u64 	%rd2, %rd39;
	.loc	1 36 8                          // matmul-with-tma-v3.py:36:8
	add.s32 	%r339, %r336, 256;
	cvt.s64.s32 	%rd67, %r339;
	add.s64 	%rd3, %rd64, %rd67;
	mul.wide.s32 	%rd50, %r292, 2;
	bar.sync 	0;
	// begin inline asm
	@%p1 st.shared.b32 [ %r280 + 0 ], %r1224;
	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	@%p92 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ %rd6 + 0 ], %rd43;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r282;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r1150;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r292;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r285;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ %rd6 + 0 ], 0x0, %rd50;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r1219;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r1219;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x6;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x3;
	// end inline asm
	// begin inline asm
	@%p92 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p1 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ %rd3 + 0 ], [ %rd6 + 0 ], 0x80;
	// end inline asm
	// begin inline asm
	@%p1 fence.proxy.tensormap::generic.acquire.gpu [ %rd3 + 0 ], 0x80;
	// end inline asm
	bar.sync 	0;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ matmul-with-tma-v3.py:43:30 ]
	add.s32 	%r340, %r284, 63;
$L__tmp2:
	.loc	1 44 33                         // matmul-with-tma-v3.py:44:33
	shl.b32 	%r1119, %r329, 7;
	.loc	1 45 51                         // matmul-with-tma-v3.py:45:51
	shl.b32 	%r1118, %r330, 6;
	.loc	1 43 19                         // matmul-with-tma-v3.py:43:19
	add.s32 	%r304, %r310, 36864;
	// begin inline asm
	@%p92 mbarrier.init.shared::cta.b64 [%r304], 1;
	// end inline asm
	bar.sync 	0;
	add.s32 	%r305, %r310, 36872;
	// begin inline asm
	@%p92 mbarrier.init.shared::cta.b64 [%r305], 1;
	// end inline asm
	bar.sync 	0;
	add.s32 	%r306, %r310, 36880;
	// begin inline asm
	@%p92 mbarrier.init.shared::cta.b64 [%r306], 1;
	// end inline asm
	add.s32 	%r307, %r310, 36896;
	// begin inline asm
	@%p92 mbarrier.init.shared::cta.b64 [%r307], 1;
	// end inline asm
	bar.sync 	0;
	add.s32 	%r308, %r310, 36904;
	// begin inline asm
	@%p92 mbarrier.init.shared::cta.b64 [%r308], 1;
	// end inline asm
	setp.gt.s32 	%p62, %r340, 63;
	and.pred 	%p54, %p92, %p62;
	// begin inline asm
	@%p54 mbarrier.arrive.expect_tx.shared.b64 _, [%r304], 8192;
	// end inline asm
	.loc	1 44 24                         // matmul-with-tma-v3.py:44:24
	bar.sync 	0;
	elect.sync 	%r344|%p63, -1;
	and.pred 	%p64, %p62, %p63;
	and.pred 	%p55, %p1, %p64;
	// begin inline asm
	@%p55 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r310], [%rd1, {%r1224, %r1119}], [%r304];
	// end inline asm
	.loc	1 43 19                         // matmul-with-tma-v3.py:43:19
	// begin inline asm
	@%p54 mbarrier.arrive.expect_tx.shared.b64 _, [%r307], 4096;
	// end inline asm
	.loc	1 45 24                         // matmul-with-tma-v3.py:45:24
	bar.sync 	0;
	elect.sync 	%r345|%p65, -1;
	and.pred 	%p66, %p62, %p65;
	and.pred 	%p57, %p1, %p66;
	add.s32 	%r315, %r310, 24576;
	// begin inline asm
	@%p57 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r315], [%rd2, {%r1118, %r1224}], [%r307];
	// end inline asm
	.loc	1 43 19                         // matmul-with-tma-v3.py:43:19
	setp.gt.s32 	%p67, %r340, 127;
	and.pred 	%p58, %p92, %p67;
	// begin inline asm
	@%p58 mbarrier.arrive.expect_tx.shared.b64 _, [%r305], 8192;
	// end inline asm
	.loc	1 44 24                         // matmul-with-tma-v3.py:44:24
	bar.sync 	0;
	elect.sync 	%r346|%p68, -1;
	and.pred 	%p69, %p67, %p68;
	and.pred 	%p59, %p1, %p69;
	add.s32 	%r320, %r310, 8192;
	// begin inline asm
	@%p59 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r320], [%rd1, {%r282, %r1119}], [%r305];
	// end inline asm
	.loc	1 43 19                         // matmul-with-tma-v3.py:43:19
	// begin inline asm
	@%p58 mbarrier.arrive.expect_tx.shared.b64 _, [%r308], 4096;
	// end inline asm
	.loc	1 45 24                         // matmul-with-tma-v3.py:45:24
	bar.sync 	0;
	elect.sync 	%r347|%p70, -1;
	and.pred 	%p71, %p67, %p70;
	and.pred 	%p61, %p1, %p71;
	add.s32 	%r325, %r310, 28672;
	// begin inline asm
	@%p61 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r325], [%rd2, {%r1118, %r282}], [%r308];
	// end inline asm
	.loc	1 43 19                         // matmul-with-tma-v3.py:43:19
	@%p62 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %.lr.ph
	.loc	1 0 19                          // matmul-with-tma-v3.py:0:19
	shr.s32 	%r341, %r340, 31;
	shr.u32 	%r342, %r341, 26;
	add.s32 	%r343, %r340, %r342;
	shr.s32 	%r2, %r343, 6;
	add.s32 	%r7, %r2, -2;
	shr.u32 	%r8, %r1, 5;
	bfe.s32 	%r388, %r1, 1, 1;
	and.b32 	%r1223, %r1, 4;
	bfe.s32 	%r389, %r1, 2, 1;
	and.b32 	%r390, %r1, 16;
	and.b32 	%r10, %r1, 32;
	and.b32 	%r11, %r1, 64;
	and.b32 	%r12, %r1, 127;
	and.b32 	%r391, %r1, 15;
	or.b32 	%r392, %r391, 144;
	xor.b32 	%r13, %r392, %r390;
	and.b32 	%r393, %r1, 31;
	or.b32 	%r394, %r393, 288;
	xor.b32 	%r14, %r394, %r10;
	or.b32 	%r395, %r391, 432;
	and.b32 	%r396, %r1, 48;
	xor.b32 	%r15, %r395, %r396;
	or.b32 	%r397, %r391, 656;
	xor.b32 	%r16, %r397, %r390;
	or.b32 	%r398, %r393, 800;
	xor.b32 	%r17, %r398, %r10;
	or.b32 	%r399, %r391, 944;
	xor.b32 	%r18, %r399, %r396;
	or.b32 	%r400, %r391, 1168;
	xor.b32 	%r19, %r400, %r390;
	or.b32 	%r401, %r393, 1312;
	xor.b32 	%r20, %r401, %r10;
	or.b32 	%r402, %r391, 1456;
	xor.b32 	%r21, %r402, %r396;
	or.b32 	%r403, %r391, 1680;
	xor.b32 	%r22, %r403, %r390;
	or.b32 	%r404, %r393, 1824;
	xor.b32 	%r23, %r404, %r10;
	or.b32 	%r405, %r391, 1968;
	xor.b32 	%r24, %r405, %r396;
	or.b32 	%r406, %r391, 2192;
	xor.b32 	%r25, %r406, %r390;
	or.b32 	%r407, %r393, 2336;
	xor.b32 	%r26, %r407, %r10;
	or.b32 	%r408, %r391, 2480;
	xor.b32 	%r27, %r408, %r396;
	or.b32 	%r409, %r391, 2704;
	xor.b32 	%r28, %r409, %r390;
	or.b32 	%r410, %r393, 2848;
	xor.b32 	%r29, %r410, %r10;
	or.b32 	%r411, %r391, 2992;
	xor.b32 	%r30, %r411, %r396;
	or.b32 	%r412, %r391, 3216;
	xor.b32 	%r31, %r412, %r390;
	or.b32 	%r413, %r393, 3360;
	xor.b32 	%r32, %r413, %r10;
	or.b32 	%r414, %r391, 3504;
	xor.b32 	%r33, %r414, %r396;
	or.b32 	%r415, %r391, 3728;
	xor.b32 	%r34, %r415, %r390;
	or.b32 	%r416, %r393, 3872;
	xor.b32 	%r35, %r416, %r10;
	or.b32 	%r417, %r391, 4016;
	xor.b32 	%r36, %r417, %r396;
	shl.b32 	%r418, %r1, 6;
	and.b32 	%r419, %r418, 64;
	and.b32 	%r420, %r388, 144;
	or.b32 	%r421, %r420, %r419;
	and.b32 	%r422, %r389, 288;
	and.b32 	%r1222, %r418, 512;
	shl.b32 	%r423, %r390, 6;
	or.b32 	%r424, %r423, %r1222;
	or.b32 	%r425, %r424, %r422;
	or.b32 	%r426, %r425, %r421;
	shl.b32 	%r427, %r10, 6;
	bfe.u32 	%r428, %r1, 6, 1;
	add.s32 	%r430, %r310, 32768;
	add.s32 	%r431, %r430, %r426;
	add.s32 	%r432, %r431, %r427;
	add.s32 	%r38, %r432, %r428;
	or.b32 	%r433, %r428, %r427;
	or.b32 	%r434, %r426, %r433;
	add.s32 	%r435, %r430, %r434;
	add.s32 	%r39, %r435, 2;
	add.s32 	%r40, %r435, 4;
	add.s32 	%r41, %r435, 6;
	add.s32 	%r42, %r435, 8;
	add.s32 	%r43, %r435, 10;
	add.s32 	%r44, %r435, 12;
	add.s32 	%r45, %r435, 14;
	or.b32 	%r436, %r419, 16;
	xor.b32 	%r437, %r436, %r420;
	or.b32 	%r438, %r1222, %r437;
	or.b32 	%r439, %r438, %r423;
	or.b32 	%r440, %r439, %r422;
	or.b32 	%r441, %r433, %r440;
	add.s32 	%r46, %r430, %r441;
	or.b32 	%r442, %r419, 18;
	xor.b32 	%r443, %r442, %r420;
	or.b32 	%r444, %r1222, %r443;
	or.b32 	%r445, %r444, %r423;
	or.b32 	%r446, %r445, %r422;
	or.b32 	%r447, %r433, %r446;
	add.s32 	%r47, %r430, %r447;
	or.b32 	%r448, %r419, 20;
	xor.b32 	%r449, %r448, %r420;
	or.b32 	%r450, %r1222, %r449;
	or.b32 	%r451, %r450, %r423;
	or.b32 	%r452, %r451, %r422;
	or.b32 	%r453, %r433, %r452;
	add.s32 	%r48, %r430, %r453;
	or.b32 	%r454, %r419, 22;
	xor.b32 	%r455, %r454, %r420;
	or.b32 	%r456, %r1222, %r455;
	or.b32 	%r457, %r456, %r423;
	or.b32 	%r458, %r457, %r422;
	or.b32 	%r459, %r433, %r458;
	add.s32 	%r49, %r430, %r459;
	or.b32 	%r460, %r419, 24;
	xor.b32 	%r461, %r460, %r420;
	or.b32 	%r462, %r1222, %r461;
	or.b32 	%r463, %r462, %r423;
	or.b32 	%r464, %r463, %r422;
	or.b32 	%r465, %r433, %r464;
	add.s32 	%r50, %r430, %r465;
	or.b32 	%r466, %r419, 26;
	xor.b32 	%r467, %r466, %r420;
	or.b32 	%r468, %r1222, %r467;
	or.b32 	%r469, %r468, %r423;
	or.b32 	%r470, %r469, %r422;
	or.b32 	%r471, %r433, %r470;
	add.s32 	%r51, %r430, %r471;
	or.b32 	%r472, %r419, 28;
	xor.b32 	%r473, %r472, %r420;
	or.b32 	%r474, %r1222, %r473;
	or.b32 	%r475, %r474, %r423;
	or.b32 	%r476, %r475, %r422;
	or.b32 	%r477, %r433, %r476;
	add.s32 	%r52, %r430, %r477;
	or.b32 	%r478, %r419, 30;
	xor.b32 	%r479, %r478, %r420;
	or.b32 	%r480, %r1222, %r479;
	or.b32 	%r481, %r480, %r423;
	or.b32 	%r482, %r481, %r422;
	or.b32 	%r483, %r433, %r482;
	add.s32 	%r53, %r430, %r483;
	or.b32 	%r484, %r421, 32;
	xor.b32 	%r485, %r484, %r422;
	or.b32 	%r486, %r1222, %r485;
	or.b32 	%r487, %r486, %r423;
	or.b32 	%r488, %r433, %r487;
	add.s32 	%r54, %r430, %r488;
	or.b32 	%r489, %r421, 34;
	xor.b32 	%r490, %r489, %r422;
	or.b32 	%r491, %r1222, %r490;
	or.b32 	%r492, %r491, %r423;
	or.b32 	%r493, %r433, %r492;
	add.s32 	%r55, %r430, %r493;
	or.b32 	%r494, %r421, 36;
	xor.b32 	%r495, %r494, %r422;
	or.b32 	%r496, %r1222, %r495;
	or.b32 	%r497, %r496, %r423;
	or.b32 	%r498, %r433, %r497;
	add.s32 	%r56, %r430, %r498;
	or.b32 	%r499, %r421, 38;
	xor.b32 	%r500, %r499, %r422;
	or.b32 	%r501, %r1222, %r500;
	or.b32 	%r502, %r501, %r423;
	or.b32 	%r503, %r433, %r502;
	add.s32 	%r57, %r430, %r503;
	or.b32 	%r504, %r421, 40;
	xor.b32 	%r505, %r504, %r422;
	or.b32 	%r506, %r1222, %r505;
	or.b32 	%r507, %r506, %r423;
	or.b32 	%r508, %r433, %r507;
	add.s32 	%r58, %r430, %r508;
	or.b32 	%r509, %r421, 42;
	xor.b32 	%r510, %r509, %r422;
	or.b32 	%r511, %r1222, %r510;
	or.b32 	%r512, %r511, %r423;
	or.b32 	%r513, %r433, %r512;
	add.s32 	%r59, %r430, %r513;
	or.b32 	%r514, %r421, 44;
	xor.b32 	%r515, %r514, %r422;
	or.b32 	%r516, %r1222, %r515;
	or.b32 	%r517, %r516, %r423;
	or.b32 	%r518, %r433, %r517;
	add.s32 	%r60, %r430, %r518;
	or.b32 	%r519, %r421, 46;
	xor.b32 	%r520, %r519, %r422;
	or.b32 	%r521, %r1222, %r520;
	or.b32 	%r522, %r521, %r423;
	or.b32 	%r523, %r433, %r522;
	add.s32 	%r61, %r430, %r523;
	or.b32 	%r524, %r419, 48;
	and.b32 	%r525, %r1, 6;
	mul.lo.s32 	%r526, %r525, 72;
	xor.b32 	%r527, %r526, %r524;
	or.b32 	%r528, %r1222, %r527;
	or.b32 	%r529, %r528, %r423;
	or.b32 	%r530, %r427, %r529;
	or.b32 	%r531, %r530, %r428;
	add.s32 	%r62, %r430, %r531;
	or.b32 	%r532, %r419, 50;
	xor.b32 	%r533, %r526, %r532;
	or.b32 	%r534, %r1222, %r533;
	or.b32 	%r535, %r534, %r423;
	or.b32 	%r536, %r427, %r535;
	or.b32 	%r537, %r536, %r428;
	add.s32 	%r63, %r430, %r537;
	or.b32 	%r538, %r419, 52;
	xor.b32 	%r539, %r526, %r538;
	or.b32 	%r540, %r1222, %r539;
	or.b32 	%r541, %r540, %r423;
	or.b32 	%r542, %r427, %r541;
	or.b32 	%r543, %r542, %r428;
	add.s32 	%r64, %r430, %r543;
	or.b32 	%r544, %r419, 54;
	xor.b32 	%r545, %r526, %r544;
	or.b32 	%r546, %r1222, %r545;
	or.b32 	%r547, %r546, %r423;
	or.b32 	%r548, %r427, %r547;
	or.b32 	%r549, %r548, %r428;
	add.s32 	%r65, %r430, %r549;
	or.b32 	%r550, %r419, 56;
	xor.b32 	%r551, %r526, %r550;
	or.b32 	%r552, %r1222, %r551;
	or.b32 	%r553, %r552, %r423;
	or.b32 	%r554, %r427, %r553;
	or.b32 	%r555, %r554, %r428;
	add.s32 	%r66, %r430, %r555;
	or.b32 	%r556, %r419, 58;
	xor.b32 	%r557, %r526, %r556;
	or.b32 	%r558, %r1222, %r557;
	or.b32 	%r559, %r558, %r423;
	or.b32 	%r560, %r427, %r559;
	or.b32 	%r561, %r560, %r428;
	add.s32 	%r67, %r430, %r561;
	or.b32 	%r562, %r419, 60;
	xor.b32 	%r563, %r526, %r562;
	or.b32 	%r564, %r1222, %r563;
	or.b32 	%r565, %r564, %r423;
	or.b32 	%r566, %r427, %r565;
	or.b32 	%r567, %r566, %r428;
	add.s32 	%r68, %r430, %r567;
	or.b32 	%r568, %r419, 62;
	xor.b32 	%r569, %r526, %r568;
	or.b32 	%r570, %r1222, %r569;
	or.b32 	%r571, %r570, %r423;
	or.b32 	%r572, %r427, %r571;
	or.b32 	%r573, %r572, %r428;
	add.s32 	%r69, %r430, %r573;
	bfe.u32 	%r574, %r430, 4, 14;
	cvt.u64.u32 	%rd68, %r574;
	or.b64 	%rd71, %rd68, -9223371899399045120;
	add.s32 	%r575, %r310, 32800;
	bfe.u32 	%r576, %r575, 4, 14;
	cvt.u64.u32 	%rd69, %r576;
	or.b64 	%rd73, %rd69, -9223371899399045120;
	mov.b32 	%r1218, -1;
	mov.b32 	%r1153, 0f00000000;
	mov.b32 	%r972, 0;
	mov.b32 	%r1151, %r972;
	mov.b32 	%r1152, %r972;
	mov.b32 	%r1154, %r1153;
	mov.b32 	%r1155, %r1153;
	mov.b32 	%r1156, %r1153;
	mov.b32 	%r1157, %r1153;
	mov.b32 	%r1158, %r1153;
	mov.b32 	%r1159, %r1153;
	mov.b32 	%r1160, %r1153;
	mov.b32 	%r1161, %r1153;
	mov.b32 	%r1162, %r1153;
	mov.b32 	%r1163, %r1153;
	mov.b32 	%r1164, %r1153;
	mov.b32 	%r1165, %r1153;
	mov.b32 	%r1166, %r1153;
	mov.b32 	%r1167, %r1153;
	mov.b32 	%r1168, %r1153;
	mov.b32 	%r1169, %r1153;
	mov.b32 	%r1170, %r1153;
	mov.b32 	%r1171, %r1153;
	mov.b32 	%r1172, %r1153;
	mov.b32 	%r1173, %r1153;
	mov.b32 	%r1174, %r1153;
	mov.b32 	%r1175, %r1153;
	mov.b32 	%r1176, %r1153;
	mov.b32 	%r1177, %r1153;
	mov.b32 	%r1178, %r1153;
	mov.b32 	%r1179, %r1153;
	mov.b32 	%r1180, %r1153;
	mov.b32 	%r1181, %r1153;
	mov.b32 	%r1182, %r1153;
	mov.b32 	%r1183, %r1153;
	mov.b32 	%r1184, %r1153;
	mov.b32 	%r1185, %r1153;
	mov.b32 	%r1186, %r1153;
	mov.b32 	%r1187, %r1153;
	mov.b32 	%r1188, %r1153;
	mov.b32 	%r1189, %r1153;
	mov.b32 	%r1190, %r1153;
	mov.b32 	%r1191, %r1153;
	mov.b32 	%r1192, %r1153;
	mov.b32 	%r1193, %r1153;
	mov.b32 	%r1194, %r1153;
	mov.b32 	%r1195, %r1153;
	mov.b32 	%r1196, %r1153;
	mov.b32 	%r1197, %r1153;
	mov.b32 	%r1198, %r1153;
	mov.b32 	%r1199, %r1153;
	mov.b32 	%r1200, %r1153;
	mov.b32 	%r1201, %r1153;
	mov.b32 	%r1202, %r1153;
	mov.b32 	%r1203, %r1153;
	mov.b32 	%r1204, %r1153;
	mov.b32 	%r1205, %r1153;
	mov.b32 	%r1206, %r1153;
	mov.b32 	%r1207, %r1153;
	mov.b32 	%r1208, %r1153;
	mov.b32 	%r1209, %r1153;
	mov.b32 	%r1210, %r1153;
	mov.b32 	%r1211, %r1153;
	mov.b32 	%r1212, %r1153;
	mov.b32 	%r1213, %r1153;
	mov.b32 	%r1214, %r1153;
	mov.b32 	%r1215, %r1153;
	mov.b32 	%r1216, %r1153;
	mov.b32 	%r1217, %r972;
	mov.b32 	%r1220, %r1218;
	mov.b32 	%r1221, %r1219;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	.loc	1 43 19                         // matmul-with-tma-v3.py:43:19
	setp.lt.s32 	%p82, %r1217, %r7;
	add.s32 	%r987, %r1218, 1;
	add.s32 	%r988, %r1220, 1;
	add.s32 	%r989, %r1219, 1;
	add.s32 	%r990, %r1221, 1;
	setp.gt.s32 	%p83, %r990, 2;
	setp.gt.s32 	%p84, %r989, 1;
	setp.gt.s32 	%p85, %r988, 2;
	setp.gt.s32 	%p86, %r987, 1;
	selp.b32 	%r991, 1, 0, %p86;
	xor.b32 	%r1151, %r1151, %r991;
	selp.b32 	%r992, 1, 0, %p85;
	xor.b32 	%r1152, %r1152, %r992;
	selp.b32 	%r1219, 0, %r989, %p84;
	selp.b32 	%r1221, 0, %r990, %p83;
	selp.b32 	%r1218, 0, %r987, %p86;
	selp.b32 	%r1220, 0, %r988, %p85;
	shl.b32 	%r993, %r1220, 3;
	add.s32 	%r577, %r304, %r993;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r577], %r1152;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	.loc	1 44 24                         // matmul-with-tma-v3.py:44:24
	shl.b32 	%r996, %r1220, 13;
	add.s32 	%r901, %r310, %r996;
	.loc	1 43 19                         // matmul-with-tma-v3.py:43:19
	shl.b32 	%r997, %r1218, 3;
	add.s32 	%r579, %r307, %r997;
	bar.sync 	0;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r579], %r1151;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	.loc	1 45 24                         // matmul-with-tma-v3.py:45:24
	shl.b32 	%r999, %r1218, 12;
	add.s32 	%r1001, %r315, %r999;
	add.s32 	%r1002, %r1001, %r12;
	ld.shared.b8 	%rs1, [%r1002];
	add.s32 	%r1003, %r1001, %r13;
	add.s32 	%r1004, %r1003, %r10;
	add.s32 	%r1005, %r1004, %r11;
	ld.shared.b8 	%rs2, [%r1005];
	add.s32 	%r1006, %r1001, %r14;
	add.s32 	%r1007, %r1006, %r11;
	ld.shared.b8 	%rs3, [%r1007];
	add.s32 	%r1008, %r1001, %r15;
	add.s32 	%r1009, %r1008, %r11;
	ld.shared.b8 	%rs4, [%r1009];
	ld.shared.b8 	%rs5, [%r1002+512];
	add.s32 	%r1010, %r1001, %r16;
	add.s32 	%r1011, %r1010, %r10;
	add.s32 	%r1012, %r1011, %r11;
	ld.shared.b8 	%rs6, [%r1012];
	add.s32 	%r1013, %r1001, %r17;
	add.s32 	%r1014, %r1013, %r11;
	ld.shared.b8 	%rs7, [%r1014];
	add.s32 	%r1015, %r1001, %r18;
	add.s32 	%r1016, %r1015, %r11;
	ld.shared.b8 	%rs8, [%r1016];
	ld.shared.b8 	%rs9, [%r1002+1024];
	add.s32 	%r1017, %r1001, %r19;
	add.s32 	%r1018, %r1017, %r10;
	add.s32 	%r1019, %r1018, %r11;
	ld.shared.b8 	%rs10, [%r1019];
	add.s32 	%r1020, %r1001, %r20;
	add.s32 	%r1021, %r1020, %r11;
	ld.shared.b8 	%rs11, [%r1021];
	add.s32 	%r1022, %r1001, %r21;
	add.s32 	%r1023, %r1022, %r11;
	ld.shared.b8 	%rs12, [%r1023];
	ld.shared.b8 	%rs13, [%r1002+1536];
	add.s32 	%r1024, %r1001, %r22;
	add.s32 	%r1025, %r1024, %r10;
	add.s32 	%r1026, %r1025, %r11;
	ld.shared.b8 	%rs14, [%r1026];
	add.s32 	%r1027, %r1001, %r23;
	add.s32 	%r1028, %r1027, %r11;
	ld.shared.b8 	%rs15, [%r1028];
	add.s32 	%r1029, %r1001, %r24;
	add.s32 	%r1030, %r1029, %r11;
	ld.shared.b8 	%rs16, [%r1030];
	ld.shared.b8 	%rs17, [%r1002+2048];
	add.s32 	%r1031, %r1001, %r25;
	add.s32 	%r1032, %r1031, %r10;
	add.s32 	%r1033, %r1032, %r11;
	ld.shared.b8 	%rs18, [%r1033];
	add.s32 	%r1034, %r1001, %r26;
	add.s32 	%r1035, %r1034, %r11;
	ld.shared.b8 	%rs19, [%r1035];
	add.s32 	%r1036, %r1001, %r27;
	add.s32 	%r1037, %r1036, %r11;
	ld.shared.b8 	%rs20, [%r1037];
	ld.shared.b8 	%rs21, [%r1002+2560];
	add.s32 	%r1038, %r1001, %r28;
	add.s32 	%r1039, %r1038, %r10;
	add.s32 	%r1040, %r1039, %r11;
	ld.shared.b8 	%rs22, [%r1040];
	add.s32 	%r1041, %r1001, %r29;
	add.s32 	%r1042, %r1041, %r11;
	ld.shared.b8 	%rs23, [%r1042];
	add.s32 	%r1043, %r1001, %r30;
	add.s32 	%r1044, %r1043, %r11;
	ld.shared.b8 	%rs24, [%r1044];
	ld.shared.b8 	%rs25, [%r1002+3072];
	add.s32 	%r1045, %r1001, %r31;
	add.s32 	%r1046, %r1045, %r10;
	add.s32 	%r1047, %r1046, %r11;
	ld.shared.b8 	%rs26, [%r1047];
	add.s32 	%r1048, %r1001, %r32;
	add.s32 	%r1049, %r1048, %r11;
	ld.shared.b8 	%rs27, [%r1049];
	add.s32 	%r1050, %r1001, %r33;
	add.s32 	%r1051, %r1050, %r11;
	ld.shared.b8 	%rs28, [%r1051];
	ld.shared.b8 	%rs29, [%r1002+3584];
	add.s32 	%r1052, %r1001, %r34;
	add.s32 	%r1053, %r1052, %r10;
	add.s32 	%r1054, %r1053, %r11;
	ld.shared.b8 	%rs30, [%r1054];
	add.s32 	%r1055, %r1001, %r35;
	add.s32 	%r1056, %r1055, %r11;
	ld.shared.b8 	%rs31, [%r1056];
	add.s32 	%r1057, %r1001, %r36;
	add.s32 	%r1058, %r1057, %r11;
	ld.shared.b8 	%rs32, [%r1058];
	st.shared.b8 	[%r38], %rs1;
	st.shared.b8 	[%r39], %rs2;
	st.shared.b8 	[%r40], %rs3;
	st.shared.b8 	[%r41], %rs4;
	st.shared.b8 	[%r42], %rs5;
	st.shared.b8 	[%r43], %rs6;
	st.shared.b8 	[%r44], %rs7;
	st.shared.b8 	[%r45], %rs8;
	st.shared.b8 	[%r46], %rs9;
	st.shared.b8 	[%r47], %rs10;
	st.shared.b8 	[%r48], %rs11;
	st.shared.b8 	[%r49], %rs12;
	st.shared.b8 	[%r50], %rs13;
	st.shared.b8 	[%r51], %rs14;
	st.shared.b8 	[%r52], %rs15;
	st.shared.b8 	[%r53], %rs16;
	st.shared.b8 	[%r54], %rs17;
	st.shared.b8 	[%r55], %rs18;
	st.shared.b8 	[%r56], %rs19;
	st.shared.b8 	[%r57], %rs20;
	st.shared.b8 	[%r58], %rs21;
	st.shared.b8 	[%r59], %rs22;
	st.shared.b8 	[%r60], %rs23;
	st.shared.b8 	[%r61], %rs24;
	st.shared.b8 	[%r62], %rs25;
	st.shared.b8 	[%r63], %rs26;
	st.shared.b8 	[%r64], %rs27;
	st.shared.b8 	[%r65], %rs28;
	st.shared.b8 	[%r66], %rs29;
	st.shared.b8 	[%r67], %rs30;
	st.shared.b8 	[%r68], %rs31;
	st.shared.b8 	[%r69], %rs32;
	.loc	1 46 32                         // matmul-with-tma-v3.py:46:32
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r1059, %r8, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1060, %r901, 4, 14;
	cvt.u64.u32 	%rd80, %r1060;
	or.b64 	%rd70, %rd80, -9223371899382267904;
	mov.pred 	%p72, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {%r1153,%r1154,%r1155,%r1156,%r1157,%r1158,%r1159,%r1160,%r1161,%r1162,%r1163,%r1164,%r1165,%r1166,%r1167,%r1168,%r1169,%r1170,%r1171,%r1172,%r1173,%r1174,%r1175,%r1176,%r1177,%r1178,%r1179,%r1180,%r1181,%r1182,%r1183,%r1184}, %rd70, %rd71, %p72, 1, 1;
	// end inline asm
	add.s32 	%r1061, %r901, 32;
	bfe.u32 	%r1062, %r1061, 4, 14;
	cvt.u64.u32 	%rd81, %r1062;
	or.b64 	%rd72, %rd81, -9223371899382267904;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {%r1153,%r1154,%r1155,%r1156,%r1157,%r1158,%r1159,%r1160,%r1161,%r1162,%r1163,%r1164,%r1165,%r1166,%r1167,%r1168,%r1169,%r1170,%r1171,%r1172,%r1173,%r1174,%r1175,%r1176,%r1177,%r1178,%r1179,%r1180,%r1181,%r1182,%r1183,%r1184}, %rd72, %rd73, %p72, 1, 1;
	// end inline asm
	add.s32 	%r1063, %r901, 4096;
	bfe.u32 	%r1064, %r1063, 4, 14;
	cvt.u64.u32 	%rd82, %r1064;
	or.b64 	%rd74, %rd82, -9223371899382267904;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {%r1185,%r1186,%r1187,%r1188,%r1189,%r1190,%r1191,%r1192,%r1193,%r1194,%r1195,%r1196,%r1197,%r1198,%r1199,%r1200,%r1201,%r1202,%r1203,%r1204,%r1205,%r1206,%r1207,%r1208,%r1209,%r1210,%r1211,%r1212,%r1213,%r1214,%r1215,%r1216}, %rd74, %rd71, %p72, 1, 1;
	// end inline asm
	add.s32 	%r1065, %r901, 4128;
	bfe.u32 	%r1066, %r1065, 4, 14;
	cvt.u64.u32 	%rd83, %r1066;
	or.b64 	%rd76, %rd83, -9223371899382267904;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {%r1185,%r1186,%r1187,%r1188,%r1189,%r1190,%r1191,%r1192,%r1193,%r1194,%r1195,%r1196,%r1197,%r1198,%r1199,%r1200,%r1201,%r1202,%r1203,%r1204,%r1205,%r1206,%r1207,%r1208,%r1209,%r1210,%r1211,%r1212,%r1213,%r1214,%r1215,%r1216}, %rd76, %rd73, %p72, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r906, %r972;
	mov.b32 	%r902, %r972;
	mov.b32 	%r903, %r972;
	mov.b32 	%r905, %r972;
	mov.b32 	%r904, %r430;
	// begin inline asm
	// wait for regs: %r1153,%r1154,%r1155,%r1156,%r1157,%r1158,%r1159,%r1160,%r1161,%r1162,%r1163,%r1164,%r1165,%r1166,%r1167,%r1168,%r1169,%r1170,%r1171,%r1172,%r1173,%r1174,%r1175,%r1176,%r1177,%r1178,%r1179,%r1180,%r1181,%r1182,%r1183,%r1184,%r1185,%r1186,%r1187,%r1188,%r1189,%r1190,%r1191,%r1192,%r1193,%r1194,%r1195,%r1196,%r1197,%r1198,%r1199,%r1200,%r1201,%r1202,%r1203,%r1204,%r1205,%r1206,%r1207,%r1208,%r1209,%r1210,%r1211,%r1212,%r1213,%r1214,%r1215,%r1216,%r901,%r902,%r903,%r904,%r905,%r906
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 43 19                         // matmul-with-tma-v3.py:43:19
	shl.b32 	%r1067, %r1221, 3;
	add.s32 	%r977, %r304, %r1067;
	and.pred 	%p76, %p92, %p82;
	// begin inline asm
	@%p76 mbarrier.arrive.expect_tx.shared.b64 _, [%r977], 8192;
	// end inline asm
	.loc	1 44 24                         // matmul-with-tma-v3.py:44:24
	shl.b32 	%r1068, %r1221, 13;
	add.s32 	%r978, %r310, %r1068;
	bar.sync 	0;
	elect.sync 	%r1069|%p87, -1;
	and.pred 	%p88, %p82, %p87;
	and.pred 	%p77, %p1, %p88;
	// begin inline asm
	@%p77 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r978], [%rd1, {%r1150, %r1119}], [%r977];
	// end inline asm
	.loc	1 43 19                         // matmul-with-tma-v3.py:43:19
	shl.b32 	%r1070, %r1219, 3;
	add.s32 	%r982, %r307, %r1070;
	// begin inline asm
	@%p76 mbarrier.arrive.expect_tx.shared.b64 _, [%r982], 4096;
	// end inline asm
	.loc	1 45 24                         // matmul-with-tma-v3.py:45:24
	shl.b32 	%r1071, %r1219, 12;
	add.s32 	%r983, %r315, %r1071;
	bar.sync 	0;
	elect.sync 	%r1072|%p89, -1;
	and.pred 	%p90, %p82, %p89;
	and.pred 	%p79, %p1, %p90;
	// begin inline asm
	@%p79 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r983], [%rd2, {%r1118, %r1150}], [%r982];
	// end inline asm
	.loc	1 43 19                         // matmul-with-tma-v3.py:43:19
	add.s32 	%r1217, %r1217, 1;
	add.s32 	%r1150, %r1150, 64;
	setp.ne.s32 	%p91, %r2, %r1217;
	@%p91 bra 	$L__BB0_3;
// %bb.4:                               // %._crit_edge.loopexit
	.loc	1 48 33                         // matmul-with-tma-v3.py:48:33
	cvt.rn.f16x2.f32 	%r1255, %r1216, %r1215;
	cvt.rn.f16x2.f32 	%r1254, %r1214, %r1213;
	cvt.rn.f16x2.f32 	%r1253, %r1212, %r1211;
	cvt.rn.f16x2.f32 	%r1252, %r1210, %r1209;
	cvt.rn.f16x2.f32 	%r1251, %r1208, %r1207;
	cvt.rn.f16x2.f32 	%r1250, %r1206, %r1205;
	cvt.rn.f16x2.f32 	%r1249, %r1204, %r1203;
	cvt.rn.f16x2.f32 	%r1248, %r1202, %r1201;
	cvt.rn.f16x2.f32 	%r1247, %r1200, %r1199;
	cvt.rn.f16x2.f32 	%r1246, %r1198, %r1197;
	cvt.rn.f16x2.f32 	%r1245, %r1196, %r1195;
	cvt.rn.f16x2.f32 	%r1244, %r1194, %r1193;
	cvt.rn.f16x2.f32 	%r1243, %r1192, %r1191;
	cvt.rn.f16x2.f32 	%r1242, %r1190, %r1189;
	cvt.rn.f16x2.f32 	%r1241, %r1188, %r1187;
	cvt.rn.f16x2.f32 	%r1240, %r1186, %r1185;
	cvt.rn.f16x2.f32 	%r1239, %r1184, %r1183;
	cvt.rn.f16x2.f32 	%r1238, %r1182, %r1181;
	cvt.rn.f16x2.f32 	%r1237, %r1180, %r1179;
	cvt.rn.f16x2.f32 	%r1236, %r1178, %r1177;
	cvt.rn.f16x2.f32 	%r1235, %r1176, %r1175;
	cvt.rn.f16x2.f32 	%r1234, %r1174, %r1173;
	cvt.rn.f16x2.f32 	%r1233, %r1172, %r1171;
	cvt.rn.f16x2.f32 	%r1232, %r1170, %r1169;
	cvt.rn.f16x2.f32 	%r1231, %r1168, %r1167;
	cvt.rn.f16x2.f32 	%r1230, %r1166, %r1165;
	cvt.rn.f16x2.f32 	%r1229, %r1164, %r1163;
	cvt.rn.f16x2.f32 	%r1228, %r1162, %r1161;
	cvt.rn.f16x2.f32 	%r1227, %r1160, %r1159;
	cvt.rn.f16x2.f32 	%r1226, %r1158, %r1157;
	cvt.rn.f16x2.f32 	%r1225, %r1156, %r1155;
	cvt.rn.f16x2.f32 	%r1224, %r1154, %r1153;
	bra.uni 	$L__BB0_5;
$L__BB0_1:                              // %.._crit_edge_crit_edge
	.loc	1 49 63                         // matmul-with-tma-v3.py:49:63
	and.b32 	%r1223, %r1, 4;
	shl.b32 	%r380, %r1, 6;
	and.b32 	%r1222, %r380, 512;
	mov.b32 	%r1225, %r1224;
	mov.b32 	%r1226, %r1224;
	mov.b32 	%r1227, %r1224;
	mov.b32 	%r1228, %r1224;
	mov.b32 	%r1229, %r1224;
	mov.b32 	%r1230, %r1224;
	mov.b32 	%r1231, %r1224;
	mov.b32 	%r1232, %r1224;
	mov.b32 	%r1233, %r1224;
	mov.b32 	%r1234, %r1224;
	mov.b32 	%r1235, %r1224;
	mov.b32 	%r1236, %r1224;
	mov.b32 	%r1237, %r1224;
	mov.b32 	%r1238, %r1224;
	mov.b32 	%r1239, %r1224;
	mov.b32 	%r1240, %r1224;
	mov.b32 	%r1241, %r1224;
	mov.b32 	%r1242, %r1224;
	mov.b32 	%r1243, %r1224;
	mov.b32 	%r1244, %r1224;
	mov.b32 	%r1245, %r1224;
	mov.b32 	%r1246, %r1224;
	mov.b32 	%r1247, %r1224;
	mov.b32 	%r1248, %r1224;
	mov.b32 	%r1249, %r1224;
	mov.b32 	%r1250, %r1224;
	mov.b32 	%r1251, %r1224;
	mov.b32 	%r1252, %r1224;
	mov.b32 	%r1253, %r1224;
	mov.b32 	%r1254, %r1224;
	mov.b32 	%r1255, %r1224;
$L__BB0_5:                              // %._crit_edge
	.loc	1 36 8                          // matmul-with-tma-v3.py:36:8
	cvta.global.u64 	%rd84, %rd3;
	.loc	1 43 19                         // matmul-with-tma-v3.py:43:19
	bar.sync 	0;
	// begin inline asm
	@%p92 mbarrier.inval.shared::cta.b64 [%r307];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p92 mbarrier.inval.shared::cta.b64 [%r308];
	// end inline asm
	// begin inline asm
	@%p92 mbarrier.inval.shared::cta.b64 [%r304];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p92 mbarrier.inval.shared::cta.b64 [%r305];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p92 mbarrier.inval.shared::cta.b64 [%r306];
	// end inline asm
	.loc	1 49 63                         // matmul-with-tma-v3.py:49:63
	and.b32 	%r1121, %r1, 3;
	mul.lo.s32 	%r1122, %r1121, 72;
	setp.eq.s32 	%p99, %r1223, 0;
	selp.b32 	%r1123, 0, 288, %p99;
	xor.b32 	%r1124, %r1123, %r1122;
	or.b32 	%r1125, %r1124, %r1222;
	shr.u32 	%r1126, %r1, 1;
	and.b32 	%r1127, %r1126, 8;
	xor.b32 	%r1128, %r1125, %r1127;
	shl.b32 	%r1129, %r1, 5;
	and.b32 	%r1130, %r1129, 1024;
	or.b32 	%r1131, %r1128, %r1130;
	and.b32 	%r1132, %r1129, 2048;
	or.b32 	%r1133, %r1131, %r1132;
	shl.b32 	%r1134, %r1133, 1;
	add.s32 	%r1078, %r310, %r1134;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1078], {%r1224, %r1225, %r1226, %r1227};
	// end inline asm
	xor.b32 	%r1135, %r1133, 16;
	shl.b32 	%r1136, %r1135, 1;
	add.s32 	%r1083, %r310, %r1136;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1083], {%r1228, %r1229, %r1230, %r1231};
	// end inline asm
	xor.b32 	%r1137, %r1133, 32;
	shl.b32 	%r1138, %r1137, 1;
	add.s32 	%r1088, %r310, %r1138;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1088], {%r1232, %r1233, %r1234, %r1235};
	// end inline asm
	xor.b32 	%r1139, %r1133, 48;
	shl.b32 	%r1140, %r1139, 1;
	add.s32 	%r1093, %r310, %r1140;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1093], {%r1236, %r1237, %r1238, %r1239};
	// end inline asm
	xor.b32 	%r1141, %r1133, 4096;
	shl.b32 	%r1142, %r1141, 1;
	add.s32 	%r1098, %r310, %r1142;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1098], {%r1240, %r1241, %r1242, %r1243};
	// end inline asm
	xor.b32 	%r1143, %r1133, 4112;
	shl.b32 	%r1144, %r1143, 1;
	add.s32 	%r1103, %r310, %r1144;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1103], {%r1244, %r1245, %r1246, %r1247};
	// end inline asm
	xor.b32 	%r1145, %r1133, 4128;
	shl.b32 	%r1146, %r1145, 1;
	add.s32 	%r1108, %r310, %r1146;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1108], {%r1248, %r1249, %r1250, %r1251};
	// end inline asm
	xor.b32 	%r1147, %r1133, 4144;
	shl.b32 	%r1148, %r1147, 1;
	add.s32 	%r1113, %r310, %r1148;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1113], {%r1252, %r1253, %r1254, %r1255};
	// end inline asm
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r1149|%p100, -1;
	and.pred 	%p97, %p1, %p100;
	// begin inline asm
	@%p97 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd84, {%r1118, %r1119}], [%r310];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 	0;
	bar.sync 	0;
	.loc	1 49 4                          // matmul-with-tma-v3.py:49:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/triton_runner/examples/ttgir_runner/sm90/matmul-with-tma-v3.py"
	.file	2 "/home/ubuntu/triton/python/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 182                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xaf DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 45
.b8 119
.b8 105
.b8 116
.b8 104
.b8 45
.b8 116
.b8 109
.b8 97
.b8 45
.b8 118
.b8 51
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 114
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 47
.b8 101
.b8 120
.b8 97
.b8 109
.b8 112
.b8 108
.b8 101
.b8 115
.b8 47
.b8 116
.b8 116
.b8 103
.b8 105
.b8 114
.b8 95
.b8 114
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 47
.b8 115
.b8 109
.b8 57
.b8 48
.b8 0
.b8 2                                   // Abbrev [2] 0x65:0x26 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 95
.b8 109
.b8 97
.b8 107
.b8 101
.b8 95
.b8 116
.b8 101
.b8 110
.b8 115
.b8 111
.b8 114
.b8 95
.b8 100
.b8 101
.b8 115
.b8 99
.b8 105
.b8 112
.b8 116
.b8 111
.b8 114
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x8b:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 101                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xa0:0x18 DW_TAG_inlined_subroutine
.b32 101                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 43                                  // DW_AT_call_line
.b8 30                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
