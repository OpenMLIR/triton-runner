#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":8:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:75", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":8:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":8:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":8:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":8:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":8:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":8:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":8:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":8:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":8:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf32, #blocked> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %1, %c16_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc5)
    %7 = tt.splat %2 : i32 -> tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %8 = tt.splat %2 : i32 -> tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %9 = arith.addi %7, %3 : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %10 = arith.addi %8, %4 : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %11 = arith.muli %0, %c16_i32 : i32 loc(#loc7)
    %12 = tt.splat %11 : i32 -> tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = tt.splat %11 : i32 -> tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = arith.addi %13, %6 : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %16 = tt.expand_dims %9 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc9)
    %17 = tt.expand_dims %10 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc9)
    %18 = tt.splat %arg6 : i32 -> tensor<16x1xi32, #blocked> loc(#loc10)
    %19 = arith.muli %16, %18 : tensor<16x1xi32, #blocked> loc(#loc10)
    %20 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %21 = tt.addptr %20, %19 : tensor<16x1x!tt.ptr<f32>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc11)
    %22 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc12)
    %23 = tt.expand_dims %15 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc12)
    %24 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc13)
    %25 = tt.addptr %24, %23 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc13)
    %26 = scf.for %arg9 = %c0_i32 to %arg5 step %c1_i32 iter_args(%arg10 = %cst) -> (tensor<16x16xf32, #blocked>)  : i32 {
      %42 = tt.splat %arg9 : i32 -> tensor<16x1xi32, #blocked> loc(#loc15)
      %43 = tt.addptr %21, %42 : tensor<16x1x!tt.ptr<f32>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc15)
      %44 = arith.muli %arg9, %arg7 : i32 loc(#loc16)
      %45 = tt.splat %44 : i32 -> tensor<1x16xi32, #blocked> loc(#loc17)
      %46 = tt.addptr %25, %45 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc17)
      %47 = tt.load %43 : tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc18)
      %48 = tt.load %46 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc19)
      %49 = tt.broadcast %47 : tensor<16x1xf32, #blocked> -> tensor<16x16xf32, #blocked> loc(#loc20)
      %50 = tt.broadcast %48 : tensor<1x16xf32, #blocked> -> tensor<16x16xf32, #blocked> loc(#loc20)
      %51 = arith.mulf %49, %50 : tensor<16x16xf32, #blocked> loc(#loc20)
      %52 = arith.addf %arg10, %51 : tensor<16x16xf32, #blocked> loc(#loc21)
      scf.yield %52 : tensor<16x16xf32, #blocked> loc(#loc22)
    } loc(#loc14)
    %27 = tt.splat %arg8 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc23)
    %28 = arith.muli %17, %27 : tensor<16x1xi32, #blocked1> loc(#loc23)
    %29 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %30 = tt.addptr %29, %28 : tensor<16x1x!tt.ptr<f32>, #blocked1>, tensor<16x1xi32, #blocked1> loc(#loc24)
    %31 = tt.broadcast %30 : tensor<16x1x!tt.ptr<f32>, #blocked1> -> tensor<16x16x!tt.ptr<f32>, #blocked1> loc(#loc25)
    %32 = tt.broadcast %22 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc25)
    %33 = tt.addptr %31, %32 : tensor<16x16x!tt.ptr<f32>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc25)
    %34 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc26)
    %35 = arith.cmpi slt, %17, %34 : tensor<16x1xi32, #blocked1> loc(#loc26)
    %36 = tt.splat %arg4 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc27)
    %37 = arith.cmpi slt, %22, %36 : tensor<1x16xi32, #blocked1> loc(#loc27)
    %38 = tt.broadcast %35 : tensor<16x1xi1, #blocked1> -> tensor<16x16xi1, #blocked1> loc(#loc28)
    %39 = tt.broadcast %37 : tensor<1x16xi1, #blocked1> -> tensor<16x16xi1, #blocked1> loc(#loc28)
    %40 = arith.andi %38, %39 : tensor<16x16xi1, #blocked1> loc(#loc28)
    %41 = ttg.convert_layout %26 : tensor<16x16xf32, #blocked> -> tensor<16x16xf32, #blocked1> loc(#loc29)
    tt.store %33, %41, %40 : tensor<16x16x!tt.ptr<f32>, #blocked1> loc(#loc29)
    tt.return loc(#loc30)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":16:26)
#loc3 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":17:26)
#loc4 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":19:21)
#loc5 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":19:49)
#loc6 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":19:36)
#loc7 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":20:21)
#loc8 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":20:36)
#loc9 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":23:28)
#loc10 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":23:39)
#loc11 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":23:21)
#loc12 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":24:28)
#loc13 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":24:21)
#loc14 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":29:19)
#loc15 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":30:31)
#loc16 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":31:35)
#loc17 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":31:31)
#loc18 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":33:20)
#loc19 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":34:20)
#loc20 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":35:27)
#loc21 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":35:23)
#loc22 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":35:8)
#loc23 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":38:39)
#loc24 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":38:21)
#loc25 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":38:51)
#loc26 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":39:32)
#loc27 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":39:56)
#loc28 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":39:38)
#loc29 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":40:21)
#loc30 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75/matmul.py":40:4)
