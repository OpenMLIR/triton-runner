//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_80
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u32 matmul_kernel_param_8,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_9
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<87>;
	.reg .b32 	%r<1179>;
	.reg .f32 	%f<706>;
	.reg .b64 	%rd<136>;
	.loc	1 8 0                           // matmul-with-dot-v2.py:8:0
$L__func_begin0:
	.loc	1 8 0                           // matmul-with-dot-v2.py:8:0

// %bb.0:
	ld.param.u32 	%r180, [matmul_kernel_param_8];
	ld.param.u32 	%r179, [matmul_kernel_param_7];
	ld.param.u32 	%r178, [matmul_kernel_param_5];
	ld.param.u32 	%r177, [matmul_kernel_param_4];
	ld.param.u32 	%r176, [matmul_kernel_param_3];
	ld.param.u64 	%rd17, [matmul_kernel_param_2];
	ld.param.u64 	%rd42, [matmul_kernel_param_0];
	ld.param.u64 	%rd43, [matmul_kernel_param_1];
$L__tmp0:
	.loc	1 17 26                         // matmul-with-dot-v2.py:17:26
	mov.u32 	%r229, %ctaid.x;
	.loc	1 18 26                         // matmul-with-dot-v2.py:18:26
	mov.u32 	%r230, %ctaid.y;
	.loc	1 20 21                         // matmul-with-dot-v2.py:20:21
	shl.b32 	%r1, %r230, 7;
	.loc	1 20 49                         // matmul-with-dot-v2.py:20:49
	mov.u32 	%r2, %tid.x;
	and.b32  	%r3, %r2, 16;
	and.b32  	%r4, %r2, 32;
	ld.param.u32 	%r231, [matmul_kernel_param_6];
	and.b32  	%r5, %r2, 64;
	bfe.u32 	%r6, %r2, 3, 4;
	or.b32  	%r7, %r6, 16;
	or.b32  	%r8, %r6, 32;
	or.b32  	%r9, %r6, 48;
	.loc	1 20 36                         // matmul-with-dot-v2.py:20:36
	or.b32  	%r232, %r6, %r1;
	or.b32  	%r233, %r7, %r1;
	or.b32  	%r234, %r8, %r1;
	or.b32  	%r235, %r9, %r1;
	.loc	1 21 21                         // matmul-with-dot-v2.py:21:21
	shl.b32 	%r10, %r229, 6;
	.loc	1 21 49                         // matmul-with-dot-v2.py:21:49
	shl.b32 	%r11, %r2, 3;
	and.b32  	%r12, %r11, 56;
	.loc	1 21 36                         // matmul-with-dot-v2.py:21:36
	or.b32  	%r236, %r12, %r10;
	.loc	1 24 39                         // matmul-with-dot-v2.py:24:39
	mul.lo.s32 	%r237, %r231, %r232;
	mul.lo.s32 	%r238, %r231, %r233;
	mul.lo.s32 	%r239, %r231, %r234;
	mul.lo.s32 	%r240, %r231, %r235;
	shl.b32 	%r241, %r231, 6;
	add.s32 	%r242, %r237, %r241;
	shl.b32 	%r243, %r231, 4;
	add.s32 	%r244, %r242, %r243;
	add.s32 	%r245, %r244, %r243;
	add.s32 	%r246, %r245, %r243;
	.loc	1 24 21                         // matmul-with-dot-v2.py:24:21
	mul.wide.s32 	%rd44, %r237, 2;
	add.s64 	%rd45, %rd42, %rd44;
	mul.wide.s32 	%rd46, %r238, 2;
	add.s64 	%rd47, %rd42, %rd46;
	mul.wide.s32 	%rd48, %r239, 2;
	add.s64 	%rd49, %rd42, %rd48;
	mul.wide.s32 	%rd50, %r240, 2;
	add.s64 	%rd51, %rd42, %rd50;
	mul.wide.s32 	%rd52, %r242, 2;
	add.s64 	%rd53, %rd42, %rd52;
	mul.wide.s32 	%rd54, %r244, 2;
	add.s64 	%rd55, %rd42, %rd54;
	mul.wide.s32 	%rd56, %r245, 2;
	add.s64 	%rd57, %rd42, %rd56;
	mul.wide.s32 	%rd58, %r246, 2;
	add.s64 	%rd59, %rd42, %rd58;
	.loc	1 24 51                         // matmul-with-dot-v2.py:24:51
	mul.wide.u32 	%rd60, %r12, 2;
	add.s64 	%rd18, %rd45, %rd60;
	add.s64 	%rd19, %rd47, %rd60;
	add.s64 	%rd20, %rd49, %rd60;
	add.s64 	%rd21, %rd51, %rd60;
	add.s64 	%rd22, %rd53, %rd60;
	add.s64 	%rd23, %rd55, %rd60;
	add.s64 	%rd24, %rd57, %rd60;
	add.s64 	%rd25, %rd59, %rd60;
	.loc	1 25 39                         // matmul-with-dot-v2.py:25:39
	mul.lo.s32 	%r247, %r179, %r6;
	shl.b32 	%r248, %r179, 4;
	add.s32 	%r249, %r247, %r248;
	add.s32 	%r250, %r249, %r248;
	add.s32 	%r251, %r250, %r248;
	.loc	1 25 21                         // matmul-with-dot-v2.py:25:21
	mul.wide.s32 	%rd61, %r247, 2;
	add.s64 	%rd62, %rd43, %rd61;
	mul.wide.s32 	%rd63, %r249, 2;
	add.s64 	%rd64, %rd43, %rd63;
	mul.wide.s32 	%rd65, %r250, 2;
	add.s64 	%rd66, %rd43, %rd65;
	mul.wide.s32 	%rd67, %r251, 2;
	add.s64 	%rd68, %rd43, %rd67;
	.loc	1 25 51                         // matmul-with-dot-v2.py:25:51
	mul.wide.s32 	%rd69, %r236, 2;
	add.s64 	%rd26, %rd62, %rd69;
	add.s64 	%rd27, %rd64, %rd69;
	add.s64 	%rd28, %rd66, %rd69;
	add.s64 	%rd29, %rd68, %rd69;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22
	add.s32 	%r13, %r177, 63;
$L__tmp2:
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	setp.gt.s32 	%p1, %r13, 63;
	.loc	1 31 82                         // matmul-with-dot-v2.py:31:82
	setp.lt.s32 	%p2, %r12, %r177;
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	xor.b32  	%r252, %r11, %r2;
	and.b32  	%r253, %r252, 56;
	shl.b32 	%r254, %r6, 6;
	or.b32  	%r14, %r253, %r254;
	shl.b32 	%r255, %r14, 1;
	mov.u32 	%r256, global_smem;
	add.s32 	%r181, %r256, %r255;
	add.s32 	%r183, %r181, 2048;
	add.s32 	%r185, %r181, 4096;
	add.s32 	%r187, %r181, 6144;
	add.s32 	%r189, %r181, 8192;
	add.s32 	%r191, %r181, 10240;
	add.s32 	%r193, %r181, 12288;
	add.s32 	%r195, %r181, 14336;
	selp.b32 	%r257, 16, 0, %p1;
	selp.b32 	%r184, %r257, 0, %p2;
	// begin inline asm
	cp.async.cg.shared.global [ %r181 + 0 ], [ %rd18 + 0 ], 0x10, %r184;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r183 + 0 ], [ %rd19 + 0 ], 0x10, %r184;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r185 + 0 ], [ %rd20 + 0 ], 0x10, %r184;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r187 + 0 ], [ %rd21 + 0 ], 0x10, %r184;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r189 + 0 ], [ %rd22 + 0 ], 0x10, %r184;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r191 + 0 ], [ %rd23 + 0 ], 0x10, %r184;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r193 + 0 ], [ %rd24 + 0 ], 0x10, %r184;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r195 + 0 ], [ %rd25 + 0 ], 0x10, %r184;
	// end inline asm
	cp.async.commit_group;
	.loc	1 32 82                         // matmul-with-dot-v2.py:32:82
	setp.lt.s32 	%p3, %r6, %r177;
	setp.lt.s32 	%p4, %r7, %r177;
	setp.lt.s32 	%p5, %r8, %r177;
	setp.lt.s32 	%p6, %r9, %r177;
	.loc	1 32 20                         // matmul-with-dot-v2.py:32:20
	add.s32 	%r197, %r181, 32768;
	add.s32 	%r199, %r181, 34816;
	add.s32 	%r201, %r181, 36864;
	add.s32 	%r203, %r181, 38912;
	selp.b32 	%r198, %r257, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r197 + 0 ], [ %rd26 + 0 ], 0x10, %r198;
	// end inline asm
	selp.b32 	%r200, %r257, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r199 + 0 ], [ %rd27 + 0 ], 0x10, %r200;
	// end inline asm
	selp.b32 	%r202, %r257, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r201 + 0 ], [ %rd28 + 0 ], 0x10, %r202;
	// end inline asm
	selp.b32 	%r204, %r257, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r203 + 0 ], [ %rd29 + 0 ], 0x10, %r204;
	// end inline asm
	cp.async.commit_group;
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	setp.gt.s32 	%p7, %r13, 127;
	.loc	1 30 22                         // matmul-with-dot-v2.py:30:22
	add.s32 	%r258, %r177, -64;
	.loc	1 31 82                         // matmul-with-dot-v2.py:31:82
	setp.lt.s32 	%p8, %r12, %r258;
	.loc	1 31 29                         // matmul-with-dot-v2.py:31:29
	add.s64 	%rd30, %rd18, 128;
	add.s64 	%rd31, %rd19, 128;
	add.s64 	%rd32, %rd20, 128;
	add.s64 	%rd33, %rd21, 128;
	add.s64 	%rd34, %rd22, 128;
	add.s64 	%rd35, %rd23, 128;
	add.s64 	%rd36, %rd24, 128;
	add.s64 	%rd37, %rd25, 128;
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	bar.sync 	0;
	add.s32 	%r205, %r181, 16384;
	add.s32 	%r207, %r181, 18432;
	add.s32 	%r209, %r181, 20480;
	add.s32 	%r211, %r181, 22528;
	add.s32 	%r213, %r181, 24576;
	add.s32 	%r215, %r181, 26624;
	add.s32 	%r217, %r181, 28672;
	add.s32 	%r219, %r181, 30720;
	selp.b32 	%r259, 16, 0, %p8;
	selp.b32 	%r208, %r259, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r205 + 0 ], [ %rd30 + 0 ], 0x10, %r208;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r207 + 0 ], [ %rd31 + 0 ], 0x10, %r208;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r209 + 0 ], [ %rd32 + 0 ], 0x10, %r208;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r211 + 0 ], [ %rd33 + 0 ], 0x10, %r208;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r213 + 0 ], [ %rd34 + 0 ], 0x10, %r208;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r215 + 0 ], [ %rd35 + 0 ], 0x10, %r208;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r217 + 0 ], [ %rd36 + 0 ], 0x10, %r208;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r219 + 0 ], [ %rd37 + 0 ], 0x10, %r208;
	// end inline asm
	cp.async.commit_group;
	.loc	1 32 82                         // matmul-with-dot-v2.py:32:82
	setp.lt.s32 	%p9, %r6, %r258;
	setp.lt.s32 	%p10, %r7, %r258;
	setp.lt.s32 	%p11, %r8, %r258;
	setp.lt.s32 	%p12, %r9, %r258;
	.loc	1 32 48                         // matmul-with-dot-v2.py:32:48
	shl.b32 	%r15, %r179, 6;
	.loc	1 32 29                         // matmul-with-dot-v2.py:32:29
	mul.wide.s32 	%rd70, %r15, 2;
	add.s64 	%rd38, %rd26, %rd70;
	add.s64 	%rd39, %rd27, %rd70;
	add.s64 	%rd40, %rd28, %rd70;
	add.s64 	%rd41, %rd29, %rd70;
	.loc	1 32 20                         // matmul-with-dot-v2.py:32:20
	add.s32 	%r221, %r181, 40960;
	add.s32 	%r223, %r181, 43008;
	add.s32 	%r225, %r181, 45056;
	add.s32 	%r227, %r181, 47104;
	selp.b32 	%r260, 16, 0, %p9;
	selp.b32 	%r222, %r260, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r221 + 0 ], [ %rd38 + 0 ], 0x10, %r222;
	// end inline asm
	selp.b32 	%r261, 16, 0, %p10;
	selp.b32 	%r224, %r261, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r223 + 0 ], [ %rd39 + 0 ], 0x10, %r224;
	// end inline asm
	selp.b32 	%r262, 16, 0, %p11;
	selp.b32 	%r226, %r262, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r225 + 0 ], [ %rd40 + 0 ], 0x10, %r226;
	// end inline asm
	selp.b32 	%r263, 16, 0, %p12;
	selp.b32 	%r228, %r263, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r227 + 0 ], [ %rd41 + 0 ], 0x10, %r228;
	// end inline asm
	cp.async.commit_group;
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %.lr.ph
$L__tmp3:
	.loc	2 40 28                         // standard.py:40:28
	shr.u32 	%r268, %r13, 6;
	and.b32  	%r269, %r2, 15;
$L__tmp4:
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	or.b32  	%r270, %r3, %r269;
	.loc	1 21 49                         // matmul-with-dot-v2.py:21:49
	and.b32  	%r271, %r11, 32;
	and.b32  	%r272, %r11, 24;
	and.b32  	%r273, %r11, 16;
	and.b32  	%r274, %r11, 8;
	add.s32 	%r275, %r268, -2;
	shr.u32 	%r276, %r3, 1;
	xor.b32  	%r17, %r12, %r276;
	shr.u32 	%r277, %r5, 2;
	or.b32  	%r278, %r277, %r269;
	shl.b32 	%r18, %r278, 6;
	or.b32  	%r19, %r18, %r17;
	or.b32  	%r279, %r274, 16;
	xor.b32  	%r280, %r279, %r273;
	or.b32  	%r281, %r280, %r271;
	xor.b32  	%r20, %r281, %r276;
	or.b32  	%r21, %r20, %r18;
	or.b32  	%r282, %r272, 32;
	xor.b32  	%r283, %r282, %r271;
	xor.b32  	%r22, %r283, %r276;
	or.b32  	%r23, %r22, %r18;
	or.b32  	%r284, %r274, 48;
	and.b32  	%r285, %r11, 48;
	xor.b32  	%r286, %r284, %r285;
	xor.b32  	%r24, %r286, %r276;
	or.b32  	%r25, %r24, %r18;
	shr.u32 	%r1114, %r4, 2;
	xor.b32  	%r287, %r12, %r1114;
	shl.b32 	%r288, %r2, 6;
	and.b32  	%r289, %r288, 1984;
	or.b32  	%r27, %r287, %r289;
	shl.b32 	%r290, %r270, 6;
	or.b32  	%r291, %r290, 2048;
	or.b32  	%r28, %r291, %r287;
	xor.b32  	%r292, %r281, %r1114;
	or.b32  	%r29, %r292, %r289;
	or.b32  	%r30, %r292, %r291;
	xor.b32  	%r293, %r283, %r1114;
	or.b32  	%r31, %r293, %r289;
	or.b32  	%r32, %r293, %r291;
	xor.b32  	%r294, %r286, %r1114;
	or.b32  	%r33, %r294, %r289;
	or.b32  	%r34, %r294, %r291;
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	cvt.s64.s32 	%rd13, %r275;
	cvt.u64.u32 	%rd14, %r268;
	shl.b32 	%r1111, %r179, 7;
	add.s32 	%r1109, %r177, -128;
	mov.f32 	%f642, 0f00000000;
	mov.b32 	%r1113, 1;
	mov.b32 	%r1112, -1;
	mov.b64 	%rd135, 0;
	mov.b32 	%r1110, 128;
	shl.b32 	%r828, %r19, 1;
	shl.b32 	%r829, %r21, 1;
	shl.b32 	%r830, %r23, 1;
	shl.b32 	%r831, %r25, 1;
	shl.b32 	%r846, %r27, 1;
	shl.b32 	%r847, %r28, 1;
	shl.b32 	%r848, %r29, 1;
	shl.b32 	%r849, %r30, 1;
	shl.b32 	%r850, %r31, 1;
	shl.b32 	%r851, %r32, 1;
	shl.b32 	%r852, %r33, 1;
	shl.b32 	%r853, %r34, 1;
	mov.f32 	%f643, %f642;
	mov.f32 	%f644, %f642;
	mov.f32 	%f645, %f642;
	mov.f32 	%f646, %f642;
	mov.f32 	%f647, %f642;
	mov.f32 	%f648, %f642;
	mov.f32 	%f649, %f642;
	mov.f32 	%f650, %f642;
	mov.f32 	%f651, %f642;
	mov.f32 	%f652, %f642;
	mov.f32 	%f653, %f642;
	mov.f32 	%f654, %f642;
	mov.f32 	%f655, %f642;
	mov.f32 	%f656, %f642;
	mov.f32 	%f657, %f642;
	mov.f32 	%f658, %f642;
	mov.f32 	%f659, %f642;
	mov.f32 	%f660, %f642;
	mov.f32 	%f661, %f642;
	mov.f32 	%f662, %f642;
	mov.f32 	%f663, %f642;
	mov.f32 	%f664, %f642;
	mov.f32 	%f665, %f642;
	mov.f32 	%f666, %f642;
	mov.f32 	%f667, %f642;
	mov.f32 	%f668, %f642;
	mov.f32 	%f669, %f642;
	mov.f32 	%f670, %f642;
	mov.f32 	%f671, %f642;
	mov.f32 	%f672, %f642;
	mov.f32 	%f673, %f642;
	mov.f32 	%f674, %f642;
	mov.f32 	%f675, %f642;
	mov.f32 	%f676, %f642;
	mov.f32 	%f677, %f642;
	mov.f32 	%f678, %f642;
	mov.f32 	%f679, %f642;
	mov.f32 	%f680, %f642;
	mov.f32 	%f681, %f642;
	mov.f32 	%f682, %f642;
	mov.f32 	%f683, %f642;
	mov.f32 	%f684, %f642;
	mov.f32 	%f685, %f642;
	mov.f32 	%f686, %f642;
	mov.f32 	%f687, %f642;
	mov.f32 	%f688, %f642;
	mov.f32 	%f689, %f642;
	mov.f32 	%f690, %f642;
	mov.f32 	%f691, %f642;
	mov.f32 	%f692, %f642;
	mov.f32 	%f693, %f642;
	mov.f32 	%f694, %f642;
	mov.f32 	%f695, %f642;
	mov.f32 	%f696, %f642;
	mov.f32 	%f697, %f642;
	mov.f32 	%f698, %f642;
	mov.f32 	%f699, %f642;
	mov.f32 	%f700, %f642;
	mov.f32 	%f701, %f642;
	mov.f32 	%f702, %f642;
	mov.f32 	%f703, %f642;
	mov.f32 	%f704, %f642;
	mov.f32 	%f705, %f642;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s64 	%p13, %rd135, %rd13;
	add.s32 	%r823, %r1112, 1;
	setp.lt.s32 	%p14, %r823, 2;
	selp.b32 	%r1112, %r823, 0, %p14;
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	cp.async.wait_group 2;
	bar.sync 	0;
	shl.b32 	%r824, %r1112, 13;
	shl.b32 	%r825, %r1112, 14;
	add.s32 	%r827, %r256, %r825;
	add.s32 	%r299, %r827, %r828;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r415, %r416, %r417, %r418}, [%r299];
	// end inline asm
	add.s32 	%r304, %r827, %r829;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r511, %r512, %r513, %r514}, [%r304];
	// end inline asm
	add.s32 	%r309, %r827, %r830;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r607, %r608, %r609, %r610}, [%r309];
	// end inline asm
	add.s32 	%r314, %r827, %r831;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r703, %r704, %r705, %r706}, [%r314];
	// end inline asm
	add.s32 	%r832, %r18, %r17;
	shl.b32 	%r833, %r832, 1;
	add.s32 	%r834, %r827, %r833;
	add.s32 	%r319, %r834, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r439, %r440, %r441, %r442}, [%r319];
	// end inline asm
	add.s32 	%r835, %r20, %r18;
	shl.b32 	%r836, %r835, 1;
	add.s32 	%r837, %r827, %r836;
	add.s32 	%r324, %r837, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r535, %r536, %r537, %r538}, [%r324];
	// end inline asm
	add.s32 	%r838, %r22, %r18;
	shl.b32 	%r839, %r838, 1;
	add.s32 	%r840, %r827, %r839;
	add.s32 	%r329, %r840, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r631, %r632, %r633, %r634}, [%r329];
	// end inline asm
	add.s32 	%r841, %r24, %r18;
	shl.b32 	%r842, %r841, 1;
	add.s32 	%r843, %r827, %r842;
	add.s32 	%r334, %r843, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r727, %r728, %r729, %r730}, [%r334];
	// end inline asm
	add.s32 	%r339, %r834, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r463, %r464, %r465, %r466}, [%r339];
	// end inline asm
	add.s32 	%r344, %r837, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r559, %r560, %r561, %r562}, [%r344];
	// end inline asm
	add.s32 	%r349, %r840, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r655, %r656, %r657, %r658}, [%r349];
	// end inline asm
	add.s32 	%r354, %r843, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r751, %r752, %r753, %r754}, [%r354];
	// end inline asm
	add.s32 	%r359, %r834, 12288;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r487, %r488, %r489, %r490}, [%r359];
	// end inline asm
	add.s32 	%r364, %r837, 12288;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r583, %r584, %r585, %r586}, [%r364];
	// end inline asm
	add.s32 	%r369, %r840, 12288;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r679, %r680, %r681, %r682}, [%r369];
	// end inline asm
	add.s32 	%r374, %r843, 12288;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r775, %r776, %r777, %r778}, [%r374];
	// end inline asm
	.loc	1 32 20                         // matmul-with-dot-v2.py:32:20
	add.s32 	%r844, %r256, 32768;
	add.s32 	%r845, %r844, %r824;
	add.s32 	%r379, %r845, %r846;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r419, %r420, %r515, %r516}, [%r379];
	// end inline asm
	add.s32 	%r384, %r845, %r847;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r611, %r612, %r707, %r708}, [%r384];
	// end inline asm
	add.s32 	%r389, %r845, %r848;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r425, %r426, %r521, %r522}, [%r389];
	// end inline asm
	add.s32 	%r394, %r845, %r849;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r617, %r618, %r713, %r714}, [%r394];
	// end inline asm
	add.s32 	%r399, %r845, %r850;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r431, %r432, %r527, %r528}, [%r399];
	// end inline asm
	add.s32 	%r404, %r845, %r851;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r623, %r624, %r719, %r720}, [%r404];
	// end inline asm
	add.s32 	%r409, %r845, %r852;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r437, %r438, %r533, %r534}, [%r409];
	// end inline asm
	add.s32 	%r414, %r845, %r853;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r629, %r630, %r725, %r726}, [%r414];
	// end inline asm
	.loc	1 33 32                         // matmul-with-dot-v2.py:33:32
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f642, %f643, %f644, %f645 }, { %r415, %r416, %r417, %r418 }, { %r419, %r420 }, { %f642, %f643, %f644, %f645 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f646, %f647, %f648, %f649 }, { %r415, %r416, %r417, %r418 }, { %r425, %r426 }, { %f646, %f647, %f648, %f649 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f650, %f651, %f652, %f653 }, { %r415, %r416, %r417, %r418 }, { %r431, %r432 }, { %f650, %f651, %f652, %f653 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f654, %f655, %f656, %f657 }, { %r415, %r416, %r417, %r418 }, { %r437, %r438 }, { %f654, %f655, %f656, %f657 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f658, %f659, %f660, %f661 }, { %r439, %r440, %r441, %r442 }, { %r419, %r420 }, { %f658, %f659, %f660, %f661 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f662, %f663, %f664, %f665 }, { %r439, %r440, %r441, %r442 }, { %r425, %r426 }, { %f662, %f663, %f664, %f665 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f666, %f667, %f668, %f669 }, { %r439, %r440, %r441, %r442 }, { %r431, %r432 }, { %f666, %f667, %f668, %f669 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f670, %f671, %f672, %f673 }, { %r439, %r440, %r441, %r442 }, { %r437, %r438 }, { %f670, %f671, %f672, %f673 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f674, %f675, %f676, %f677 }, { %r463, %r464, %r465, %r466 }, { %r419, %r420 }, { %f674, %f675, %f676, %f677 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f678, %f679, %f680, %f681 }, { %r463, %r464, %r465, %r466 }, { %r425, %r426 }, { %f678, %f679, %f680, %f681 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f682, %f683, %f684, %f685 }, { %r463, %r464, %r465, %r466 }, { %r431, %r432 }, { %f682, %f683, %f684, %f685 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f686, %f687, %f688, %f689 }, { %r463, %r464, %r465, %r466 }, { %r437, %r438 }, { %f686, %f687, %f688, %f689 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f690, %f691, %f692, %f693 }, { %r487, %r488, %r489, %r490 }, { %r419, %r420 }, { %f690, %f691, %f692, %f693 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f694, %f695, %f696, %f697 }, { %r487, %r488, %r489, %r490 }, { %r425, %r426 }, { %f694, %f695, %f696, %f697 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f698, %f699, %f700, %f701 }, { %r487, %r488, %r489, %r490 }, { %r431, %r432 }, { %f698, %f699, %f700, %f701 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f702, %f703, %f704, %f705 }, { %r487, %r488, %r489, %r490 }, { %r437, %r438 }, { %f702, %f703, %f704, %f705 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f642, %f643, %f644, %f645 }, { %r511, %r512, %r513, %r514 }, { %r515, %r516 }, { %f642, %f643, %f644, %f645 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f646, %f647, %f648, %f649 }, { %r511, %r512, %r513, %r514 }, { %r521, %r522 }, { %f646, %f647, %f648, %f649 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f650, %f651, %f652, %f653 }, { %r511, %r512, %r513, %r514 }, { %r527, %r528 }, { %f650, %f651, %f652, %f653 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f654, %f655, %f656, %f657 }, { %r511, %r512, %r513, %r514 }, { %r533, %r534 }, { %f654, %f655, %f656, %f657 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f658, %f659, %f660, %f661 }, { %r535, %r536, %r537, %r538 }, { %r515, %r516 }, { %f658, %f659, %f660, %f661 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f662, %f663, %f664, %f665 }, { %r535, %r536, %r537, %r538 }, { %r521, %r522 }, { %f662, %f663, %f664, %f665 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f666, %f667, %f668, %f669 }, { %r535, %r536, %r537, %r538 }, { %r527, %r528 }, { %f666, %f667, %f668, %f669 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f670, %f671, %f672, %f673 }, { %r535, %r536, %r537, %r538 }, { %r533, %r534 }, { %f670, %f671, %f672, %f673 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f674, %f675, %f676, %f677 }, { %r559, %r560, %r561, %r562 }, { %r515, %r516 }, { %f674, %f675, %f676, %f677 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f678, %f679, %f680, %f681 }, { %r559, %r560, %r561, %r562 }, { %r521, %r522 }, { %f678, %f679, %f680, %f681 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f682, %f683, %f684, %f685 }, { %r559, %r560, %r561, %r562 }, { %r527, %r528 }, { %f682, %f683, %f684, %f685 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f686, %f687, %f688, %f689 }, { %r559, %r560, %r561, %r562 }, { %r533, %r534 }, { %f686, %f687, %f688, %f689 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f690, %f691, %f692, %f693 }, { %r583, %r584, %r585, %r586 }, { %r515, %r516 }, { %f690, %f691, %f692, %f693 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f694, %f695, %f696, %f697 }, { %r583, %r584, %r585, %r586 }, { %r521, %r522 }, { %f694, %f695, %f696, %f697 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f698, %f699, %f700, %f701 }, { %r583, %r584, %r585, %r586 }, { %r527, %r528 }, { %f698, %f699, %f700, %f701 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f702, %f703, %f704, %f705 }, { %r583, %r584, %r585, %r586 }, { %r533, %r534 }, { %f702, %f703, %f704, %f705 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f642, %f643, %f644, %f645 }, { %r607, %r608, %r609, %r610 }, { %r611, %r612 }, { %f642, %f643, %f644, %f645 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f646, %f647, %f648, %f649 }, { %r607, %r608, %r609, %r610 }, { %r617, %r618 }, { %f646, %f647, %f648, %f649 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f650, %f651, %f652, %f653 }, { %r607, %r608, %r609, %r610 }, { %r623, %r624 }, { %f650, %f651, %f652, %f653 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f654, %f655, %f656, %f657 }, { %r607, %r608, %r609, %r610 }, { %r629, %r630 }, { %f654, %f655, %f656, %f657 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f658, %f659, %f660, %f661 }, { %r631, %r632, %r633, %r634 }, { %r611, %r612 }, { %f658, %f659, %f660, %f661 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f662, %f663, %f664, %f665 }, { %r631, %r632, %r633, %r634 }, { %r617, %r618 }, { %f662, %f663, %f664, %f665 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f666, %f667, %f668, %f669 }, { %r631, %r632, %r633, %r634 }, { %r623, %r624 }, { %f666, %f667, %f668, %f669 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f670, %f671, %f672, %f673 }, { %r631, %r632, %r633, %r634 }, { %r629, %r630 }, { %f670, %f671, %f672, %f673 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f674, %f675, %f676, %f677 }, { %r655, %r656, %r657, %r658 }, { %r611, %r612 }, { %f674, %f675, %f676, %f677 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f678, %f679, %f680, %f681 }, { %r655, %r656, %r657, %r658 }, { %r617, %r618 }, { %f678, %f679, %f680, %f681 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f682, %f683, %f684, %f685 }, { %r655, %r656, %r657, %r658 }, { %r623, %r624 }, { %f682, %f683, %f684, %f685 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f686, %f687, %f688, %f689 }, { %r655, %r656, %r657, %r658 }, { %r629, %r630 }, { %f686, %f687, %f688, %f689 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f690, %f691, %f692, %f693 }, { %r679, %r680, %r681, %r682 }, { %r611, %r612 }, { %f690, %f691, %f692, %f693 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f694, %f695, %f696, %f697 }, { %r679, %r680, %r681, %r682 }, { %r617, %r618 }, { %f694, %f695, %f696, %f697 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f698, %f699, %f700, %f701 }, { %r679, %r680, %r681, %r682 }, { %r623, %r624 }, { %f698, %f699, %f700, %f701 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f702, %f703, %f704, %f705 }, { %r679, %r680, %r681, %r682 }, { %r629, %r630 }, { %f702, %f703, %f704, %f705 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f642, %f643, %f644, %f645 }, { %r703, %r704, %r705, %r706 }, { %r707, %r708 }, { %f642, %f643, %f644, %f645 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f646, %f647, %f648, %f649 }, { %r703, %r704, %r705, %r706 }, { %r713, %r714 }, { %f646, %f647, %f648, %f649 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f650, %f651, %f652, %f653 }, { %r703, %r704, %r705, %r706 }, { %r719, %r720 }, { %f650, %f651, %f652, %f653 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f654, %f655, %f656, %f657 }, { %r703, %r704, %r705, %r706 }, { %r725, %r726 }, { %f654, %f655, %f656, %f657 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f658, %f659, %f660, %f661 }, { %r727, %r728, %r729, %r730 }, { %r707, %r708 }, { %f658, %f659, %f660, %f661 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f662, %f663, %f664, %f665 }, { %r727, %r728, %r729, %r730 }, { %r713, %r714 }, { %f662, %f663, %f664, %f665 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f666, %f667, %f668, %f669 }, { %r727, %r728, %r729, %r730 }, { %r719, %r720 }, { %f666, %f667, %f668, %f669 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f670, %f671, %f672, %f673 }, { %r727, %r728, %r729, %r730 }, { %r725, %r726 }, { %f670, %f671, %f672, %f673 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f674, %f675, %f676, %f677 }, { %r751, %r752, %r753, %r754 }, { %r707, %r708 }, { %f674, %f675, %f676, %f677 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f678, %f679, %f680, %f681 }, { %r751, %r752, %r753, %r754 }, { %r713, %r714 }, { %f678, %f679, %f680, %f681 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f682, %f683, %f684, %f685 }, { %r751, %r752, %r753, %r754 }, { %r719, %r720 }, { %f682, %f683, %f684, %f685 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f686, %f687, %f688, %f689 }, { %r751, %r752, %r753, %r754 }, { %r725, %r726 }, { %f686, %f687, %f688, %f689 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f690, %f691, %f692, %f693 }, { %r775, %r776, %r777, %r778 }, { %r707, %r708 }, { %f690, %f691, %f692, %f693 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f694, %f695, %f696, %f697 }, { %r775, %r776, %r777, %r778 }, { %r713, %r714 }, { %f694, %f695, %f696, %f697 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f698, %f699, %f700, %f701 }, { %r775, %r776, %r777, %r778 }, { %r719, %r720 }, { %f698, %f699, %f700, %f701 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f702, %f703, %f704, %f705 }, { %r775, %r776, %r777, %r778 }, { %r725, %r726 }, { %f702, %f703, %f704, %f705 };
	// end inline asm
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	add.s32 	%r854, %r1113, 1;
	setp.lt.s32 	%p15, %r854, 2;
	selp.b32 	%r1113, %r854, 0, %p15;
	.loc	1 31 82                         // matmul-with-dot-v2.py:31:82
	setp.lt.s32 	%p16, %r12, %r1109;
	.loc	1 31 29                         // matmul-with-dot-v2.py:31:29
	mul.wide.s32 	%rd84, %r1110, 2;
	add.s64 	%rd72, %rd18, %rd84;
	add.s64 	%rd73, %rd19, %rd84;
	add.s64 	%rd74, %rd20, %rd84;
	add.s64 	%rd75, %rd21, %rd84;
	add.s64 	%rd76, %rd22, %rd84;
	add.s64 	%rd77, %rd23, %rd84;
	add.s64 	%rd78, %rd24, %rd84;
	add.s64 	%rd79, %rd25, %rd84;
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	shl.b32 	%r855, %r1113, 13;
	shl.b32 	%r856, %r1113, 14;
	add.s32 	%r857, %r256, %r856;
	bar.sync 	0;
	add.s32 	%r799, %r857, %r255;
	add.s32 	%r801, %r799, 2048;
	add.s32 	%r803, %r799, 4096;
	add.s32 	%r805, %r799, 6144;
	add.s32 	%r807, %r799, 8192;
	add.s32 	%r809, %r799, 10240;
	add.s32 	%r811, %r799, 12288;
	add.s32 	%r813, %r799, 14336;
	selp.b32 	%r859, 16, 0, %p16;
	selp.b32 	%r802, %r859, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r799 + 0 ], [ %rd72 + 0 ], 0x10, %r802;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r801 + 0 ], [ %rd73 + 0 ], 0x10, %r802;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r803 + 0 ], [ %rd74 + 0 ], 0x10, %r802;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r805 + 0 ], [ %rd75 + 0 ], 0x10, %r802;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r807 + 0 ], [ %rd76 + 0 ], 0x10, %r802;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r809 + 0 ], [ %rd77 + 0 ], 0x10, %r802;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r811 + 0 ], [ %rd78 + 0 ], 0x10, %r802;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r813 + 0 ], [ %rd79 + 0 ], 0x10, %r802;
	// end inline asm
	cp.async.commit_group;
	.loc	1 32 82                         // matmul-with-dot-v2.py:32:82
	setp.lt.s32 	%p17, %r6, %r1109;
	setp.lt.s32 	%p18, %r7, %r1109;
	setp.lt.s32 	%p19, %r8, %r1109;
	setp.lt.s32 	%p20, %r9, %r1109;
	.loc	1 32 29                         // matmul-with-dot-v2.py:32:29
	mul.wide.s32 	%rd85, %r1111, 2;
	add.s64 	%rd80, %rd26, %rd85;
	add.s64 	%rd81, %rd27, %rd85;
	add.s64 	%rd82, %rd28, %rd85;
	add.s64 	%rd83, %rd29, %rd85;
	.loc	1 32 20                         // matmul-with-dot-v2.py:32:20
	add.s32 	%r860, %r844, %r855;
	add.s32 	%r815, %r860, %r255;
	add.s32 	%r817, %r815, 2048;
	add.s32 	%r819, %r815, 4096;
	add.s32 	%r821, %r815, 6144;
	selp.b32 	%r861, 16, 0, %p17;
	selp.b32 	%r816, %r861, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r815 + 0 ], [ %rd80 + 0 ], 0x10, %r816;
	// end inline asm
	selp.b32 	%r862, 16, 0, %p18;
	selp.b32 	%r818, %r862, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r817 + 0 ], [ %rd81 + 0 ], 0x10, %r818;
	// end inline asm
	selp.b32 	%r863, 16, 0, %p19;
	selp.b32 	%r820, %r863, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r819 + 0 ], [ %rd82 + 0 ], 0x10, %r820;
	// end inline asm
	selp.b32 	%r864, 16, 0, %p20;
	selp.b32 	%r822, %r864, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r821 + 0 ], [ %rd83 + 0 ], 0x10, %r822;
	// end inline asm
	cp.async.commit_group;
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	add.s64 	%rd135, %rd135, 1;
	add.s32 	%r1111, %r1111, %r15;
	add.s32 	%r1110, %r1110, 64;
	add.s32 	%r1109, %r1109, -64;
	setp.ne.s64 	%p21, %rd14, %rd135;
	@%p21 bra 	$L__BB0_3;
// %bb.4:                               // %._crit_edge.loopexit
	.loc	1 39 21                         // matmul-with-dot-v2.py:39:21
	mov.b32 	%r1115, %f642;
	mov.b32 	%r1116, %f643;
	mov.b32 	%r1117, %f644;
	mov.b32 	%r1118, %f645;
	mov.b32 	%r1119, %f646;
	mov.b32 	%r1120, %f647;
	mov.b32 	%r1121, %f648;
	mov.b32 	%r1122, %f649;
	mov.b32 	%r1123, %f650;
	mov.b32 	%r1124, %f651;
	mov.b32 	%r1125, %f652;
	mov.b32 	%r1126, %f653;
	mov.b32 	%r1127, %f654;
	mov.b32 	%r1128, %f655;
	mov.b32 	%r1129, %f656;
	mov.b32 	%r1130, %f657;
	mov.b32 	%r1131, %f658;
	mov.b32 	%r1132, %f659;
	mov.b32 	%r1133, %f660;
	mov.b32 	%r1134, %f661;
	mov.b32 	%r1135, %f662;
	mov.b32 	%r1136, %f663;
	mov.b32 	%r1137, %f664;
	mov.b32 	%r1138, %f665;
	mov.b32 	%r1139, %f666;
	mov.b32 	%r1140, %f667;
	mov.b32 	%r1141, %f668;
	mov.b32 	%r1142, %f669;
	mov.b32 	%r1143, %f670;
	mov.b32 	%r1144, %f671;
	mov.b32 	%r1145, %f672;
	mov.b32 	%r1146, %f673;
	mov.b32 	%r1147, %f674;
	mov.b32 	%r1148, %f675;
	mov.b32 	%r1149, %f676;
	mov.b32 	%r1150, %f677;
	mov.b32 	%r1151, %f678;
	mov.b32 	%r1152, %f679;
	mov.b32 	%r1153, %f680;
	mov.b32 	%r1154, %f681;
	mov.b32 	%r1155, %f682;
	mov.b32 	%r1156, %f683;
	mov.b32 	%r1157, %f684;
	mov.b32 	%r1158, %f685;
	mov.b32 	%r1159, %f686;
	mov.b32 	%r1160, %f687;
	mov.b32 	%r1161, %f688;
	mov.b32 	%r1162, %f689;
	mov.b32 	%r1163, %f690;
	mov.b32 	%r1164, %f691;
	mov.b32 	%r1165, %f692;
	mov.b32 	%r1166, %f693;
	mov.b32 	%r1167, %f694;
	mov.b32 	%r1168, %f695;
	mov.b32 	%r1169, %f696;
	mov.b32 	%r1170, %f697;
	mov.b32 	%r1171, %f698;
	mov.b32 	%r1172, %f699;
	mov.b32 	%r1173, %f700;
	mov.b32 	%r1174, %f701;
	mov.b32 	%r1175, %f702;
	mov.b32 	%r1176, %f703;
	mov.b32 	%r1177, %f704;
	mov.b32 	%r1178, %f705;
	bra.uni 	$L__BB0_5;
$L__BB0_1:                              // %.._crit_edge_crit_edge
	.loc	1 39 21                         // matmul-with-dot-v2.py:39:21
	shr.u32 	%r1114, %r4, 2;
	mov.b32 	%r1115, 0;
	mov.u32 	%r1116, %r1115;
	mov.u32 	%r1117, %r1115;
	mov.u32 	%r1118, %r1115;
	mov.u32 	%r1119, %r1115;
	mov.u32 	%r1120, %r1115;
	mov.u32 	%r1121, %r1115;
	mov.u32 	%r1122, %r1115;
	mov.u32 	%r1123, %r1115;
	mov.u32 	%r1124, %r1115;
	mov.u32 	%r1125, %r1115;
	mov.u32 	%r1126, %r1115;
	mov.u32 	%r1127, %r1115;
	mov.u32 	%r1128, %r1115;
	mov.u32 	%r1129, %r1115;
	mov.u32 	%r1130, %r1115;
	mov.u32 	%r1131, %r1115;
	mov.u32 	%r1132, %r1115;
	mov.u32 	%r1133, %r1115;
	mov.u32 	%r1134, %r1115;
	mov.u32 	%r1135, %r1115;
	mov.u32 	%r1136, %r1115;
	mov.u32 	%r1137, %r1115;
	mov.u32 	%r1138, %r1115;
	mov.u32 	%r1139, %r1115;
	mov.u32 	%r1140, %r1115;
	mov.u32 	%r1141, %r1115;
	mov.u32 	%r1142, %r1115;
	mov.u32 	%r1143, %r1115;
	mov.u32 	%r1144, %r1115;
	mov.u32 	%r1145, %r1115;
	mov.u32 	%r1146, %r1115;
	mov.u32 	%r1147, %r1115;
	mov.u32 	%r1148, %r1115;
	mov.u32 	%r1149, %r1115;
	mov.u32 	%r1150, %r1115;
	mov.u32 	%r1151, %r1115;
	mov.u32 	%r1152, %r1115;
	mov.u32 	%r1153, %r1115;
	mov.u32 	%r1154, %r1115;
	mov.u32 	%r1155, %r1115;
	mov.u32 	%r1156, %r1115;
	mov.u32 	%r1157, %r1115;
	mov.u32 	%r1158, %r1115;
	mov.u32 	%r1159, %r1115;
	mov.u32 	%r1160, %r1115;
	mov.u32 	%r1161, %r1115;
	mov.u32 	%r1162, %r1115;
	mov.u32 	%r1163, %r1115;
	mov.u32 	%r1164, %r1115;
	mov.u32 	%r1165, %r1115;
	mov.u32 	%r1166, %r1115;
	mov.u32 	%r1167, %r1115;
	mov.u32 	%r1168, %r1115;
	mov.u32 	%r1169, %r1115;
	mov.u32 	%r1170, %r1115;
	mov.u32 	%r1171, %r1115;
	mov.u32 	%r1172, %r1115;
	mov.u32 	%r1173, %r1115;
	mov.u32 	%r1174, %r1115;
	mov.u32 	%r1175, %r1115;
	mov.u32 	%r1176, %r1115;
	mov.u32 	%r1177, %r1115;
	mov.u32 	%r1178, %r1115;
$L__BB0_5:                              // %._crit_edge
	.loc	1 21 49                         // matmul-with-dot-v2.py:21:49
	shl.b32 	%r1025, %r2, 2;
	and.b32  	%r1026, %r1025, 60;
	.loc	1 21 36                         // matmul-with-dot-v2.py:21:36
	or.b32  	%r1027, %r1026, %r10;
	.loc	1 20 49                         // matmul-with-dot-v2.py:20:49
	bfe.u32 	%r1028, %r2, 4, 3;
	.loc	1 20 36                         // matmul-with-dot-v2.py:20:36
	or.b32  	%r1029, %r1, %r1028;
	or.b32  	%r1030, %r1029, 120;
	or.b32  	%r1031, %r1029, 112;
	or.b32  	%r1032, %r1029, 104;
	or.b32  	%r1033, %r1029, 96;
	or.b32  	%r1034, %r1029, 88;
	or.b32  	%r1035, %r1029, 80;
	or.b32  	%r1036, %r1029, 72;
	or.b32  	%r1037, %r1029, 64;
	or.b32  	%r1038, %r1029, 56;
	or.b32  	%r1039, %r1029, 48;
	or.b32  	%r1040, %r1029, 40;
	or.b32  	%r1041, %r1029, 32;
	or.b32  	%r1042, %r1029, 24;
	or.b32  	%r1043, %r1029, 16;
	or.b32  	%r1044, %r1029, 8;
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	cp.async.wait_group 0;
	bar.sync 	0;
	.loc	1 35 39                         // matmul-with-dot-v2.py:35:39
	mul.lo.s32 	%r1045, %r180, %r1029;
	shl.b32 	%r1046, %r180, 3;
	add.s32 	%r1047, %r1045, %r1046;
	add.s32 	%r1048, %r1047, %r1046;
	add.s32 	%r1049, %r1048, %r1046;
	add.s32 	%r1050, %r1049, %r1046;
	add.s32 	%r1051, %r1050, %r1046;
	add.s32 	%r1052, %r1051, %r1046;
	add.s32 	%r1053, %r1052, %r1046;
	add.s32 	%r1054, %r1053, %r1046;
	add.s32 	%r1055, %r1054, %r1046;
	add.s32 	%r1056, %r1055, %r1046;
	add.s32 	%r1057, %r1056, %r1046;
	add.s32 	%r1058, %r1057, %r1046;
	add.s32 	%r1059, %r1058, %r1046;
	add.s32 	%r1060, %r1059, %r1046;
	add.s32 	%r1061, %r1060, %r1046;
	.loc	1 35 21                         // matmul-with-dot-v2.py:35:21
	mul.wide.s32 	%rd102, %r1045, 4;
	add.s64 	%rd103, %rd17, %rd102;
	mul.wide.s32 	%rd104, %r1047, 4;
	add.s64 	%rd105, %rd17, %rd104;
	mul.wide.s32 	%rd106, %r1048, 4;
	add.s64 	%rd107, %rd17, %rd106;
	mul.wide.s32 	%rd108, %r1049, 4;
	add.s64 	%rd109, %rd17, %rd108;
	mul.wide.s32 	%rd110, %r1050, 4;
	add.s64 	%rd111, %rd17, %rd110;
	mul.wide.s32 	%rd112, %r1051, 4;
	add.s64 	%rd113, %rd17, %rd112;
	mul.wide.s32 	%rd114, %r1052, 4;
	add.s64 	%rd115, %rd17, %rd114;
	mul.wide.s32 	%rd116, %r1053, 4;
	add.s64 	%rd117, %rd17, %rd116;
	mul.wide.s32 	%rd118, %r1054, 4;
	add.s64 	%rd119, %rd17, %rd118;
	mul.wide.s32 	%rd120, %r1055, 4;
	add.s64 	%rd121, %rd17, %rd120;
	mul.wide.s32 	%rd122, %r1056, 4;
	add.s64 	%rd123, %rd17, %rd122;
	mul.wide.s32 	%rd124, %r1057, 4;
	add.s64 	%rd125, %rd17, %rd124;
	mul.wide.s32 	%rd126, %r1058, 4;
	add.s64 	%rd127, %rd17, %rd126;
	mul.wide.s32 	%rd128, %r1059, 4;
	add.s64 	%rd129, %rd17, %rd128;
	mul.wide.s32 	%rd130, %r1060, 4;
	add.s64 	%rd131, %rd17, %rd130;
	mul.wide.s32 	%rd132, %r1061, 4;
	add.s64 	%rd133, %rd17, %rd132;
	.loc	1 35 51                         // matmul-with-dot-v2.py:35:51
	mul.wide.s32 	%rd134, %r1027, 4;
	add.s64 	%rd86, %rd103, %rd134;
	add.s64 	%rd87, %rd105, %rd134;
	add.s64 	%rd88, %rd107, %rd134;
	add.s64 	%rd89, %rd109, %rd134;
	add.s64 	%rd90, %rd111, %rd134;
	add.s64 	%rd91, %rd113, %rd134;
	add.s64 	%rd92, %rd115, %rd134;
	add.s64 	%rd93, %rd117, %rd134;
	add.s64 	%rd94, %rd119, %rd134;
	add.s64 	%rd95, %rd121, %rd134;
	add.s64 	%rd96, %rd123, %rd134;
	add.s64 	%rd97, %rd125, %rd134;
	add.s64 	%rd98, %rd127, %rd134;
	add.s64 	%rd99, %rd129, %rd134;
	add.s64 	%rd100, %rd131, %rd134;
	add.s64 	%rd101, %rd133, %rd134;
	.loc	1 38 33                         // matmul-with-dot-v2.py:38:33
	setp.lt.s32 	%p70, %r1029, %r176;
	setp.lt.s32 	%p71, %r1044, %r176;
	setp.lt.s32 	%p72, %r1043, %r176;
	setp.lt.s32 	%p73, %r1042, %r176;
	setp.lt.s32 	%p74, %r1041, %r176;
	setp.lt.s32 	%p75, %r1040, %r176;
	setp.lt.s32 	%p76, %r1039, %r176;
	setp.lt.s32 	%p77, %r1038, %r176;
	setp.lt.s32 	%p78, %r1037, %r176;
	setp.lt.s32 	%p79, %r1036, %r176;
	setp.lt.s32 	%p80, %r1035, %r176;
	setp.lt.s32 	%p81, %r1034, %r176;
	setp.lt.s32 	%p82, %r1033, %r176;
	setp.lt.s32 	%p83, %r1032, %r176;
	setp.lt.s32 	%p84, %r1031, %r176;
	setp.lt.s32 	%p85, %r1030, %r176;
	.loc	1 38 58                         // matmul-with-dot-v2.py:38:58
	setp.lt.s32 	%p86, %r1027, %r178;
	.loc	1 38 39                         // matmul-with-dot-v2.py:38:39
	and.pred  	%p54, %p70, %p86;
	and.pred  	%p55, %p71, %p86;
	and.pred  	%p56, %p72, %p86;
	and.pred  	%p57, %p73, %p86;
	and.pred  	%p58, %p74, %p86;
	and.pred  	%p59, %p75, %p86;
	and.pred  	%p60, %p76, %p86;
	and.pred  	%p61, %p77, %p86;
	and.pred  	%p62, %p78, %p86;
	and.pred  	%p63, %p79, %p86;
	and.pred  	%p64, %p80, %p86;
	and.pred  	%p65, %p81, %p86;
	and.pred  	%p66, %p82, %p86;
	and.pred  	%p67, %p83, %p86;
	and.pred  	%p68, %p84, %p86;
	and.pred  	%p69, %p85, %p86;
	.loc	1 39 21                         // matmul-with-dot-v2.py:39:21
	shl.b32 	%r1062, %r2, 1;
	and.b32  	%r1063, %r1062, 6;
	shl.b32 	%r1064, %r2, 4;
	and.b32  	%r1065, %r1064, 192;
	or.b32  	%r1066, %r1065, %r1063;
	shl.b32 	%r1067, %r3, 4;
	or.b32  	%r1068, %r1066, %r1067;
	or.b32  	%r1069, %r1068, %r1114;
	shl.b32 	%r1070, %r5, 4;
	or.b32  	%r1071, %r1069, %r1070;
	and.b32  	%r1072, %r1025, 508;
	shr.u32 	%r1073, %r1071, 4;
	add.s32 	%r1074, %r1073, %r1071;
	shl.b32 	%r1075, %r1074, 2;
	add.s32 	%r865, %r256, %r1075;
	mov.pred 	%p22, -1;
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r865 + 0 ], { %r1115, %r1116 };
	// end inline asm
	or.b32  	%r1077, %r1071, 512;
	shr.u32 	%r1078, %r1077, 4;
	add.s32 	%r1079, %r1078, %r1071;
	shl.b32 	%r1080, %r1079, 2;
	add.s32 	%r1081, %r256, %r1080;
	add.s32 	%r868, %r1081, 2048;
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r868 + 0 ], { %r1117, %r1118 };
	// end inline asm
	add.s32 	%r871, %r865, 64;
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r871 + 0 ], { %r1119, %r1120 };
	// end inline asm
	and.b32  	%r1082, %r1078, 268435452;
	add.s32 	%r1083, %r1082, %r1071;
	shl.b32 	%r1084, %r1083, 2;
	add.s32 	%r1085, %r256, %r1084;
	add.s32 	%r874, %r1085, 2112;
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r874 + 0 ], { %r1121, %r1122 };
	// end inline asm
	add.s32 	%r877, %r865, 128;
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r877 + 0 ], { %r1123, %r1124 };
	// end inline asm
	add.s32 	%r880, %r1085, 2176;
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r880 + 0 ], { %r1125, %r1126 };
	// end inline asm
	add.s32 	%r883, %r865, 192;
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r883 + 0 ], { %r1127, %r1128 };
	// end inline asm
	add.s32 	%r886, %r1085, 2240;
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r886 + 0 ], { %r1129, %r1130 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r1086, %r2, 2;
	and.b32  	%r1087, %r1086, 28;
	add.s32 	%r1088, %r1087, %r1072;
	shl.b32 	%r1089, %r1088, 2;
	add.s32 	%r1090, %r256, %r1089;
	ld.shared.v4.u32 	{%r961, %r962, %r963, %r964}, [%r1090];
	or.b32  	%r1091, %r1072, 512;
	shr.u32 	%r1092, %r1091, 4;
	and.b32  	%r1093, %r1092, 60;
	add.s32 	%r1094, %r1093, %r1072;
	shl.b32 	%r1095, %r1094, 2;
	add.s32 	%r1096, %r256, %r1095;
	ld.shared.v4.u32 	{%r965, %r966, %r967, %r968}, [%r1096+2048];
	or.b32  	%r1097, %r1072, 1024;
	shr.u32 	%r1098, %r1097, 4;
	and.b32  	%r1099, %r1098, 92;
	add.s32 	%r1100, %r1099, %r1072;
	shl.b32 	%r1101, %r1100, 2;
	add.s32 	%r1102, %r256, %r1101;
	ld.shared.v4.u32 	{%r969, %r970, %r971, %r972}, [%r1102+4096];
	or.b32  	%r1103, %r1072, 1536;
	shr.u32 	%r1104, %r1103, 4;
	and.b32  	%r1105, %r1104, 124;
	add.s32 	%r1106, %r1105, %r1072;
	shl.b32 	%r1107, %r1106, 2;
	add.s32 	%r1108, %r256, %r1107;
	ld.shared.v4.u32 	{%r973, %r974, %r975, %r976}, [%r1108+6144];
	bar.sync 	0;
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r865 + 0 ], { %r1131, %r1132 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r868 + 0 ], { %r1133, %r1134 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r871 + 0 ], { %r1135, %r1136 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r874 + 0 ], { %r1137, %r1138 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r877 + 0 ], { %r1139, %r1140 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r880 + 0 ], { %r1141, %r1142 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r883 + 0 ], { %r1143, %r1144 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r886 + 0 ], { %r1145, %r1146 };
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r977, %r978, %r979, %r980}, [%r1090];
	ld.shared.v4.u32 	{%r981, %r982, %r983, %r984}, [%r1096+2048];
	ld.shared.v4.u32 	{%r985, %r986, %r987, %r988}, [%r1102+4096];
	ld.shared.v4.u32 	{%r989, %r990, %r991, %r992}, [%r1108+6144];
	bar.sync 	0;
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r865 + 0 ], { %r1147, %r1148 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r868 + 0 ], { %r1149, %r1150 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r871 + 0 ], { %r1151, %r1152 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r874 + 0 ], { %r1153, %r1154 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r877 + 0 ], { %r1155, %r1156 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r880 + 0 ], { %r1157, %r1158 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r883 + 0 ], { %r1159, %r1160 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r886 + 0 ], { %r1161, %r1162 };
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r993, %r994, %r995, %r996}, [%r1090];
	ld.shared.v4.u32 	{%r997, %r998, %r999, %r1000}, [%r1096+2048];
	ld.shared.v4.u32 	{%r1001, %r1002, %r1003, %r1004}, [%r1102+4096];
	ld.shared.v4.u32 	{%r1005, %r1006, %r1007, %r1008}, [%r1108+6144];
	bar.sync 	0;
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r865 + 0 ], { %r1163, %r1164 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r868 + 0 ], { %r1165, %r1166 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r871 + 0 ], { %r1167, %r1168 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r874 + 0 ], { %r1169, %r1170 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r877 + 0 ], { %r1171, %r1172 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r880 + 0 ], { %r1173, %r1174 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r883 + 0 ], { %r1175, %r1176 };
	// end inline asm
	// begin inline asm
	@%p22 st.shared.v2.b32 [ %r886 + 0 ], { %r1177, %r1178 };
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r1009, %r1010, %r1011, %r1012}, [%r1090];
	ld.shared.v4.u32 	{%r1013, %r1014, %r1015, %r1016}, [%r1096+2048];
	ld.shared.v4.u32 	{%r1017, %r1018, %r1019, %r1020}, [%r1102+4096];
	ld.shared.v4.u32 	{%r1021, %r1022, %r1023, %r1024}, [%r1108+6144];
	// begin inline asm
	@%p54 st.global.v4.b32 [ %rd86 + 0 ], { %r961, %r962, %r963, %r964 };
	// end inline asm
	// begin inline asm
	@%p55 st.global.v4.b32 [ %rd87 + 0 ], { %r965, %r966, %r967, %r968 };
	// end inline asm
	// begin inline asm
	@%p56 st.global.v4.b32 [ %rd88 + 0 ], { %r969, %r970, %r971, %r972 };
	// end inline asm
	// begin inline asm
	@%p57 st.global.v4.b32 [ %rd89 + 0 ], { %r973, %r974, %r975, %r976 };
	// end inline asm
	// begin inline asm
	@%p58 st.global.v4.b32 [ %rd90 + 0 ], { %r977, %r978, %r979, %r980 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd91 + 0 ], { %r981, %r982, %r983, %r984 };
	// end inline asm
	// begin inline asm
	@%p60 st.global.v4.b32 [ %rd92 + 0 ], { %r985, %r986, %r987, %r988 };
	// end inline asm
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd93 + 0 ], { %r989, %r990, %r991, %r992 };
	// end inline asm
	// begin inline asm
	@%p62 st.global.v4.b32 [ %rd94 + 0 ], { %r993, %r994, %r995, %r996 };
	// end inline asm
	// begin inline asm
	@%p63 st.global.v4.b32 [ %rd95 + 0 ], { %r997, %r998, %r999, %r1000 };
	// end inline asm
	// begin inline asm
	@%p64 st.global.v4.b32 [ %rd96 + 0 ], { %r1001, %r1002, %r1003, %r1004 };
	// end inline asm
	// begin inline asm
	@%p65 st.global.v4.b32 [ %rd97 + 0 ], { %r1005, %r1006, %r1007, %r1008 };
	// end inline asm
	// begin inline asm
	@%p66 st.global.v4.b32 [ %rd98 + 0 ], { %r1009, %r1010, %r1011, %r1012 };
	// end inline asm
	// begin inline asm
	@%p67 st.global.v4.b32 [ %rd99 + 0 ], { %r1013, %r1014, %r1015, %r1016 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd100 + 0 ], { %r1017, %r1018, %r1019, %r1020 };
	// end inline asm
	// begin inline asm
	@%p69 st.global.v4.b32 [ %rd101 + 0 ], { %r1021, %r1022, %r1023, %r1024 };
	// end inline asm
	.loc	1 39 4                          // matmul-with-dot-v2.py:39:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm80/matmul-with-dot-v2.py"
	.file	2 "/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 163                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x9c DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 45
.b8 119
.b8 105
.b8 116
.b8 104
.b8 45
.b8 100
.b8 111
.b8 116
.b8 45
.b8 118
.b8 50
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 45
.b8 109
.b8 108
.b8 45
.b8 114
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 47
.b8 101
.b8 120
.b8 97
.b8 109
.b8 112
.b8 108
.b8 101
.b8 115
.b8 47
.b8 99
.b8 117
.b8 98
.b8 105
.b8 110
.b8 95
.b8 114
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 47
.b8 115
.b8 109
.b8 56
.b8 48
.b8 0
.b8 2                                   // Abbrev [2] 0x68:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x78:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 104                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x8d:0x18 DW_TAG_inlined_subroutine
.b32 104                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 29                                  // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
