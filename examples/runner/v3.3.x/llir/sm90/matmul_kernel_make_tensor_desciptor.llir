; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel_make_tensor_desciptor(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, ptr addrspace(1) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y(), !dbg !11
  %13 = mul i32 %10, %12, !dbg !11
  %14 = add i32 %13, %9, !dbg !11
  %15 = mul i32 %14, %11, !dbg !11
  %16 = add i32 %15, %8, !dbg !11
  %17 = mul i32 %16, 384, !dbg !11
  %18 = sext i32 %17 to i64, !dbg !11
  %19 = getelementptr i8, ptr addrspace(1) %6, i64 %18, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %21 = icmp slt i32 %20, 32, !dbg !11
  %22 = sext i32 %20 to i64, !dbg !11
  %23 = getelementptr i32, ptr addrspace(3) @global_smem, i64 %22, !dbg !11
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> zeroinitializer, i1 %21) #3, !dbg !11
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !11
  %24 = icmp eq i32 %20, 0, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %0, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 128, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %4, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %3, i1 %24) #3, !dbg !11
  %25 = ashr i32 %4, 4, !dbg !11
  %26 = sext i32 %25 to i64, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %26, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x2;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %19, ptr addrspace(3) @global_smem, i1 %21) #3, !dbg !11
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %19, i1 %21) #3, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !11
  %27 = sext i32 %5 to i64, !dbg !12
  %28 = add i32 %17, 128, !dbg !12
  %29 = sext i32 %28 to i64, !dbg !12
  %30 = getelementptr i8, ptr addrspace(1) %6, i64 %29, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !12
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> zeroinitializer, i1 %21) #3, !dbg !12
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %1, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %5, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %4, i1 %24) #3, !dbg !12
  %31 = ashr i64 %27, 4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %31, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x2;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %30, ptr addrspace(3) @global_smem, i1 %21) #3, !dbg !12
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %30, i1 %21) #3, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !12
  %32 = add i32 %17, 256, !dbg !13
  %33 = sext i32 %32 to i64, !dbg !13
  %34 = getelementptr i8, ptr addrspace(1) %6, i64 %33, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !13
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> zeroinitializer, i1 %21) #3, !dbg !13
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %2, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 128, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %5, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %3, i1 %24) #3, !dbg !13
  %35 = ashr i64 %27, 3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %35, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x3;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %34, ptr addrspace(3) @global_smem, i1 %21) #3, !dbg !13
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %34, i1 %21) #3, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !13
  %36 = add i32 %4, 63, !dbg !14
  %37 = sdiv i32 %36, 64, !dbg !18
  %38 = shl i32 %8, 7, !dbg !19
  %39 = shl i32 %9, 6, !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960)) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40968)) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40976)) #3, !dbg !21
  %40 = icmp sgt i32 %36, 63, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %41 = and i1 %24, %40, !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 12288;", "b,r"(i1 %41, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960)) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %42 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %43 = extractvalue { i32, i1 } %42, 1, !dbg !22
  %44 = and i1 %40, %43, !dbg !22
  %45 = icmp ult i32 %20, 32, !dbg !22
  %46 = and i1 %45, %44, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %46, ptr addrspace(3) @global_smem, ptr addrspace(1) %19, i32 0, i32 %38, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960)) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %47 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !23
  %48 = extractvalue { i32, i1 } %47, 1, !dbg !23
  %49 = and i1 %40, %48, !dbg !23
  %50 = and i1 %45, %49, !dbg !23
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %50, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), ptr addrspace(1) %30, i32 %39, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960)) #3, !dbg !23
  %51 = icmp sgt i32 %36, 127, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %52 = and i1 %24, %51, !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 12288;", "b,r"(i1 %52, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40968)) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %53 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %54 = extractvalue { i32, i1 } %53, 1, !dbg !22
  %55 = and i1 %51, %54, !dbg !22
  %56 = and i1 %45, %55, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %56, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), ptr addrspace(1) %19, i32 64, i32 %38, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40968)) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %57 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !23
  %58 = extractvalue { i32, i1 } %57, 1, !dbg !23
  %59 = and i1 %51, %58, !dbg !23
  %60 = and i1 %45, %59, !dbg !23
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %60, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 28672), ptr addrspace(1) %30, i32 %39, i32 64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40968)) #3, !dbg !23
  br i1 %40, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !21

.._crit_edge_crit_edge:                           ; preds = %7
  %.pre = and i32 %20, 2, !dbg !24
  %.pre10 = and i32 %20, 4, !dbg !24
  %.pre12 = shl i32 %20, 6, !dbg !24
  %.pre14 = and i32 %.pre12, 512, !dbg !24
  br label %._crit_edge, !dbg !21

.lr.ph:                                           ; preds = %7
  %61 = add nsw i32 %37, -2
  %62 = lshr i32 %20, 5
  %63 = and i32 %20, 2
  %64 = icmp eq i32 %63, 0
  %65 = and i32 %20, 4
  %66 = icmp eq i32 %65, 0
  %67 = and i32 %20, 16
  %68 = and i32 %20, 32
  %69 = and i32 %20, 64
  %70 = and i32 %20, 127
  %71 = zext nneg i32 %70 to i64
  %72 = and i32 %20, 15
  %73 = or disjoint i32 %72, 144
  %74 = xor i32 %73, %67
  %75 = and i32 %20, 96
  %76 = or disjoint i32 %75, %74
  %77 = zext nneg i32 %76 to i64
  %78 = and i32 %20, 31
  %79 = or disjoint i32 %78, 288
  %80 = xor i32 %79, %68
  %81 = or disjoint i32 %80, %69
  %82 = zext nneg i32 %81 to i64
  %83 = or disjoint i32 %72, 432
  %and.ra = and i32 %20, 48
  %84 = xor i32 %83, %and.ra
  %85 = or disjoint i32 %84, %69
  %86 = zext nneg i32 %85 to i64
  %87 = or disjoint i32 %70, 512
  %88 = zext nneg i32 %87 to i64
  %89 = or disjoint i32 %72, 656
  %90 = xor i32 %89, %67
  %91 = or disjoint i32 %75, %90
  %92 = zext nneg i32 %91 to i64
  %93 = or disjoint i32 %78, 800
  %94 = xor i32 %93, %68
  %95 = or disjoint i32 %94, %69
  %96 = zext nneg i32 %95 to i64
  %97 = or disjoint i32 %72, 944
  %98 = xor i32 %97, %and.ra
  %99 = or disjoint i32 %98, %69
  %100 = zext nneg i32 %99 to i64
  %101 = or disjoint i32 %70, 1024
  %102 = zext nneg i32 %101 to i64
  %103 = or disjoint i32 %72, 1168
  %104 = xor i32 %103, %67
  %105 = or disjoint i32 %75, %104
  %106 = zext nneg i32 %105 to i64
  %107 = or disjoint i32 %78, 1312
  %108 = xor i32 %107, %68
  %109 = or disjoint i32 %108, %69
  %110 = zext nneg i32 %109 to i64
  %111 = or disjoint i32 %72, 1456
  %112 = xor i32 %111, %and.ra
  %113 = or disjoint i32 %112, %69
  %114 = zext nneg i32 %113 to i64
  %115 = or disjoint i32 %70, 1536
  %116 = zext nneg i32 %115 to i64
  %117 = or disjoint i32 %72, 1680
  %118 = xor i32 %117, %67
  %119 = or disjoint i32 %75, %118
  %120 = zext nneg i32 %119 to i64
  %121 = or disjoint i32 %78, 1824
  %122 = xor i32 %121, %68
  %123 = or disjoint i32 %122, %69
  %124 = zext nneg i32 %123 to i64
  %125 = or disjoint i32 %72, 1968
  %126 = xor i32 %125, %and.ra
  %127 = or disjoint i32 %126, %69
  %128 = zext nneg i32 %127 to i64
  %129 = or disjoint i32 %70, 2048
  %130 = zext nneg i32 %129 to i64
  %131 = or disjoint i32 %72, 2192
  %132 = xor i32 %131, %67
  %133 = or disjoint i32 %75, %132
  %134 = zext nneg i32 %133 to i64
  %135 = or disjoint i32 %78, 2336
  %136 = xor i32 %135, %68
  %137 = or disjoint i32 %136, %69
  %138 = zext nneg i32 %137 to i64
  %139 = or disjoint i32 %72, 2480
  %140 = xor i32 %139, %and.ra
  %141 = or disjoint i32 %140, %69
  %142 = zext nneg i32 %141 to i64
  %143 = or disjoint i32 %70, 2560
  %144 = zext nneg i32 %143 to i64
  %145 = or disjoint i32 %72, 2704
  %146 = xor i32 %145, %67
  %147 = or disjoint i32 %75, %146
  %148 = zext nneg i32 %147 to i64
  %149 = or disjoint i32 %78, 2848
  %150 = xor i32 %149, %68
  %151 = or disjoint i32 %150, %69
  %152 = zext nneg i32 %151 to i64
  %153 = or disjoint i32 %72, 2992
  %154 = xor i32 %153, %and.ra
  %155 = or disjoint i32 %154, %69
  %156 = zext nneg i32 %155 to i64
  %157 = or disjoint i32 %70, 3072
  %158 = zext nneg i32 %157 to i64
  %159 = or disjoint i32 %72, 3216
  %160 = xor i32 %159, %67
  %161 = or disjoint i32 %75, %160
  %162 = zext nneg i32 %161 to i64
  %163 = or disjoint i32 %78, 3360
  %164 = xor i32 %163, %68
  %165 = or disjoint i32 %164, %69
  %166 = zext nneg i32 %165 to i64
  %167 = or disjoint i32 %72, 3504
  %168 = xor i32 %167, %and.ra
  %169 = or disjoint i32 %168, %69
  %170 = zext nneg i32 %169 to i64
  %171 = or disjoint i32 %70, 3584
  %172 = zext nneg i32 %171 to i64
  %173 = or disjoint i32 %72, 3728
  %174 = xor i32 %173, %67
  %175 = or disjoint i32 %75, %174
  %176 = zext nneg i32 %175 to i64
  %177 = or disjoint i32 %78, 3872
  %178 = xor i32 %177, %68
  %179 = or disjoint i32 %178, %69
  %180 = zext nneg i32 %179 to i64
  %181 = or disjoint i32 %72, 4016
  %182 = xor i32 %181, %and.ra
  %183 = or disjoint i32 %182, %69
  %184 = zext nneg i32 %183 to i64
  %185 = shl i32 %20, 6
  %186 = and i32 %185, 64
  %187 = select i1 %64, i32 0, i32 144
  %188 = or disjoint i32 %187, %186
  %189 = select i1 %66, i32 0, i32 288
  %190 = and i32 %185, 512
  %191 = shl nuw nsw i32 %67, 6
  %192 = or disjoint i32 %191, %190
  %193 = or disjoint i32 %192, %189
  %194 = or disjoint i32 %193, %188
  %195 = shl nuw nsw i32 %68, 6
  %196 = or disjoint i32 %194, %195
  %.lobit = lshr exact i32 %69, 6
  %197 = or disjoint i32 %196, %.lobit
  %198 = zext nneg i32 %197 to i64
  %199 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %198
  %200 = or disjoint i32 %194, 2
  %201 = or disjoint i32 %.lobit, %195
  %202 = xor i32 %201, %200
  %203 = zext nneg i32 %202 to i64
  %204 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %203
  %205 = or disjoint i32 %194, 4
  %206 = xor i32 %201, %205
  %207 = zext nneg i32 %206 to i64
  %208 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %207
  %209 = or disjoint i32 %194, 6
  %210 = xor i32 %201, %209
  %211 = zext nneg i32 %210 to i64
  %212 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %211
  %213 = or disjoint i32 %194, 8
  %214 = xor i32 %201, %213
  %215 = zext nneg i32 %214 to i64
  %216 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %215
  %217 = or disjoint i32 %194, 10
  %218 = xor i32 %201, %217
  %219 = zext nneg i32 %218 to i64
  %220 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %219
  %221 = or disjoint i32 %194, 12
  %222 = xor i32 %201, %221
  %223 = zext nneg i32 %222 to i64
  %224 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %223
  %225 = or disjoint i32 %194, 14
  %226 = xor i32 %201, %225
  %227 = zext nneg i32 %226 to i64
  %228 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %227
  %229 = or disjoint i32 %186, 16
  %230 = xor i32 %229, %187
  %231 = or disjoint i32 %190, %230
  %232 = or disjoint i32 %231, %191
  %233 = or disjoint i32 %232, %189
  %234 = xor i32 %201, %233
  %235 = zext nneg i32 %234 to i64
  %236 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %235
  %237 = or disjoint i32 %186, 18
  %238 = xor i32 %237, %187
  %239 = or disjoint i32 %190, %238
  %240 = or disjoint i32 %239, %191
  %241 = or disjoint i32 %240, %189
  %242 = xor i32 %201, %241
  %243 = zext nneg i32 %242 to i64
  %244 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %243
  %245 = or disjoint i32 %186, 20
  %246 = xor i32 %245, %187
  %247 = or disjoint i32 %190, %246
  %248 = or disjoint i32 %247, %191
  %249 = or disjoint i32 %248, %189
  %250 = xor i32 %201, %249
  %251 = zext nneg i32 %250 to i64
  %252 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %251
  %253 = or disjoint i32 %186, 22
  %254 = xor i32 %253, %187
  %255 = or disjoint i32 %190, %254
  %256 = or disjoint i32 %255, %191
  %257 = or disjoint i32 %256, %189
  %258 = xor i32 %201, %257
  %259 = zext nneg i32 %258 to i64
  %260 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %259
  %261 = or disjoint i32 %186, 24
  %262 = xor i32 %261, %187
  %263 = or disjoint i32 %190, %262
  %264 = or disjoint i32 %263, %191
  %265 = or disjoint i32 %264, %189
  %266 = xor i32 %201, %265
  %267 = zext nneg i32 %266 to i64
  %268 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %267
  %269 = or disjoint i32 %186, 26
  %270 = xor i32 %269, %187
  %271 = or disjoint i32 %190, %270
  %272 = or disjoint i32 %271, %191
  %273 = or disjoint i32 %272, %189
  %274 = xor i32 %201, %273
  %275 = zext nneg i32 %274 to i64
  %276 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %275
  %277 = or disjoint i32 %186, 28
  %278 = xor i32 %277, %187
  %279 = or disjoint i32 %190, %278
  %280 = or disjoint i32 %279, %191
  %281 = or disjoint i32 %280, %189
  %282 = xor i32 %201, %281
  %283 = zext nneg i32 %282 to i64
  %284 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %283
  %285 = or disjoint i32 %186, 30
  %286 = xor i32 %285, %187
  %287 = or disjoint i32 %190, %286
  %288 = or disjoint i32 %287, %191
  %289 = or disjoint i32 %288, %189
  %290 = xor i32 %201, %289
  %291 = zext nneg i32 %290 to i64
  %292 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %291
  %293 = or disjoint i32 %188, 32
  %294 = xor i32 %293, %189
  %295 = or disjoint i32 %190, %294
  %296 = or disjoint i32 %295, %191
  %297 = xor i32 %201, %296
  %298 = zext nneg i32 %297 to i64
  %299 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %298
  %300 = or disjoint i32 %188, 34
  %301 = xor i32 %300, %189
  %302 = or disjoint i32 %190, %301
  %303 = or disjoint i32 %302, %191
  %304 = xor i32 %201, %303
  %305 = zext nneg i32 %304 to i64
  %306 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %305
  %307 = or disjoint i32 %188, 36
  %308 = xor i32 %307, %189
  %309 = or disjoint i32 %190, %308
  %310 = or disjoint i32 %309, %191
  %311 = xor i32 %201, %310
  %312 = zext nneg i32 %311 to i64
  %313 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %312
  %314 = or disjoint i32 %188, 38
  %315 = xor i32 %314, %189
  %316 = or disjoint i32 %190, %315
  %317 = or disjoint i32 %316, %191
  %318 = xor i32 %201, %317
  %319 = zext nneg i32 %318 to i64
  %320 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %319
  %321 = or disjoint i32 %188, 40
  %322 = xor i32 %321, %189
  %323 = or disjoint i32 %190, %322
  %324 = or disjoint i32 %323, %191
  %325 = xor i32 %201, %324
  %326 = zext nneg i32 %325 to i64
  %327 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %326
  %328 = or disjoint i32 %188, 42
  %329 = xor i32 %328, %189
  %330 = or disjoint i32 %190, %329
  %331 = or disjoint i32 %330, %191
  %332 = xor i32 %201, %331
  %333 = zext nneg i32 %332 to i64
  %334 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %333
  %335 = or disjoint i32 %188, 44
  %336 = xor i32 %335, %189
  %337 = or disjoint i32 %190, %336
  %338 = or disjoint i32 %337, %191
  %339 = xor i32 %201, %338
  %340 = zext nneg i32 %339 to i64
  %341 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %340
  %342 = or disjoint i32 %188, 46
  %343 = xor i32 %342, %189
  %344 = or disjoint i32 %190, %343
  %345 = or disjoint i32 %344, %191
  %346 = xor i32 %201, %345
  %347 = zext nneg i32 %346 to i64
  %348 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %347
  %349 = or disjoint i32 %186, 48
  %350 = or disjoint i32 %189, %187
  %351 = xor i32 %350, %349
  %352 = or disjoint i32 %190, %351
  %353 = or disjoint i32 %352, %191
  %354 = or disjoint i32 %195, %353
  %355 = or i32 %354, %.lobit
  %356 = zext nneg i32 %355 to i64
  %357 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %356
  %358 = or disjoint i32 %186, 50
  %359 = xor i32 %350, %358
  %360 = or disjoint i32 %190, %359
  %361 = or disjoint i32 %360, %191
  %362 = or disjoint i32 %195, %361
  %363 = or i32 %362, %.lobit
  %364 = zext nneg i32 %363 to i64
  %365 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %364
  %366 = or disjoint i32 %186, 52
  %367 = xor i32 %350, %366
  %368 = or disjoint i32 %190, %367
  %369 = or disjoint i32 %368, %191
  %370 = or disjoint i32 %195, %369
  %371 = or i32 %370, %.lobit
  %372 = zext nneg i32 %371 to i64
  %373 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %372
  %374 = or disjoint i32 %186, 54
  %375 = xor i32 %350, %374
  %376 = or disjoint i32 %190, %375
  %377 = or disjoint i32 %376, %191
  %378 = or disjoint i32 %195, %377
  %379 = or i32 %378, %.lobit
  %380 = zext nneg i32 %379 to i64
  %381 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %380
  %382 = or disjoint i32 %186, 56
  %383 = xor i32 %350, %382
  %384 = or disjoint i32 %190, %383
  %385 = or disjoint i32 %384, %191
  %386 = or disjoint i32 %195, %385
  %387 = or i32 %386, %.lobit
  %388 = zext nneg i32 %387 to i64
  %389 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %388
  %390 = or disjoint i32 %186, 58
  %391 = xor i32 %350, %390
  %392 = or disjoint i32 %190, %391
  %393 = or disjoint i32 %392, %191
  %394 = or disjoint i32 %195, %393
  %395 = or i32 %394, %.lobit
  %396 = zext nneg i32 %395 to i64
  %397 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %396
  %398 = or disjoint i32 %186, 60
  %399 = xor i32 %350, %398
  %400 = or disjoint i32 %190, %399
  %401 = or disjoint i32 %400, %191
  %402 = or disjoint i32 %195, %401
  %403 = or i32 %402, %.lobit
  %404 = zext nneg i32 %403 to i64
  %405 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %404
  %406 = or disjoint i32 %186, 62
  %407 = xor i32 %350, %406
  %408 = or disjoint i32 %190, %407
  %409 = or disjoint i32 %408, %191
  %410 = or disjoint i32 %195, %409
  %411 = or i32 %410, %.lobit
  %412 = zext nneg i32 %411 to i64
  %413 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %412
  %414 = and i32 %62, 134217724
  %415 = lshr exact i64 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864) to i64), 4
  %416 = and i64 %415, 16383
  %417 = or disjoint i64 %416, -9223371899399045120
  %418 = add nuw nsw i64 %416, -9223371899399045118
  br label %419, !dbg !21

419:                                              ; preds = %.lr.ph, %419
  %420 = phi i32 [ 0, %.lr.ph ], [ %493, %419 ]
  %421 = phi i32 [ -1, %.lr.ph ], [ %491, %419 ]
  %422 = phi i32 [ 1, %.lr.ph ], [ %780, %419 ]
  %423 = phi float [ 0.000000e+00, %.lr.ph ], [ %714, %419 ]
  %424 = phi float [ 0.000000e+00, %.lr.ph ], [ %715, %419 ]
  %425 = phi float [ 0.000000e+00, %.lr.ph ], [ %716, %419 ]
  %426 = phi float [ 0.000000e+00, %.lr.ph ], [ %717, %419 ]
  %427 = phi float [ 0.000000e+00, %.lr.ph ], [ %718, %419 ]
  %428 = phi float [ 0.000000e+00, %.lr.ph ], [ %719, %419 ]
  %429 = phi float [ 0.000000e+00, %.lr.ph ], [ %720, %419 ]
  %430 = phi float [ 0.000000e+00, %.lr.ph ], [ %721, %419 ]
  %431 = phi float [ 0.000000e+00, %.lr.ph ], [ %722, %419 ]
  %432 = phi float [ 0.000000e+00, %.lr.ph ], [ %723, %419 ]
  %433 = phi float [ 0.000000e+00, %.lr.ph ], [ %724, %419 ]
  %434 = phi float [ 0.000000e+00, %.lr.ph ], [ %725, %419 ]
  %435 = phi float [ 0.000000e+00, %.lr.ph ], [ %726, %419 ]
  %436 = phi float [ 0.000000e+00, %.lr.ph ], [ %727, %419 ]
  %437 = phi float [ 0.000000e+00, %.lr.ph ], [ %728, %419 ]
  %438 = phi float [ 0.000000e+00, %.lr.ph ], [ %729, %419 ]
  %439 = phi float [ 0.000000e+00, %.lr.ph ], [ %730, %419 ]
  %440 = phi float [ 0.000000e+00, %.lr.ph ], [ %731, %419 ]
  %441 = phi float [ 0.000000e+00, %.lr.ph ], [ %732, %419 ]
  %442 = phi float [ 0.000000e+00, %.lr.ph ], [ %733, %419 ]
  %443 = phi float [ 0.000000e+00, %.lr.ph ], [ %734, %419 ]
  %444 = phi float [ 0.000000e+00, %.lr.ph ], [ %735, %419 ]
  %445 = phi float [ 0.000000e+00, %.lr.ph ], [ %736, %419 ]
  %446 = phi float [ 0.000000e+00, %.lr.ph ], [ %737, %419 ]
  %447 = phi float [ 0.000000e+00, %.lr.ph ], [ %738, %419 ]
  %448 = phi float [ 0.000000e+00, %.lr.ph ], [ %739, %419 ]
  %449 = phi float [ 0.000000e+00, %.lr.ph ], [ %740, %419 ]
  %450 = phi float [ 0.000000e+00, %.lr.ph ], [ %741, %419 ]
  %451 = phi float [ 0.000000e+00, %.lr.ph ], [ %742, %419 ]
  %452 = phi float [ 0.000000e+00, %.lr.ph ], [ %743, %419 ]
  %453 = phi float [ 0.000000e+00, %.lr.ph ], [ %744, %419 ]
  %454 = phi float [ 0.000000e+00, %.lr.ph ], [ %745, %419 ]
  %455 = phi float [ 0.000000e+00, %.lr.ph ], [ %746, %419 ]
  %456 = phi float [ 0.000000e+00, %.lr.ph ], [ %747, %419 ]
  %457 = phi float [ 0.000000e+00, %.lr.ph ], [ %748, %419 ]
  %458 = phi float [ 0.000000e+00, %.lr.ph ], [ %749, %419 ]
  %459 = phi float [ 0.000000e+00, %.lr.ph ], [ %750, %419 ]
  %460 = phi float [ 0.000000e+00, %.lr.ph ], [ %751, %419 ]
  %461 = phi float [ 0.000000e+00, %.lr.ph ], [ %752, %419 ]
  %462 = phi float [ 0.000000e+00, %.lr.ph ], [ %753, %419 ]
  %463 = phi float [ 0.000000e+00, %.lr.ph ], [ %754, %419 ]
  %464 = phi float [ 0.000000e+00, %.lr.ph ], [ %755, %419 ]
  %465 = phi float [ 0.000000e+00, %.lr.ph ], [ %756, %419 ]
  %466 = phi float [ 0.000000e+00, %.lr.ph ], [ %757, %419 ]
  %467 = phi float [ 0.000000e+00, %.lr.ph ], [ %758, %419 ]
  %468 = phi float [ 0.000000e+00, %.lr.ph ], [ %759, %419 ]
  %469 = phi float [ 0.000000e+00, %.lr.ph ], [ %760, %419 ]
  %470 = phi float [ 0.000000e+00, %.lr.ph ], [ %761, %419 ]
  %471 = phi float [ 0.000000e+00, %.lr.ph ], [ %762, %419 ]
  %472 = phi float [ 0.000000e+00, %.lr.ph ], [ %763, %419 ]
  %473 = phi float [ 0.000000e+00, %.lr.ph ], [ %764, %419 ]
  %474 = phi float [ 0.000000e+00, %.lr.ph ], [ %765, %419 ]
  %475 = phi float [ 0.000000e+00, %.lr.ph ], [ %766, %419 ]
  %476 = phi float [ 0.000000e+00, %.lr.ph ], [ %767, %419 ]
  %477 = phi float [ 0.000000e+00, %.lr.ph ], [ %768, %419 ]
  %478 = phi float [ 0.000000e+00, %.lr.ph ], [ %769, %419 ]
  %479 = phi float [ 0.000000e+00, %.lr.ph ], [ %770, %419 ]
  %480 = phi float [ 0.000000e+00, %.lr.ph ], [ %771, %419 ]
  %481 = phi float [ 0.000000e+00, %.lr.ph ], [ %772, %419 ]
  %482 = phi float [ 0.000000e+00, %.lr.ph ], [ %773, %419 ]
  %483 = phi float [ 0.000000e+00, %.lr.ph ], [ %774, %419 ]
  %484 = phi float [ 0.000000e+00, %.lr.ph ], [ %775, %419 ]
  %485 = phi float [ 0.000000e+00, %.lr.ph ], [ %776, %419 ]
  %486 = phi float [ 0.000000e+00, %.lr.ph ], [ %777, %419 ]
  %487 = phi i32 [ 0, %.lr.ph ], [ %800, %419 ]
  %488 = icmp slt i32 %487, %61, !dbg !21
  %489 = add i32 %421, 1, !dbg !21
  %490 = icmp sgt i32 %489, 2, !dbg !21
  %491 = select i1 %490, i32 0, i32 %489, !dbg !21
  %492 = zext i1 %490 to i32, !dbg !21
  %493 = xor i32 %420, %492, !dbg !21
  %494 = sext i32 %491 to i64, !dbg !21
  %495 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %494, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) %495, i32 %493) #3, !dbg !21
  %496 = shl i32 %491, 12, !dbg !23
  %497 = sext i32 %496 to i64, !dbg !23
  %498 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %497, !dbg !23
  %499 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %71, !dbg !23
  %500 = load <1 x i8>, ptr addrspace(3) %499, align 1, !dbg !23
  %501 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %77, !dbg !23
  %502 = load <1 x i8>, ptr addrspace(3) %501, align 1, !dbg !23
  %503 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %82, !dbg !23
  %504 = load <1 x i8>, ptr addrspace(3) %503, align 1, !dbg !23
  %505 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %86, !dbg !23
  %506 = load <1 x i8>, ptr addrspace(3) %505, align 1, !dbg !23
  %507 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %88, !dbg !23
  %508 = load <1 x i8>, ptr addrspace(3) %507, align 1, !dbg !23
  %509 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %92, !dbg !23
  %510 = load <1 x i8>, ptr addrspace(3) %509, align 1, !dbg !23
  %511 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %96, !dbg !23
  %512 = load <1 x i8>, ptr addrspace(3) %511, align 1, !dbg !23
  %513 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %100, !dbg !23
  %514 = load <1 x i8>, ptr addrspace(3) %513, align 1, !dbg !23
  %515 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %102, !dbg !23
  %516 = load <1 x i8>, ptr addrspace(3) %515, align 1, !dbg !23
  %517 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %106, !dbg !23
  %518 = load <1 x i8>, ptr addrspace(3) %517, align 1, !dbg !23
  %519 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %110, !dbg !23
  %520 = load <1 x i8>, ptr addrspace(3) %519, align 1, !dbg !23
  %521 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %114, !dbg !23
  %522 = load <1 x i8>, ptr addrspace(3) %521, align 1, !dbg !23
  %523 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %116, !dbg !23
  %524 = load <1 x i8>, ptr addrspace(3) %523, align 1, !dbg !23
  %525 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %120, !dbg !23
  %526 = load <1 x i8>, ptr addrspace(3) %525, align 1, !dbg !23
  %527 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %124, !dbg !23
  %528 = load <1 x i8>, ptr addrspace(3) %527, align 1, !dbg !23
  %529 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %128, !dbg !23
  %530 = load <1 x i8>, ptr addrspace(3) %529, align 1, !dbg !23
  %531 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %130, !dbg !23
  %532 = load <1 x i8>, ptr addrspace(3) %531, align 1, !dbg !23
  %533 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %134, !dbg !23
  %534 = load <1 x i8>, ptr addrspace(3) %533, align 1, !dbg !23
  %535 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %138, !dbg !23
  %536 = load <1 x i8>, ptr addrspace(3) %535, align 1, !dbg !23
  %537 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %142, !dbg !23
  %538 = load <1 x i8>, ptr addrspace(3) %537, align 1, !dbg !23
  %539 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %144, !dbg !23
  %540 = load <1 x i8>, ptr addrspace(3) %539, align 1, !dbg !23
  %541 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %148, !dbg !23
  %542 = load <1 x i8>, ptr addrspace(3) %541, align 1, !dbg !23
  %543 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %152, !dbg !23
  %544 = load <1 x i8>, ptr addrspace(3) %543, align 1, !dbg !23
  %545 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %156, !dbg !23
  %546 = load <1 x i8>, ptr addrspace(3) %545, align 1, !dbg !23
  %547 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %158, !dbg !23
  %548 = load <1 x i8>, ptr addrspace(3) %547, align 1, !dbg !23
  %549 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %162, !dbg !23
  %550 = load <1 x i8>, ptr addrspace(3) %549, align 1, !dbg !23
  %551 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %166, !dbg !23
  %552 = load <1 x i8>, ptr addrspace(3) %551, align 1, !dbg !23
  %553 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %170, !dbg !23
  %554 = load <1 x i8>, ptr addrspace(3) %553, align 1, !dbg !23
  %555 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %172, !dbg !23
  %556 = load <1 x i8>, ptr addrspace(3) %555, align 1, !dbg !23
  %557 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %176, !dbg !23
  %558 = load <1 x i8>, ptr addrspace(3) %557, align 1, !dbg !23
  %559 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %180, !dbg !23
  %560 = load <1 x i8>, ptr addrspace(3) %559, align 1, !dbg !23
  %561 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i64 %184, !dbg !23
  %562 = load <1 x i8>, ptr addrspace(3) %561, align 1, !dbg !23
  store <1 x i8> %500, ptr addrspace(3) %199, align 1, !dbg !23
  store <1 x i8> %502, ptr addrspace(3) %204, align 1, !dbg !23
  store <1 x i8> %504, ptr addrspace(3) %208, align 1, !dbg !23
  store <1 x i8> %506, ptr addrspace(3) %212, align 1, !dbg !23
  store <1 x i8> %508, ptr addrspace(3) %216, align 1, !dbg !23
  store <1 x i8> %510, ptr addrspace(3) %220, align 1, !dbg !23
  store <1 x i8> %512, ptr addrspace(3) %224, align 1, !dbg !23
  store <1 x i8> %514, ptr addrspace(3) %228, align 1, !dbg !23
  store <1 x i8> %516, ptr addrspace(3) %236, align 1, !dbg !23
  store <1 x i8> %518, ptr addrspace(3) %244, align 1, !dbg !23
  store <1 x i8> %520, ptr addrspace(3) %252, align 1, !dbg !23
  store <1 x i8> %522, ptr addrspace(3) %260, align 1, !dbg !23
  store <1 x i8> %524, ptr addrspace(3) %268, align 1, !dbg !23
  store <1 x i8> %526, ptr addrspace(3) %276, align 1, !dbg !23
  store <1 x i8> %528, ptr addrspace(3) %284, align 1, !dbg !23
  store <1 x i8> %530, ptr addrspace(3) %292, align 1, !dbg !23
  store <1 x i8> %532, ptr addrspace(3) %299, align 1, !dbg !23
  store <1 x i8> %534, ptr addrspace(3) %306, align 1, !dbg !23
  store <1 x i8> %536, ptr addrspace(3) %313, align 1, !dbg !23
  store <1 x i8> %538, ptr addrspace(3) %320, align 1, !dbg !23
  store <1 x i8> %540, ptr addrspace(3) %327, align 1, !dbg !23
  store <1 x i8> %542, ptr addrspace(3) %334, align 1, !dbg !23
  store <1 x i8> %544, ptr addrspace(3) %341, align 1, !dbg !23
  store <1 x i8> %546, ptr addrspace(3) %348, align 1, !dbg !23
  store <1 x i8> %548, ptr addrspace(3) %357, align 1, !dbg !23
  store <1 x i8> %550, ptr addrspace(3) %365, align 1, !dbg !23
  store <1 x i8> %552, ptr addrspace(3) %373, align 1, !dbg !23
  store <1 x i8> %554, ptr addrspace(3) %381, align 1, !dbg !23
  store <1 x i8> %556, ptr addrspace(3) %389, align 1, !dbg !23
  store <1 x i8> %558, ptr addrspace(3) %397, align 1, !dbg !23
  store <1 x i8> %560, ptr addrspace(3) %405, align 1, !dbg !23
  store <1 x i8> %562, ptr addrspace(3) %413, align 1, !dbg !23
  %563 = shl i32 %491, 13, !dbg !22
  %564 = sext i32 %563 to i64, !dbg !22
  %565 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %564, !dbg !22
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %566 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %414, i32 0, i32 31), !dbg !25
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !25
  %567 = shl i32 %566, 6, !dbg !25
  %568 = and i32 %567, 192, !dbg !25
  %569 = zext nneg i32 %568 to i64, !dbg !25
  %570 = ptrtoint ptr addrspace(3) %565 to i64, !dbg !25
  %571 = lshr exact i64 %570, 4, !dbg !25
  %572 = and i64 %571, 16383, !dbg !25
  %573 = or disjoint i64 %572, -9223371899382267904, !dbg !25
  %574 = add nuw nsw i64 %573, %569, !dbg !25
  %575 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %423, float %424, float %425, float %426, float %427, float %428, float %429, float %430, float %431, float %432, float %433, float %434, float %435, float %436, float %437, float %438, float %439, float %440, float %441, float %442, float %443, float %444, float %445, float %446, float %447, float %448, float %449, float %450, float %451, float %452, float %453, float %454, i64 %574, i64 %417, i1 true) #3, !dbg !25
  %576 = add nuw nsw i64 %572, -9223371899382267902, !dbg !25
  %577 = add nuw nsw i64 %576, %569, !dbg !25
  %578 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 0, !dbg !25
  %579 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 1, !dbg !25
  %580 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 2, !dbg !25
  %581 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 3, !dbg !25
  %582 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 4, !dbg !25
  %583 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 5, !dbg !25
  %584 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 6, !dbg !25
  %585 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 7, !dbg !25
  %586 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 8, !dbg !25
  %587 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 9, !dbg !25
  %588 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 10, !dbg !25
  %589 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 11, !dbg !25
  %590 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 12, !dbg !25
  %591 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 13, !dbg !25
  %592 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 14, !dbg !25
  %593 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 15, !dbg !25
  %594 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 16, !dbg !25
  %595 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 17, !dbg !25
  %596 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 18, !dbg !25
  %597 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 19, !dbg !25
  %598 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 20, !dbg !25
  %599 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 21, !dbg !25
  %600 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 22, !dbg !25
  %601 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 23, !dbg !25
  %602 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 24, !dbg !25
  %603 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 25, !dbg !25
  %604 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 26, !dbg !25
  %605 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 27, !dbg !25
  %606 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 28, !dbg !25
  %607 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 29, !dbg !25
  %608 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 30, !dbg !25
  %609 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %575, 31, !dbg !25
  %610 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %578, float %579, float %580, float %581, float %582, float %583, float %584, float %585, float %586, float %587, float %588, float %589, float %590, float %591, float %592, float %593, float %594, float %595, float %596, float %597, float %598, float %599, float %600, float %601, float %602, float %603, float %604, float %605, float %606, float %607, float %608, float %609, i64 %577, i64 %418, i1 true) #3, !dbg !25
  %611 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 0, !dbg !25
  %612 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 1, !dbg !25
  %613 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 2, !dbg !25
  %614 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 3, !dbg !25
  %615 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 4, !dbg !25
  %616 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 5, !dbg !25
  %617 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 6, !dbg !25
  %618 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 7, !dbg !25
  %619 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 8, !dbg !25
  %620 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 9, !dbg !25
  %621 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 10, !dbg !25
  %622 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 11, !dbg !25
  %623 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 12, !dbg !25
  %624 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 13, !dbg !25
  %625 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 14, !dbg !25
  %626 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 15, !dbg !25
  %627 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 16, !dbg !25
  %628 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 17, !dbg !25
  %629 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 18, !dbg !25
  %630 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 19, !dbg !25
  %631 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 20, !dbg !25
  %632 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 21, !dbg !25
  %633 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 22, !dbg !25
  %634 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 23, !dbg !25
  %635 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 24, !dbg !25
  %636 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 25, !dbg !25
  %637 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 26, !dbg !25
  %638 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 27, !dbg !25
  %639 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 28, !dbg !25
  %640 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 29, !dbg !25
  %641 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 30, !dbg !25
  %642 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 31, !dbg !25
  %643 = add nuw nsw i64 %572, -9223371899382267648, !dbg !25
  %644 = add nuw nsw i64 %643, %569, !dbg !25
  %645 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %455, float %456, float %457, float %458, float %459, float %460, float %461, float %462, float %463, float %464, float %465, float %466, float %467, float %468, float %469, float %470, float %471, float %472, float %473, float %474, float %475, float %476, float %477, float %478, float %479, float %480, float %481, float %482, float %483, float %484, float %485, float %486, i64 %644, i64 %417, i1 true) #3, !dbg !25
  %646 = add nuw nsw i64 %572, -9223371899382267646, !dbg !25
  %647 = add nuw nsw i64 %646, %569, !dbg !25
  %648 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 0, !dbg !25
  %649 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 1, !dbg !25
  %650 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 2, !dbg !25
  %651 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 3, !dbg !25
  %652 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 4, !dbg !25
  %653 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 5, !dbg !25
  %654 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 6, !dbg !25
  %655 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 7, !dbg !25
  %656 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 8, !dbg !25
  %657 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 9, !dbg !25
  %658 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 10, !dbg !25
  %659 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 11, !dbg !25
  %660 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 12, !dbg !25
  %661 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 13, !dbg !25
  %662 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 14, !dbg !25
  %663 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 15, !dbg !25
  %664 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 16, !dbg !25
  %665 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 17, !dbg !25
  %666 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 18, !dbg !25
  %667 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 19, !dbg !25
  %668 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 20, !dbg !25
  %669 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 21, !dbg !25
  %670 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 22, !dbg !25
  %671 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 23, !dbg !25
  %672 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 24, !dbg !25
  %673 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 25, !dbg !25
  %674 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 26, !dbg !25
  %675 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 27, !dbg !25
  %676 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 28, !dbg !25
  %677 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 29, !dbg !25
  %678 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 30, !dbg !25
  %679 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %645, 31, !dbg !25
  %680 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %648, float %649, float %650, float %651, float %652, float %653, float %654, float %655, float %656, float %657, float %658, float %659, float %660, float %661, float %662, float %663, float %664, float %665, float %666, float %667, float %668, float %669, float %670, float %671, float %672, float %673, float %674, float %675, float %676, float %677, float %678, float %679, i64 %647, i64 %418, i1 true) #3, !dbg !25
  %681 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 0, !dbg !25
  %682 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 1, !dbg !25
  %683 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 2, !dbg !25
  %684 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 3, !dbg !25
  %685 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 4, !dbg !25
  %686 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 5, !dbg !25
  %687 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 6, !dbg !25
  %688 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 7, !dbg !25
  %689 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 8, !dbg !25
  %690 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 9, !dbg !25
  %691 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 10, !dbg !25
  %692 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 11, !dbg !25
  %693 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 12, !dbg !25
  %694 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 13, !dbg !25
  %695 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 14, !dbg !25
  %696 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 15, !dbg !25
  %697 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 16, !dbg !25
  %698 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 17, !dbg !25
  %699 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 18, !dbg !25
  %700 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 19, !dbg !25
  %701 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 20, !dbg !25
  %702 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 21, !dbg !25
  %703 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 22, !dbg !25
  %704 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 23, !dbg !25
  %705 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 24, !dbg !25
  %706 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 25, !dbg !25
  %707 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 26, !dbg !25
  %708 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 27, !dbg !25
  %709 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 28, !dbg !25
  %710 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 29, !dbg !25
  %711 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 30, !dbg !25
  %712 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %680, 31, !dbg !25
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !25
  %713 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69"(float %611, float %612, float %613, float %614, float %615, float %616, float %617, float %618, float %619, float %620, float %621, float %622, float %623, float %624, float %625, float %626, float %627, float %628, float %629, float %630, float %631, float %632, float %633, float %634, float %635, float %636, float %637, float %638, float %639, float %640, float %641, float %642, float %681, float %682, float %683, float %684, float %685, float %686, float %687, float %688, float %689, float %690, float %691, float %692, float %693, float %694, float %695, float %696, float %697, float %698, float %699, float %700, float %701, float %702, float %703, float %704, float %705, float %706, float %707, float %708, float %709, float %710, float %711, float %712, ptr addrspace(3) %565, i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i32 0, i32 0) #3, !dbg !25
  %714 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 0, !dbg !25
  %715 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 1, !dbg !25
  %716 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 2, !dbg !25
  %717 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 3, !dbg !25
  %718 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 4, !dbg !25
  %719 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 5, !dbg !25
  %720 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 6, !dbg !25
  %721 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 7, !dbg !25
  %722 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 8, !dbg !25
  %723 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 9, !dbg !25
  %724 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 10, !dbg !25
  %725 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 11, !dbg !25
  %726 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 12, !dbg !25
  %727 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 13, !dbg !25
  %728 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 14, !dbg !25
  %729 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 15, !dbg !25
  %730 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 16, !dbg !25
  %731 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 17, !dbg !25
  %732 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 18, !dbg !25
  %733 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 19, !dbg !25
  %734 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 20, !dbg !25
  %735 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 21, !dbg !25
  %736 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 22, !dbg !25
  %737 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 23, !dbg !25
  %738 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 24, !dbg !25
  %739 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 25, !dbg !25
  %740 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 26, !dbg !25
  %741 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 27, !dbg !25
  %742 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 28, !dbg !25
  %743 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 29, !dbg !25
  %744 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 30, !dbg !25
  %745 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 31, !dbg !25
  %746 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 32, !dbg !25
  %747 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 33, !dbg !25
  %748 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 34, !dbg !25
  %749 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 35, !dbg !25
  %750 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 36, !dbg !25
  %751 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 37, !dbg !25
  %752 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 38, !dbg !25
  %753 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 39, !dbg !25
  %754 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 40, !dbg !25
  %755 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 41, !dbg !25
  %756 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 42, !dbg !25
  %757 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 43, !dbg !25
  %758 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 44, !dbg !25
  %759 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 45, !dbg !25
  %760 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 46, !dbg !25
  %761 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 47, !dbg !25
  %762 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 48, !dbg !25
  %763 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 49, !dbg !25
  %764 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 50, !dbg !25
  %765 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 51, !dbg !25
  %766 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 52, !dbg !25
  %767 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 53, !dbg !25
  %768 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 54, !dbg !25
  %769 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 55, !dbg !25
  %770 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 56, !dbg !25
  %771 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 57, !dbg !25
  %772 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 58, !dbg !25
  %773 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 59, !dbg !25
  %774 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 60, !dbg !25
  %775 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 61, !dbg !25
  %776 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 62, !dbg !25
  %777 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %713, 63, !dbg !25
  %778 = add i32 %422, 1, !dbg !21
  %779 = icmp slt i32 %778, 3, !dbg !21
  %780 = select i1 %779, i32 %778, i32 0, !dbg !21
  %781 = shl i32 %487, 6, !dbg !26
  %782 = add nuw i32 %781, 128, !dbg !26
  %783 = sext i32 %780 to i64, !dbg !21
  %784 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %783, !dbg !21
  %785 = and i1 %24, %488, !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 12288;", "b,r"(i1 %785, ptr addrspace(3) %784) #3, !dbg !21
  %786 = shl i32 %780, 13, !dbg !22
  %787 = sext i32 %786 to i64, !dbg !22
  %788 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %787, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %789 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %790 = extractvalue { i32, i1 } %789, 1, !dbg !22
  %791 = and i1 %488, %790, !dbg !22
  %792 = and i1 %45, %791, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %792, ptr addrspace(3) %788, ptr addrspace(1) %19, i32 %782, i32 %38, ptr addrspace(3) %784) #3, !dbg !22
  %793 = shl i32 %780, 12, !dbg !23
  %794 = sext i32 %793 to i64, !dbg !23
  %795 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %794, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %796 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !23
  %797 = extractvalue { i32, i1 } %796, 1, !dbg !23
  %798 = and i1 %488, %797, !dbg !23
  %799 = and i1 %45, %798, !dbg !23
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %799, ptr addrspace(3) %795, ptr addrspace(1) %30, i32 %39, i32 %782, ptr addrspace(3) %784) #3, !dbg !23
  %800 = add nuw nsw i32 %487, 1, !dbg !21
  %exitcond.not = icmp eq i32 %800, %37, !dbg !21
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %419, !dbg !21

._crit_edge.loopexit:                             ; preds = %419
  %801 = insertelement <64 x float> poison, float %714, i64 0, !dbg !27
  %802 = insertelement <64 x float> %801, float %715, i64 1, !dbg !27
  %803 = insertelement <64 x float> %802, float %716, i64 2, !dbg !27
  %804 = insertelement <64 x float> %803, float %717, i64 3, !dbg !27
  %805 = insertelement <64 x float> %804, float %718, i64 4, !dbg !27
  %806 = insertelement <64 x float> %805, float %719, i64 5, !dbg !27
  %807 = insertelement <64 x float> %806, float %720, i64 6, !dbg !27
  %808 = insertelement <64 x float> %807, float %721, i64 7, !dbg !27
  %809 = insertelement <64 x float> %808, float %722, i64 8, !dbg !27
  %810 = insertelement <64 x float> %809, float %723, i64 9, !dbg !27
  %811 = insertelement <64 x float> %810, float %724, i64 10, !dbg !27
  %812 = insertelement <64 x float> %811, float %725, i64 11, !dbg !27
  %813 = insertelement <64 x float> %812, float %726, i64 12, !dbg !27
  %814 = insertelement <64 x float> %813, float %727, i64 13, !dbg !27
  %815 = insertelement <64 x float> %814, float %728, i64 14, !dbg !27
  %816 = insertelement <64 x float> %815, float %729, i64 15, !dbg !27
  %817 = insertelement <64 x float> %816, float %730, i64 16, !dbg !27
  %818 = insertelement <64 x float> %817, float %731, i64 17, !dbg !27
  %819 = insertelement <64 x float> %818, float %732, i64 18, !dbg !27
  %820 = insertelement <64 x float> %819, float %733, i64 19, !dbg !27
  %821 = insertelement <64 x float> %820, float %734, i64 20, !dbg !27
  %822 = insertelement <64 x float> %821, float %735, i64 21, !dbg !27
  %823 = insertelement <64 x float> %822, float %736, i64 22, !dbg !27
  %824 = insertelement <64 x float> %823, float %737, i64 23, !dbg !27
  %825 = insertelement <64 x float> %824, float %738, i64 24, !dbg !27
  %826 = insertelement <64 x float> %825, float %739, i64 25, !dbg !27
  %827 = insertelement <64 x float> %826, float %740, i64 26, !dbg !27
  %828 = insertelement <64 x float> %827, float %741, i64 27, !dbg !27
  %829 = insertelement <64 x float> %828, float %742, i64 28, !dbg !27
  %830 = insertelement <64 x float> %829, float %743, i64 29, !dbg !27
  %831 = insertelement <64 x float> %830, float %744, i64 30, !dbg !27
  %832 = insertelement <64 x float> %831, float %745, i64 31, !dbg !27
  %833 = insertelement <64 x float> %832, float %746, i64 32, !dbg !27
  %834 = insertelement <64 x float> %833, float %747, i64 33, !dbg !27
  %835 = insertelement <64 x float> %834, float %748, i64 34, !dbg !27
  %836 = insertelement <64 x float> %835, float %749, i64 35, !dbg !27
  %837 = insertelement <64 x float> %836, float %750, i64 36, !dbg !27
  %838 = insertelement <64 x float> %837, float %751, i64 37, !dbg !27
  %839 = insertelement <64 x float> %838, float %752, i64 38, !dbg !27
  %840 = insertelement <64 x float> %839, float %753, i64 39, !dbg !27
  %841 = insertelement <64 x float> %840, float %754, i64 40, !dbg !27
  %842 = insertelement <64 x float> %841, float %755, i64 41, !dbg !27
  %843 = insertelement <64 x float> %842, float %756, i64 42, !dbg !27
  %844 = insertelement <64 x float> %843, float %757, i64 43, !dbg !27
  %845 = insertelement <64 x float> %844, float %758, i64 44, !dbg !27
  %846 = insertelement <64 x float> %845, float %759, i64 45, !dbg !27
  %847 = insertelement <64 x float> %846, float %760, i64 46, !dbg !27
  %848 = insertelement <64 x float> %847, float %761, i64 47, !dbg !27
  %849 = insertelement <64 x float> %848, float %762, i64 48, !dbg !27
  %850 = insertelement <64 x float> %849, float %763, i64 49, !dbg !27
  %851 = insertelement <64 x float> %850, float %764, i64 50, !dbg !27
  %852 = insertelement <64 x float> %851, float %765, i64 51, !dbg !27
  %853 = insertelement <64 x float> %852, float %766, i64 52, !dbg !27
  %854 = insertelement <64 x float> %853, float %767, i64 53, !dbg !27
  %855 = insertelement <64 x float> %854, float %768, i64 54, !dbg !27
  %856 = insertelement <64 x float> %855, float %769, i64 55, !dbg !27
  %857 = insertelement <64 x float> %856, float %770, i64 56, !dbg !27
  %858 = insertelement <64 x float> %857, float %771, i64 57, !dbg !27
  %859 = insertelement <64 x float> %858, float %772, i64 58, !dbg !27
  %860 = insertelement <64 x float> %859, float %773, i64 59, !dbg !27
  %861 = insertelement <64 x float> %860, float %774, i64 60, !dbg !27
  %862 = insertelement <64 x float> %861, float %775, i64 61, !dbg !27
  %863 = insertelement <64 x float> %862, float %776, i64 62, !dbg !27
  %864 = insertelement <64 x float> %863, float %777, i64 63, !dbg !27
  %865 = fptrunc <64 x float> %864 to <64 x half>, !dbg !27
  %866 = bitcast <64 x half> %865 to <32 x i32>, !dbg !24
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi15 = phi i32 [ %.pre14, %.._crit_edge_crit_edge ], [ %190, %._crit_edge.loopexit ], !dbg !24
  %.pre-phi11 = phi i32 [ %.pre10, %.._crit_edge_crit_edge ], [ %65, %._crit_edge.loopexit ], !dbg !24
  %.pre-phi = phi i32 [ %.pre, %.._crit_edge_crit_edge ], [ %63, %._crit_edge.loopexit ], !dbg !24
  %.bc140 = phi <32 x i32> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %866, %._crit_edge.loopexit ]
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960)) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40968)) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40976)) #3, !dbg !21
  %867 = and i32 %20, 1, !dbg !24
  %868 = icmp eq i32 %867, 0, !dbg !24
  %869 = select i1 %868, i32 0, i32 72, !dbg !24
  %870 = icmp eq i32 %.pre-phi, 0, !dbg !24
  %871 = select i1 %870, i32 0, i32 144, !dbg !24
  %872 = icmp eq i32 %.pre-phi11, 0, !dbg !24
  %873 = select i1 %872, i32 0, i32 288, !dbg !24
  %874 = or disjoint i32 %871, %.pre-phi15, !dbg !24
  %875 = or disjoint i32 %874, %869, !dbg !24
  %876 = or disjoint i32 %875, %873, !dbg !24
  %877 = lshr i32 %20, 1, !dbg !24
  %878 = and i32 %877, 8, !dbg !24
  %879 = xor i32 %876, %878, !dbg !24
  %880 = shl i32 %20, 5, !dbg !24
  %881 = and i32 %880, 1024, !dbg !24
  %882 = or disjoint i32 %879, %881, !dbg !24
  %883 = and i32 %880, 2048, !dbg !24
  %884 = xor i32 %882, %883, !dbg !24
  %885 = zext nneg i32 %884 to i64, !dbg !24
  %886 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %885, !dbg !24
  %.extract = extractelement <32 x i32> %.bc140, i64 0, !dbg !24
  %.extract81 = extractelement <32 x i32> %.bc140, i64 1, !dbg !24
  %.extract83 = extractelement <32 x i32> %.bc140, i64 2, !dbg !24
  %.extract85 = extractelement <32 x i32> %.bc140, i64 3, !dbg !24
  %887 = ptrtoint ptr addrspace(3) %886 to i64, !dbg !24
  %888 = trunc i64 %887 to i32, !dbg !24
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %888, i32 %.extract, i32 %.extract81, i32 %.extract83, i32 %.extract85) #3, !dbg !24
  %889 = xor i32 %884, 16, !dbg !24
  %890 = zext nneg i32 %889 to i64, !dbg !24
  %891 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %890, !dbg !24
  %.extract87 = extractelement <32 x i32> %.bc140, i64 4, !dbg !24
  %.extract89 = extractelement <32 x i32> %.bc140, i64 5, !dbg !24
  %.extract91 = extractelement <32 x i32> %.bc140, i64 6, !dbg !24
  %.extract93 = extractelement <32 x i32> %.bc140, i64 7, !dbg !24
  %892 = ptrtoint ptr addrspace(3) %891 to i64, !dbg !24
  %893 = trunc i64 %892 to i32, !dbg !24
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %893, i32 %.extract87, i32 %.extract89, i32 %.extract91, i32 %.extract93) #3, !dbg !24
  %894 = xor i32 %884, 32, !dbg !24
  %895 = zext nneg i32 %894 to i64, !dbg !24
  %896 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %895, !dbg !24
  %.extract95 = extractelement <32 x i32> %.bc140, i64 8, !dbg !24
  %.extract97 = extractelement <32 x i32> %.bc140, i64 9, !dbg !24
  %.extract99 = extractelement <32 x i32> %.bc140, i64 10, !dbg !24
  %.extract101 = extractelement <32 x i32> %.bc140, i64 11, !dbg !24
  %897 = ptrtoint ptr addrspace(3) %896 to i64, !dbg !24
  %898 = trunc i64 %897 to i32, !dbg !24
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %898, i32 %.extract95, i32 %.extract97, i32 %.extract99, i32 %.extract101) #3, !dbg !24
  %899 = xor i32 %884, 48, !dbg !24
  %900 = zext nneg i32 %899 to i64, !dbg !24
  %901 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %900, !dbg !24
  %.extract103 = extractelement <32 x i32> %.bc140, i64 12, !dbg !24
  %.extract105 = extractelement <32 x i32> %.bc140, i64 13, !dbg !24
  %.extract107 = extractelement <32 x i32> %.bc140, i64 14, !dbg !24
  %.extract109 = extractelement <32 x i32> %.bc140, i64 15, !dbg !24
  %902 = ptrtoint ptr addrspace(3) %901 to i64, !dbg !24
  %903 = trunc i64 %902 to i32, !dbg !24
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %903, i32 %.extract103, i32 %.extract105, i32 %.extract107, i32 %.extract109) #3, !dbg !24
  %904 = xor i32 %884, 4096, !dbg !24
  %905 = zext nneg i32 %904 to i64, !dbg !24
  %906 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %905, !dbg !24
  %.extract111 = extractelement <32 x i32> %.bc140, i64 16, !dbg !24
  %.extract113 = extractelement <32 x i32> %.bc140, i64 17, !dbg !24
  %.extract115 = extractelement <32 x i32> %.bc140, i64 18, !dbg !24
  %.extract117 = extractelement <32 x i32> %.bc140, i64 19, !dbg !24
  %907 = ptrtoint ptr addrspace(3) %906 to i64, !dbg !24
  %908 = trunc i64 %907 to i32, !dbg !24
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %908, i32 %.extract111, i32 %.extract113, i32 %.extract115, i32 %.extract117) #3, !dbg !24
  %909 = xor i32 %884, 4112, !dbg !24
  %910 = zext nneg i32 %909 to i64, !dbg !24
  %911 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %910, !dbg !24
  %.extract119 = extractelement <32 x i32> %.bc140, i64 20, !dbg !24
  %.extract121 = extractelement <32 x i32> %.bc140, i64 21, !dbg !24
  %.extract123 = extractelement <32 x i32> %.bc140, i64 22, !dbg !24
  %.extract125 = extractelement <32 x i32> %.bc140, i64 23, !dbg !24
  %912 = ptrtoint ptr addrspace(3) %911 to i64, !dbg !24
  %913 = trunc i64 %912 to i32, !dbg !24
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %913, i32 %.extract119, i32 %.extract121, i32 %.extract123, i32 %.extract125) #3, !dbg !24
  %914 = xor i32 %884, 4128, !dbg !24
  %915 = zext nneg i32 %914 to i64, !dbg !24
  %916 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %915, !dbg !24
  %.extract127 = extractelement <32 x i32> %.bc140, i64 24, !dbg !24
  %.extract129 = extractelement <32 x i32> %.bc140, i64 25, !dbg !24
  %.extract131 = extractelement <32 x i32> %.bc140, i64 26, !dbg !24
  %.extract133 = extractelement <32 x i32> %.bc140, i64 27, !dbg !24
  %917 = ptrtoint ptr addrspace(3) %916 to i64, !dbg !24
  %918 = trunc i64 %917 to i32, !dbg !24
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %918, i32 %.extract127, i32 %.extract129, i32 %.extract131, i32 %.extract133) #3, !dbg !24
  %919 = xor i32 %884, 4144, !dbg !24
  %920 = zext nneg i32 %919 to i64, !dbg !24
  %921 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %920, !dbg !24
  %.extract135 = extractelement <32 x i32> %.bc140, i64 28, !dbg !24
  %.extract137 = extractelement <32 x i32> %.bc140, i64 29, !dbg !24
  %.extract139 = extractelement <32 x i32> %.bc140, i64 30, !dbg !24
  %.extract141 = extractelement <32 x i32> %.bc140, i64 31, !dbg !24
  %922 = ptrtoint ptr addrspace(3) %921 to i64, !dbg !24
  %923 = trunc i64 %922 to i32, !dbg !24
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %923, i32 %.extract135, i32 %.extract137, i32 %.extract139, i32 %.extract141) #3, !dbg !24
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %924 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !24
  %925 = extractvalue { i32, i1 } %924, 1, !dbg !24
  %926 = and i1 %45, %925, !dbg !24
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %926, ptr addrspace(1) %34, i32 %39, i32 %38, ptr addrspace(3) @global_smem) #3, !dbg !24
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !24
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !24
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.nctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.bar.warp.sync(i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare { i32, i1 } @llvm.nvvm.elect.sync(i32) #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.commit.group() #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 immarg) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "matmul-with-tma-v3.py", directory: "/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120")
!4 = !{ptr @matmul_kernel_make_tensor_desciptor, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "matmul_kernel_make_tensor_desciptor", linkageName: "matmul_kernel_make_tensor_desciptor", scope: !3, file: !3, line: 9, type: !7, scopeLine: 9, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 14, column: 26, scope: !6)
!10 = !DILocation(line: 15, column: 26, scope: !6)
!11 = !DILocation(line: 18, column: 8, scope: !6)
!12 = !DILocation(line: 24, column: 8, scope: !6)
!13 = !DILocation(line: 30, column: 8, scope: !6)
!14 = !DILocation(line: 40, column: 22, scope: !15, inlinedAt: !17)
!15 = distinct !DILexicalBlockFile(scope: !6, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language")
!17 = !DILocation(line: 37, column: 30, scope: !6)
!18 = !DILocation(line: 40, column: 28, scope: !15, inlinedAt: !17)
!19 = !DILocation(line: 38, column: 33, scope: !6)
!20 = !DILocation(line: 39, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 19, scope: !6)
!22 = !DILocation(line: 38, column: 24, scope: !6)
!23 = !DILocation(line: 39, column: 24, scope: !6)
!24 = !DILocation(line: 43, column: 63, scope: !6)
!25 = !DILocation(line: 40, column: 32, scope: !6)
!26 = !DILocation(line: 38, column: 51, scope: !6)
!27 = !DILocation(line: 42, column: 33, scope: !6)
!28 = !DILocation(line: 43, column: 4, scope: !6)
