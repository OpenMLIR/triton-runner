; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel_make_tensor_desciptor(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, ptr addrspace(1) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !10
  %10 = sext i32 %4 to i64, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y(), !dbg !11
  %14 = mul i32 %11, %13, !dbg !11
  %15 = add i32 %14, %9, !dbg !11
  %16 = mul i32 %15, %12, !dbg !11
  %17 = add i32 %16, %8, !dbg !11
  %18 = mul i32 %17, 384, !dbg !11
  %19 = sext i32 %18 to i64, !dbg !11
  %20 = getelementptr i8, ptr addrspace(1) %6, i64 %19, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = icmp slt i32 %21, 32, !dbg !11
  %23 = sext i32 %21 to i64, !dbg !11
  %24 = getelementptr i32, ptr addrspace(3) @global_smem, i64 %23, !dbg !11
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> zeroinitializer, i1 %22) #3, !dbg !11
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !11
  %25 = icmp eq i32 %21, 0, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %0, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 128, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %4, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %3, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %10, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x2;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %20, ptr addrspace(3) @global_smem, i1 %22) #3, !dbg !11
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %20, i1 %22) #3, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !11
  %26 = sext i32 %5 to i64, !dbg !12
  %27 = add i32 %18, 128, !dbg !12
  %28 = sext i32 %27 to i64, !dbg !12
  %29 = getelementptr i8, ptr addrspace(1) %6, i64 %28, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !12
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> zeroinitializer, i1 %22) #3, !dbg !12
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %1, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %5, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %4, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %26, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x2;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %29, ptr addrspace(3) @global_smem, i1 %22) #3, !dbg !12
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %29, i1 %22) #3, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !12
  %30 = add i32 %18, 256, !dbg !13
  %31 = sext i32 %30 to i64, !dbg !13
  %32 = getelementptr i8, ptr addrspace(1) %6, i64 %31, !dbg !13
  %33 = shl nsw i64 %26, 1, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !13
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> zeroinitializer, i1 %22) #3, !dbg !13
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %2, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 128, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %5, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %3, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %33, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x3;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %25) #3, !dbg !13
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %32, ptr addrspace(3) @global_smem, i1 %22) #3, !dbg !13
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %32, i1 %22) #3, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !13
  %34 = add i32 %4, 63, !dbg !14
  %35 = sdiv i32 %34, 64, !dbg !18
  %36 = shl i32 %8, 7, !dbg !19
  %37 = shl i32 %9, 6, !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %25, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576)) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %25, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24584)) #3, !dbg !21
  %38 = icmp sgt i32 %34, 63, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %39 = and i1 %25, %38, !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 12288;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576)) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %40 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %41 = extractvalue { i32, i1 } %40, 1, !dbg !22
  %42 = and i1 %38, %41, !dbg !22
  %43 = icmp ult i32 %21, 32, !dbg !22
  %44 = and i1 %43, %42, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %44, ptr addrspace(3) @global_smem, ptr addrspace(1) %20, i32 0, i32 %36, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576)) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %45 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !23
  %46 = extractvalue { i32, i1 } %45, 1, !dbg !23
  %47 = and i1 %38, %46, !dbg !23
  %48 = and i1 %43, %47, !dbg !23
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %48, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), ptr addrspace(1) %29, i32 %37, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576)) #3, !dbg !23
  %49 = icmp sgt i32 %34, 127, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %50 = and i1 %25, %49, !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 12288;", "b,r"(i1 %50, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24584)) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %51 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %52 = extractvalue { i32, i1 } %51, 1, !dbg !22
  %53 = and i1 %49, %52, !dbg !22
  %54 = and i1 %43, %53, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %54, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), ptr addrspace(1) %20, i32 64, i32 %36, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24584)) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %55 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !23
  %56 = extractvalue { i32, i1 } %55, 1, !dbg !23
  %57 = and i1 %49, %56, !dbg !23
  %58 = and i1 %43, %57, !dbg !23
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %58, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), ptr addrspace(1) %29, i32 %37, i32 64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24584)) #3, !dbg !23
  br i1 %38, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !21

.._crit_edge_crit_edge:                           ; preds = %7
  %.pre = and i32 %21, 8, !dbg !24
  %.pre129 = and i32 %21, 16, !dbg !24
  %.pre131 = lshr i32 %21, 2, !dbg !24
  %.pre133 = and i32 %.pre131, 8, !dbg !24
  %.pre135 = shl i32 %21, 4, !dbg !24
  %.pre137 = and i32 %.pre135, 1024, !dbg !24
  br label %._crit_edge, !dbg !21

.lr.ph:                                           ; preds = %7
  %59 = add nsw i32 %35, -2
  %60 = and i32 %21, 1
  %61 = icmp eq i32 %60, 0
  %62 = select i1 %61, i32 0, i32 288
  %63 = shl i32 %21, 8
  %64 = and i32 %63, 512
  %65 = and i32 %21, 8
  %66 = icmp eq i32 %65, 0
  %67 = lshr i32 %21, 2
  %68 = and i32 %67, 3
  %69 = and i32 %21, 16
  %70 = icmp eq i32 %69, 0
  %71 = lshr exact i32 %69, 2
  %72 = or disjoint i32 %68, %64
  %73 = or disjoint i32 %72, %71
  %74 = or disjoint i32 %73, %62
  %75 = and i32 %67, 8
  %76 = or disjoint i32 %74, %75
  %77 = zext nneg i32 %76 to i64
  %78 = or disjoint i32 %76, 64
  %79 = zext nneg i32 %78 to i64
  %80 = or disjoint i32 %76, 144
  %81 = zext nneg i32 %80 to i64
  %82 = or disjoint i32 %76, 208
  %83 = zext nneg i32 %82 to i64
  %84 = or disjoint i32 %76, 1024
  %85 = zext nneg i32 %84 to i64
  %86 = or disjoint i32 %76, 1088
  %87 = zext nneg i32 %86 to i64
  %88 = or disjoint i32 %76, 1168
  %89 = zext nneg i32 %88 to i64
  %90 = or disjoint i32 %76, 1232
  %91 = zext nneg i32 %90 to i64
  %92 = or disjoint i32 %76, 2048
  %93 = zext nneg i32 %92 to i64
  %94 = or disjoint i32 %76, 2112
  %95 = zext nneg i32 %94 to i64
  %96 = or disjoint i32 %76, 2192
  %97 = zext nneg i32 %96 to i64
  %98 = or disjoint i32 %76, 2256
  %99 = zext nneg i32 %98 to i64
  %100 = or disjoint i32 %76, 3072
  %101 = zext nneg i32 %100 to i64
  %102 = or disjoint i32 %76, 3136
  %103 = zext nneg i32 %102 to i64
  %104 = or disjoint i32 %76, 3216
  %105 = zext nneg i32 %104 to i64
  %106 = or disjoint i32 %76, 3280
  %107 = zext nneg i32 %106 to i64
  %108 = or disjoint i32 %76, 16
  %109 = zext nneg i32 %108 to i64
  %110 = or disjoint i32 %76, 80
  %111 = zext nneg i32 %110 to i64
  %112 = or disjoint i32 %76, 128
  %113 = zext nneg i32 %112 to i64
  %114 = or disjoint i32 %76, 192
  %115 = zext nneg i32 %114 to i64
  %116 = or disjoint i32 %76, 1040
  %117 = zext nneg i32 %116 to i64
  %118 = or disjoint i32 %76, 1104
  %119 = zext nneg i32 %118 to i64
  %120 = or disjoint i32 %76, 1152
  %121 = zext nneg i32 %120 to i64
  %122 = or disjoint i32 %76, 1216
  %123 = zext nneg i32 %122 to i64
  %124 = or disjoint i32 %76, 2064
  %125 = zext nneg i32 %124 to i64
  %126 = or disjoint i32 %76, 2128
  %127 = zext nneg i32 %126 to i64
  %128 = or disjoint i32 %76, 2176
  %129 = zext nneg i32 %128 to i64
  %130 = or disjoint i32 %76, 2240
  %131 = zext nneg i32 %130 to i64
  %132 = or disjoint i32 %76, 3088
  %133 = zext nneg i32 %132 to i64
  %134 = or disjoint i32 %76, 3152
  %135 = zext nneg i32 %134 to i64
  %136 = or disjoint i32 %76, 3200
  %137 = zext nneg i32 %136 to i64
  %138 = or disjoint i32 %76, 3264
  %139 = zext nneg i32 %138 to i64
  %140 = xor i32 %76, 32
  %141 = zext nneg i32 %140 to i64
  %142 = xor i32 %76, 96
  %143 = zext nneg i32 %142 to i64
  %144 = xor i32 %76, 176
  %145 = zext nneg i32 %144 to i64
  %146 = xor i32 %76, 240
  %147 = zext nneg i32 %146 to i64
  %148 = xor i32 %76, 1056
  %149 = zext nneg i32 %148 to i64
  %150 = xor i32 %76, 1120
  %151 = zext nneg i32 %150 to i64
  %152 = xor i32 %76, 1200
  %153 = zext nneg i32 %152 to i64
  %154 = xor i32 %76, 1264
  %155 = zext nneg i32 %154 to i64
  %156 = xor i32 %76, 2080
  %157 = zext nneg i32 %156 to i64
  %158 = xor i32 %76, 2144
  %159 = zext nneg i32 %158 to i64
  %160 = xor i32 %76, 2224
  %161 = zext nneg i32 %160 to i64
  %162 = xor i32 %76, 2288
  %163 = zext nneg i32 %162 to i64
  %164 = xor i32 %76, 3104
  %165 = zext nneg i32 %164 to i64
  %166 = xor i32 %76, 3168
  %167 = zext nneg i32 %166 to i64
  %168 = xor i32 %76, 3248
  %169 = zext nneg i32 %168 to i64
  %170 = xor i32 %76, 3312
  %171 = zext nneg i32 %170 to i64
  %172 = xor i32 %76, 48
  %173 = zext nneg i32 %172 to i64
  %174 = xor i32 %76, 112
  %175 = zext nneg i32 %174 to i64
  %176 = xor i32 %76, 160
  %177 = zext nneg i32 %176 to i64
  %178 = xor i32 %76, 224
  %179 = zext nneg i32 %178 to i64
  %180 = xor i32 %76, 1072
  %181 = zext nneg i32 %180 to i64
  %182 = xor i32 %76, 1136
  %183 = zext nneg i32 %182 to i64
  %184 = xor i32 %76, 1184
  %185 = zext nneg i32 %184 to i64
  %186 = xor i32 %76, 1248
  %187 = zext nneg i32 %186 to i64
  %188 = xor i32 %76, 2096
  %189 = zext nneg i32 %188 to i64
  %190 = xor i32 %76, 2160
  %191 = zext nneg i32 %190 to i64
  %192 = xor i32 %76, 2208
  %193 = zext nneg i32 %192 to i64
  %194 = xor i32 %76, 2272
  %195 = zext nneg i32 %194 to i64
  %196 = xor i32 %76, 3120
  %197 = zext nneg i32 %196 to i64
  %198 = xor i32 %76, 3184
  %199 = zext nneg i32 %198 to i64
  %200 = xor i32 %76, 3232
  %201 = zext nneg i32 %200 to i64
  %202 = xor i32 %76, 3296
  %203 = zext nneg i32 %202 to i64
  %204 = shl i32 %21, 2
  %205 = and i32 %204, 12
  %206 = shl i32 %21, 4
  %207 = and i32 %206, 64
  %208 = or disjoint i32 %205, %207
  %209 = select i1 %66, i32 0, i32 144
  %210 = or disjoint i32 %208, %209
  %211 = select i1 %70, i32 0, i32 288
  %212 = and i32 %206, 1024
  %213 = or disjoint i32 %211, %212
  %214 = or disjoint i32 %213, %210
  %215 = zext nneg i32 %214 to i64
  %216 = or disjoint i32 %214, 512
  %217 = zext nneg i32 %216 to i64
  %218 = or disjoint i32 %208, 16
  %219 = xor i32 %218, %209
  %220 = or disjoint i32 %212, %219
  %221 = or disjoint i32 %220, %211
  %222 = zext nneg i32 %221 to i64
  %223 = or disjoint i32 %208, 528
  %224 = xor i32 %223, %209
  %225 = or disjoint i32 %212, %224
  %226 = or disjoint i32 %225, %211
  %227 = zext nneg i32 %226 to i64
  %228 = or disjoint i32 %210, 32
  %229 = xor i32 %228, %211
  %230 = or disjoint i32 %229, %212
  %231 = zext nneg i32 %230 to i64
  %232 = or disjoint i32 %210, 544
  %233 = xor i32 %232, %211
  %234 = or disjoint i32 %233, %212
  %235 = zext nneg i32 %234 to i64
  %236 = or disjoint i32 %208, 48
  %237 = or disjoint i32 %211, %209
  %238 = xor i32 %237, %236
  %239 = or disjoint i32 %238, %212
  %240 = zext nneg i32 %239 to i64
  %241 = or disjoint i32 %208, 560
  %242 = xor i32 %237, %241
  %243 = or disjoint i32 %242, %212
  %244 = zext nneg i32 %243 to i64
  %245 = or disjoint i32 %214, 2048
  %246 = zext nneg i32 %245 to i64
  %247 = or disjoint i32 %214, 2560
  %248 = zext nneg i32 %247 to i64
  %249 = or disjoint i32 %208, 2064
  %250 = xor i32 %249, %209
  %251 = or disjoint i32 %212, %250
  %252 = or disjoint i32 %251, %211
  %253 = zext nneg i32 %252 to i64
  %254 = or disjoint i32 %208, 2576
  %255 = xor i32 %254, %209
  %256 = or disjoint i32 %212, %255
  %257 = or disjoint i32 %256, %211
  %258 = zext nneg i32 %257 to i64
  %259 = or disjoint i32 %210, 2080
  %260 = xor i32 %259, %211
  %261 = or disjoint i32 %260, %212
  %262 = zext nneg i32 %261 to i64
  %263 = or disjoint i32 %210, 2592
  %264 = xor i32 %263, %211
  %265 = or disjoint i32 %264, %212
  %266 = zext nneg i32 %265 to i64
  %267 = or disjoint i32 %208, 2096
  %268 = xor i32 %237, %267
  %269 = or disjoint i32 %268, %212
  %270 = zext nneg i32 %269 to i64
  %271 = or disjoint i32 %208, 2608
  %272 = xor i32 %237, %271
  %273 = or disjoint i32 %272, %212
  %274 = zext nneg i32 %273 to i64
  %275 = or disjoint i32 %214, 4096
  %276 = zext nneg i32 %275 to i64
  %277 = or disjoint i32 %214, 4608
  %278 = zext nneg i32 %277 to i64
  %279 = or disjoint i32 %208, 4112
  %280 = xor i32 %279, %209
  %281 = or disjoint i32 %212, %280
  %282 = or disjoint i32 %281, %211
  %283 = zext nneg i32 %282 to i64
  %284 = or disjoint i32 %208, 4624
  %285 = xor i32 %284, %209
  %286 = or disjoint i32 %212, %285
  %287 = or disjoint i32 %286, %211
  %288 = zext nneg i32 %287 to i64
  %289 = or disjoint i32 %210, 4128
  %290 = xor i32 %289, %211
  %291 = or disjoint i32 %290, %212
  %292 = zext nneg i32 %291 to i64
  %293 = or disjoint i32 %210, 4640
  %294 = xor i32 %293, %211
  %295 = or disjoint i32 %294, %212
  %296 = zext nneg i32 %295 to i64
  %297 = or disjoint i32 %208, 4144
  %298 = xor i32 %237, %297
  %299 = or disjoint i32 %298, %212
  %300 = zext nneg i32 %299 to i64
  %301 = or disjoint i32 %208, 4656
  %302 = xor i32 %237, %301
  %303 = or disjoint i32 %302, %212
  %304 = zext nneg i32 %303 to i64
  %305 = or disjoint i32 %214, 6144
  %306 = zext nneg i32 %305 to i64
  %307 = or disjoint i32 %214, 6656
  %308 = zext nneg i32 %307 to i64
  %309 = or disjoint i32 %208, 6160
  %310 = xor i32 %309, %209
  %311 = or disjoint i32 %212, %310
  %312 = or disjoint i32 %311, %211
  %313 = zext nneg i32 %312 to i64
  %314 = or disjoint i32 %208, 6672
  %315 = xor i32 %314, %209
  %316 = or disjoint i32 %212, %315
  %317 = or disjoint i32 %316, %211
  %318 = zext nneg i32 %317 to i64
  %319 = or disjoint i32 %210, 6176
  %320 = xor i32 %319, %211
  %321 = or disjoint i32 %320, %212
  %322 = zext nneg i32 %321 to i64
  %323 = or disjoint i32 %210, 6688
  %324 = xor i32 %323, %211
  %325 = or disjoint i32 %324, %212
  %326 = zext nneg i32 %325 to i64
  %327 = or disjoint i32 %208, 6192
  %328 = xor i32 %237, %327
  %329 = or disjoint i32 %328, %212
  %330 = zext nneg i32 %329 to i64
  %331 = or disjoint i32 %208, 6704
  %332 = xor i32 %237, %331
  %333 = or disjoint i32 %332, %212
  %334 = zext nneg i32 %333 to i64
  br label %335, !dbg !21

335:                                              ; preds = %.lr.ph, %335
  %336 = phi i32 [ 0, %.lr.ph ], [ %409, %335 ]
  %337 = phi i32 [ -1, %.lr.ph ], [ %407, %335 ]
  %338 = phi i32 [ 1, %.lr.ph ], [ %1188, %335 ]
  %339 = phi float [ 0.000000e+00, %.lr.ph ], [ %1107, %335 ]
  %340 = phi float [ 0.000000e+00, %.lr.ph ], [ %1108, %335 ]
  %341 = phi float [ 0.000000e+00, %.lr.ph ], [ %1109, %335 ]
  %342 = phi float [ 0.000000e+00, %.lr.ph ], [ %1110, %335 ]
  %343 = phi float [ 0.000000e+00, %.lr.ph ], [ %1112, %335 ]
  %344 = phi float [ 0.000000e+00, %.lr.ph ], [ %1113, %335 ]
  %345 = phi float [ 0.000000e+00, %.lr.ph ], [ %1114, %335 ]
  %346 = phi float [ 0.000000e+00, %.lr.ph ], [ %1115, %335 ]
  %347 = phi float [ 0.000000e+00, %.lr.ph ], [ %1117, %335 ]
  %348 = phi float [ 0.000000e+00, %.lr.ph ], [ %1118, %335 ]
  %349 = phi float [ 0.000000e+00, %.lr.ph ], [ %1119, %335 ]
  %350 = phi float [ 0.000000e+00, %.lr.ph ], [ %1120, %335 ]
  %351 = phi float [ 0.000000e+00, %.lr.ph ], [ %1122, %335 ]
  %352 = phi float [ 0.000000e+00, %.lr.ph ], [ %1123, %335 ]
  %353 = phi float [ 0.000000e+00, %.lr.ph ], [ %1124, %335 ]
  %354 = phi float [ 0.000000e+00, %.lr.ph ], [ %1125, %335 ]
  %355 = phi float [ 0.000000e+00, %.lr.ph ], [ %1127, %335 ]
  %356 = phi float [ 0.000000e+00, %.lr.ph ], [ %1128, %335 ]
  %357 = phi float [ 0.000000e+00, %.lr.ph ], [ %1129, %335 ]
  %358 = phi float [ 0.000000e+00, %.lr.ph ], [ %1130, %335 ]
  %359 = phi float [ 0.000000e+00, %.lr.ph ], [ %1132, %335 ]
  %360 = phi float [ 0.000000e+00, %.lr.ph ], [ %1133, %335 ]
  %361 = phi float [ 0.000000e+00, %.lr.ph ], [ %1134, %335 ]
  %362 = phi float [ 0.000000e+00, %.lr.ph ], [ %1135, %335 ]
  %363 = phi float [ 0.000000e+00, %.lr.ph ], [ %1137, %335 ]
  %364 = phi float [ 0.000000e+00, %.lr.ph ], [ %1138, %335 ]
  %365 = phi float [ 0.000000e+00, %.lr.ph ], [ %1139, %335 ]
  %366 = phi float [ 0.000000e+00, %.lr.ph ], [ %1140, %335 ]
  %367 = phi float [ 0.000000e+00, %.lr.ph ], [ %1142, %335 ]
  %368 = phi float [ 0.000000e+00, %.lr.ph ], [ %1143, %335 ]
  %369 = phi float [ 0.000000e+00, %.lr.ph ], [ %1144, %335 ]
  %370 = phi float [ 0.000000e+00, %.lr.ph ], [ %1145, %335 ]
  %371 = phi float [ 0.000000e+00, %.lr.ph ], [ %1147, %335 ]
  %372 = phi float [ 0.000000e+00, %.lr.ph ], [ %1148, %335 ]
  %373 = phi float [ 0.000000e+00, %.lr.ph ], [ %1149, %335 ]
  %374 = phi float [ 0.000000e+00, %.lr.ph ], [ %1150, %335 ]
  %375 = phi float [ 0.000000e+00, %.lr.ph ], [ %1152, %335 ]
  %376 = phi float [ 0.000000e+00, %.lr.ph ], [ %1153, %335 ]
  %377 = phi float [ 0.000000e+00, %.lr.ph ], [ %1154, %335 ]
  %378 = phi float [ 0.000000e+00, %.lr.ph ], [ %1155, %335 ]
  %379 = phi float [ 0.000000e+00, %.lr.ph ], [ %1157, %335 ]
  %380 = phi float [ 0.000000e+00, %.lr.ph ], [ %1158, %335 ]
  %381 = phi float [ 0.000000e+00, %.lr.ph ], [ %1159, %335 ]
  %382 = phi float [ 0.000000e+00, %.lr.ph ], [ %1160, %335 ]
  %383 = phi float [ 0.000000e+00, %.lr.ph ], [ %1162, %335 ]
  %384 = phi float [ 0.000000e+00, %.lr.ph ], [ %1163, %335 ]
  %385 = phi float [ 0.000000e+00, %.lr.ph ], [ %1164, %335 ]
  %386 = phi float [ 0.000000e+00, %.lr.ph ], [ %1165, %335 ]
  %387 = phi float [ 0.000000e+00, %.lr.ph ], [ %1167, %335 ]
  %388 = phi float [ 0.000000e+00, %.lr.ph ], [ %1168, %335 ]
  %389 = phi float [ 0.000000e+00, %.lr.ph ], [ %1169, %335 ]
  %390 = phi float [ 0.000000e+00, %.lr.ph ], [ %1170, %335 ]
  %391 = phi float [ 0.000000e+00, %.lr.ph ], [ %1172, %335 ]
  %392 = phi float [ 0.000000e+00, %.lr.ph ], [ %1173, %335 ]
  %393 = phi float [ 0.000000e+00, %.lr.ph ], [ %1174, %335 ]
  %394 = phi float [ 0.000000e+00, %.lr.ph ], [ %1175, %335 ]
  %395 = phi float [ 0.000000e+00, %.lr.ph ], [ %1177, %335 ]
  %396 = phi float [ 0.000000e+00, %.lr.ph ], [ %1178, %335 ]
  %397 = phi float [ 0.000000e+00, %.lr.ph ], [ %1179, %335 ]
  %398 = phi float [ 0.000000e+00, %.lr.ph ], [ %1180, %335 ]
  %399 = phi float [ 0.000000e+00, %.lr.ph ], [ %1182, %335 ]
  %400 = phi float [ 0.000000e+00, %.lr.ph ], [ %1183, %335 ]
  %401 = phi float [ 0.000000e+00, %.lr.ph ], [ %1184, %335 ]
  %402 = phi float [ 0.000000e+00, %.lr.ph ], [ %1185, %335 ]
  %403 = phi i32 [ 0, %.lr.ph ], [ %1208, %335 ]
  %404 = icmp slt i32 %403, %59, !dbg !21
  %405 = add i32 %337, 1, !dbg !21
  %406 = icmp sgt i32 %405, 1, !dbg !21
  %407 = select i1 %406, i32 0, i32 %405, !dbg !21
  %408 = zext i1 %406 to i32, !dbg !21
  %409 = xor i32 %336, %408, !dbg !21
  %410 = sext i32 %407 to i64, !dbg !21
  %411 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %410, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) %411, i32 %409) #3, !dbg !21
  %412 = shl i32 %407, 12, !dbg !23
  %413 = sext i32 %412 to i64, !dbg !23
  %414 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %413, !dbg !23
  %415 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %77, !dbg !23
  %416 = load <1 x i8>, ptr addrspace(3) %415, align 1, !dbg !23
  %417 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %79, !dbg !23
  %418 = load <1 x i8>, ptr addrspace(3) %417, align 1, !dbg !23
  %419 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %81, !dbg !23
  %420 = load <1 x i8>, ptr addrspace(3) %419, align 1, !dbg !23
  %421 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %83, !dbg !23
  %422 = load <1 x i8>, ptr addrspace(3) %421, align 1, !dbg !23
  %423 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %85, !dbg !23
  %424 = load <1 x i8>, ptr addrspace(3) %423, align 1, !dbg !23
  %425 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %87, !dbg !23
  %426 = load <1 x i8>, ptr addrspace(3) %425, align 1, !dbg !23
  %427 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %89, !dbg !23
  %428 = load <1 x i8>, ptr addrspace(3) %427, align 1, !dbg !23
  %429 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %91, !dbg !23
  %430 = load <1 x i8>, ptr addrspace(3) %429, align 1, !dbg !23
  %431 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %93, !dbg !23
  %432 = load <1 x i8>, ptr addrspace(3) %431, align 1, !dbg !23
  %433 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %95, !dbg !23
  %434 = load <1 x i8>, ptr addrspace(3) %433, align 1, !dbg !23
  %435 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %97, !dbg !23
  %436 = load <1 x i8>, ptr addrspace(3) %435, align 1, !dbg !23
  %437 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %99, !dbg !23
  %438 = load <1 x i8>, ptr addrspace(3) %437, align 1, !dbg !23
  %439 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %101, !dbg !23
  %440 = load <1 x i8>, ptr addrspace(3) %439, align 1, !dbg !23
  %441 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %103, !dbg !23
  %442 = load <1 x i8>, ptr addrspace(3) %441, align 1, !dbg !23
  %443 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %105, !dbg !23
  %444 = load <1 x i8>, ptr addrspace(3) %443, align 1, !dbg !23
  %445 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %107, !dbg !23
  %446 = load <1 x i8>, ptr addrspace(3) %445, align 1, !dbg !23
  %447 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %109, !dbg !23
  %448 = load <1 x i8>, ptr addrspace(3) %447, align 1, !dbg !23
  %449 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %111, !dbg !23
  %450 = load <1 x i8>, ptr addrspace(3) %449, align 1, !dbg !23
  %451 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %113, !dbg !23
  %452 = load <1 x i8>, ptr addrspace(3) %451, align 1, !dbg !23
  %453 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %115, !dbg !23
  %454 = load <1 x i8>, ptr addrspace(3) %453, align 1, !dbg !23
  %455 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %117, !dbg !23
  %456 = load <1 x i8>, ptr addrspace(3) %455, align 1, !dbg !23
  %457 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %119, !dbg !23
  %458 = load <1 x i8>, ptr addrspace(3) %457, align 1, !dbg !23
  %459 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %121, !dbg !23
  %460 = load <1 x i8>, ptr addrspace(3) %459, align 1, !dbg !23
  %461 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %123, !dbg !23
  %462 = load <1 x i8>, ptr addrspace(3) %461, align 1, !dbg !23
  %463 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %125, !dbg !23
  %464 = load <1 x i8>, ptr addrspace(3) %463, align 1, !dbg !23
  %465 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %127, !dbg !23
  %466 = load <1 x i8>, ptr addrspace(3) %465, align 1, !dbg !23
  %467 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %129, !dbg !23
  %468 = load <1 x i8>, ptr addrspace(3) %467, align 1, !dbg !23
  %469 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %131, !dbg !23
  %470 = load <1 x i8>, ptr addrspace(3) %469, align 1, !dbg !23
  %471 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %133, !dbg !23
  %472 = load <1 x i8>, ptr addrspace(3) %471, align 1, !dbg !23
  %473 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %135, !dbg !23
  %474 = load <1 x i8>, ptr addrspace(3) %473, align 1, !dbg !23
  %475 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %137, !dbg !23
  %476 = load <1 x i8>, ptr addrspace(3) %475, align 1, !dbg !23
  %477 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %139, !dbg !23
  %478 = load <1 x i8>, ptr addrspace(3) %477, align 1, !dbg !23
  %479 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %141, !dbg !23
  %480 = load <1 x i8>, ptr addrspace(3) %479, align 1, !dbg !23
  %481 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %143, !dbg !23
  %482 = load <1 x i8>, ptr addrspace(3) %481, align 1, !dbg !23
  %483 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %145, !dbg !23
  %484 = load <1 x i8>, ptr addrspace(3) %483, align 1, !dbg !23
  %485 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %147, !dbg !23
  %486 = load <1 x i8>, ptr addrspace(3) %485, align 1, !dbg !23
  %487 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %149, !dbg !23
  %488 = load <1 x i8>, ptr addrspace(3) %487, align 1, !dbg !23
  %489 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %151, !dbg !23
  %490 = load <1 x i8>, ptr addrspace(3) %489, align 1, !dbg !23
  %491 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %153, !dbg !23
  %492 = load <1 x i8>, ptr addrspace(3) %491, align 1, !dbg !23
  %493 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %155, !dbg !23
  %494 = load <1 x i8>, ptr addrspace(3) %493, align 1, !dbg !23
  %495 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %157, !dbg !23
  %496 = load <1 x i8>, ptr addrspace(3) %495, align 1, !dbg !23
  %497 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %159, !dbg !23
  %498 = load <1 x i8>, ptr addrspace(3) %497, align 1, !dbg !23
  %499 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %161, !dbg !23
  %500 = load <1 x i8>, ptr addrspace(3) %499, align 1, !dbg !23
  %501 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %163, !dbg !23
  %502 = load <1 x i8>, ptr addrspace(3) %501, align 1, !dbg !23
  %503 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %165, !dbg !23
  %504 = load <1 x i8>, ptr addrspace(3) %503, align 1, !dbg !23
  %505 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %167, !dbg !23
  %506 = load <1 x i8>, ptr addrspace(3) %505, align 1, !dbg !23
  %507 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %169, !dbg !23
  %508 = load <1 x i8>, ptr addrspace(3) %507, align 1, !dbg !23
  %509 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %171, !dbg !23
  %510 = load <1 x i8>, ptr addrspace(3) %509, align 1, !dbg !23
  %511 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %173, !dbg !23
  %512 = load <1 x i8>, ptr addrspace(3) %511, align 1, !dbg !23
  %513 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %175, !dbg !23
  %514 = load <1 x i8>, ptr addrspace(3) %513, align 1, !dbg !23
  %515 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %177, !dbg !23
  %516 = load <1 x i8>, ptr addrspace(3) %515, align 1, !dbg !23
  %517 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %179, !dbg !23
  %518 = load <1 x i8>, ptr addrspace(3) %517, align 1, !dbg !23
  %519 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %181, !dbg !23
  %520 = load <1 x i8>, ptr addrspace(3) %519, align 1, !dbg !23
  %521 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %183, !dbg !23
  %522 = load <1 x i8>, ptr addrspace(3) %521, align 1, !dbg !23
  %523 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %185, !dbg !23
  %524 = load <1 x i8>, ptr addrspace(3) %523, align 1, !dbg !23
  %525 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %187, !dbg !23
  %526 = load <1 x i8>, ptr addrspace(3) %525, align 1, !dbg !23
  %527 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %189, !dbg !23
  %528 = load <1 x i8>, ptr addrspace(3) %527, align 1, !dbg !23
  %529 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %191, !dbg !23
  %530 = load <1 x i8>, ptr addrspace(3) %529, align 1, !dbg !23
  %531 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %193, !dbg !23
  %532 = load <1 x i8>, ptr addrspace(3) %531, align 1, !dbg !23
  %533 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %195, !dbg !23
  %534 = load <1 x i8>, ptr addrspace(3) %533, align 1, !dbg !23
  %535 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %197, !dbg !23
  %536 = load <1 x i8>, ptr addrspace(3) %535, align 1, !dbg !23
  %537 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %199, !dbg !23
  %538 = load <1 x i8>, ptr addrspace(3) %537, align 1, !dbg !23
  %539 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %201, !dbg !23
  %540 = load <1 x i8>, ptr addrspace(3) %539, align 1, !dbg !23
  %541 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i64 %203, !dbg !23
  %542 = load <1 x i8>, ptr addrspace(3) %541, align 1, !dbg !23
  %543 = shl i32 %407, 13, !dbg !22
  %544 = sext i32 %543 to i64, !dbg !22
  %545 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %544, !dbg !22
  %546 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %215, !dbg !22
  %547 = load <2 x i16>, ptr addrspace(3) %546, align 4, !dbg !22
  %548 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %217, !dbg !22
  %549 = load <2 x i16>, ptr addrspace(3) %548, align 4, !dbg !22
  %550 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %222, !dbg !22
  %551 = load <2 x i16>, ptr addrspace(3) %550, align 4, !dbg !22
  %552 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %227, !dbg !22
  %553 = load <2 x i16>, ptr addrspace(3) %552, align 4, !dbg !22
  %554 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %231, !dbg !22
  %555 = load <2 x i16>, ptr addrspace(3) %554, align 4, !dbg !22
  %556 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %235, !dbg !22
  %557 = load <2 x i16>, ptr addrspace(3) %556, align 4, !dbg !22
  %558 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %240, !dbg !22
  %559 = load <2 x i16>, ptr addrspace(3) %558, align 4, !dbg !22
  %560 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %244, !dbg !22
  %561 = load <2 x i16>, ptr addrspace(3) %560, align 4, !dbg !22
  %562 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %246, !dbg !22
  %563 = load <2 x i16>, ptr addrspace(3) %562, align 4, !dbg !22
  %564 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %248, !dbg !22
  %565 = load <2 x i16>, ptr addrspace(3) %564, align 4, !dbg !22
  %566 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %253, !dbg !22
  %567 = load <2 x i16>, ptr addrspace(3) %566, align 4, !dbg !22
  %568 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %258, !dbg !22
  %569 = load <2 x i16>, ptr addrspace(3) %568, align 4, !dbg !22
  %570 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %262, !dbg !22
  %571 = load <2 x i16>, ptr addrspace(3) %570, align 4, !dbg !22
  %572 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %266, !dbg !22
  %573 = load <2 x i16>, ptr addrspace(3) %572, align 4, !dbg !22
  %574 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %270, !dbg !22
  %575 = load <2 x i16>, ptr addrspace(3) %574, align 4, !dbg !22
  %576 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %274, !dbg !22
  %577 = load <2 x i16>, ptr addrspace(3) %576, align 4, !dbg !22
  %578 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %276, !dbg !22
  %579 = load <2 x i16>, ptr addrspace(3) %578, align 4, !dbg !22
  %580 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %278, !dbg !22
  %581 = load <2 x i16>, ptr addrspace(3) %580, align 4, !dbg !22
  %582 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %283, !dbg !22
  %583 = load <2 x i16>, ptr addrspace(3) %582, align 4, !dbg !22
  %584 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %288, !dbg !22
  %585 = load <2 x i16>, ptr addrspace(3) %584, align 4, !dbg !22
  %586 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %292, !dbg !22
  %587 = load <2 x i16>, ptr addrspace(3) %586, align 4, !dbg !22
  %588 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %296, !dbg !22
  %589 = load <2 x i16>, ptr addrspace(3) %588, align 4, !dbg !22
  %590 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %300, !dbg !22
  %591 = load <2 x i16>, ptr addrspace(3) %590, align 4, !dbg !22
  %592 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %304, !dbg !22
  %593 = load <2 x i16>, ptr addrspace(3) %592, align 4, !dbg !22
  %594 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %306, !dbg !22
  %595 = load <2 x i16>, ptr addrspace(3) %594, align 4, !dbg !22
  %596 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %308, !dbg !22
  %597 = load <2 x i16>, ptr addrspace(3) %596, align 4, !dbg !22
  %598 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %313, !dbg !22
  %599 = load <2 x i16>, ptr addrspace(3) %598, align 4, !dbg !22
  %600 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %318, !dbg !22
  %601 = load <2 x i16>, ptr addrspace(3) %600, align 4, !dbg !22
  %602 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %322, !dbg !22
  %603 = load <2 x i16>, ptr addrspace(3) %602, align 4, !dbg !22
  %604 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %326, !dbg !22
  %605 = load <2 x i16>, ptr addrspace(3) %604, align 4, !dbg !22
  %606 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %330, !dbg !22
  %607 = load <2 x i16>, ptr addrspace(3) %606, align 4, !dbg !22
  %608 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i64 %334, !dbg !22
  %609 = load <2 x i16>, ptr addrspace(3) %608, align 4, !dbg !22
  %.extract = extractelement <2 x i16> %547, i64 0, !dbg !25
  %610 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract) #3, !dbg !25
  %.extract3 = extractelement <2 x i16> %547, i64 1, !dbg !25
  %611 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract3) #3, !dbg !25
  %.extract5 = extractelement <2 x i16> %549, i64 0, !dbg !25
  %612 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract5) #3, !dbg !25
  %.extract7 = extractelement <2 x i16> %549, i64 1, !dbg !25
  %613 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract7) #3, !dbg !25
  %.extract9 = extractelement <2 x i16> %551, i64 0, !dbg !25
  %614 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract9) #3, !dbg !25
  %.extract11 = extractelement <2 x i16> %551, i64 1, !dbg !25
  %615 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract11) #3, !dbg !25
  %.extract13 = extractelement <2 x i16> %553, i64 0, !dbg !25
  %616 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract13) #3, !dbg !25
  %.extract15 = extractelement <2 x i16> %553, i64 1, !dbg !25
  %617 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract15) #3, !dbg !25
  %.extract17 = extractelement <2 x i16> %555, i64 0, !dbg !25
  %618 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract17) #3, !dbg !25
  %.extract19 = extractelement <2 x i16> %555, i64 1, !dbg !25
  %619 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract19) #3, !dbg !25
  %.extract21 = extractelement <2 x i16> %557, i64 0, !dbg !25
  %620 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract21) #3, !dbg !25
  %.extract23 = extractelement <2 x i16> %557, i64 1, !dbg !25
  %621 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract23) #3, !dbg !25
  %.extract25 = extractelement <2 x i16> %559, i64 0, !dbg !25
  %622 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract25) #3, !dbg !25
  %.extract27 = extractelement <2 x i16> %559, i64 1, !dbg !25
  %623 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract27) #3, !dbg !25
  %.extract29 = extractelement <2 x i16> %561, i64 0, !dbg !25
  %624 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract29) #3, !dbg !25
  %.extract31 = extractelement <2 x i16> %561, i64 1, !dbg !25
  %625 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract31) #3, !dbg !25
  %.extract33 = extractelement <2 x i16> %563, i64 0, !dbg !25
  %626 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract33) #3, !dbg !25
  %.extract35 = extractelement <2 x i16> %563, i64 1, !dbg !25
  %627 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract35) #3, !dbg !25
  %.extract37 = extractelement <2 x i16> %565, i64 0, !dbg !25
  %628 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract37) #3, !dbg !25
  %.extract39 = extractelement <2 x i16> %565, i64 1, !dbg !25
  %629 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract39) #3, !dbg !25
  %.extract41 = extractelement <2 x i16> %567, i64 0, !dbg !25
  %630 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract41) #3, !dbg !25
  %.extract43 = extractelement <2 x i16> %567, i64 1, !dbg !25
  %631 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract43) #3, !dbg !25
  %.extract45 = extractelement <2 x i16> %569, i64 0, !dbg !25
  %632 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract45) #3, !dbg !25
  %.extract47 = extractelement <2 x i16> %569, i64 1, !dbg !25
  %633 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract47) #3, !dbg !25
  %.extract49 = extractelement <2 x i16> %571, i64 0, !dbg !25
  %634 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract49) #3, !dbg !25
  %.extract51 = extractelement <2 x i16> %571, i64 1, !dbg !25
  %635 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract51) #3, !dbg !25
  %.extract53 = extractelement <2 x i16> %573, i64 0, !dbg !25
  %636 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract53) #3, !dbg !25
  %.extract55 = extractelement <2 x i16> %573, i64 1, !dbg !25
  %637 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract55) #3, !dbg !25
  %.extract57 = extractelement <2 x i16> %575, i64 0, !dbg !25
  %638 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract57) #3, !dbg !25
  %.extract59 = extractelement <2 x i16> %575, i64 1, !dbg !25
  %639 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract59) #3, !dbg !25
  %.extract61 = extractelement <2 x i16> %577, i64 0, !dbg !25
  %640 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract61) #3, !dbg !25
  %.extract63 = extractelement <2 x i16> %577, i64 1, !dbg !25
  %641 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract63) #3, !dbg !25
  %.extract65 = extractelement <2 x i16> %579, i64 0, !dbg !25
  %642 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract65) #3, !dbg !25
  %.extract67 = extractelement <2 x i16> %579, i64 1, !dbg !25
  %643 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract67) #3, !dbg !25
  %.extract69 = extractelement <2 x i16> %581, i64 0, !dbg !25
  %644 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract69) #3, !dbg !25
  %.extract71 = extractelement <2 x i16> %581, i64 1, !dbg !25
  %645 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract71) #3, !dbg !25
  %.extract73 = extractelement <2 x i16> %583, i64 0, !dbg !25
  %646 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract73) #3, !dbg !25
  %.extract75 = extractelement <2 x i16> %583, i64 1, !dbg !25
  %647 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract75) #3, !dbg !25
  %.extract77 = extractelement <2 x i16> %585, i64 0, !dbg !25
  %648 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract77) #3, !dbg !25
  %.extract79 = extractelement <2 x i16> %585, i64 1, !dbg !25
  %649 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract79) #3, !dbg !25
  %.extract81 = extractelement <2 x i16> %587, i64 0, !dbg !25
  %650 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract81) #3, !dbg !25
  %.extract83 = extractelement <2 x i16> %587, i64 1, !dbg !25
  %651 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract83) #3, !dbg !25
  %.extract85 = extractelement <2 x i16> %589, i64 0, !dbg !25
  %652 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract85) #3, !dbg !25
  %.extract87 = extractelement <2 x i16> %589, i64 1, !dbg !25
  %653 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract87) #3, !dbg !25
  %.extract89 = extractelement <2 x i16> %591, i64 0, !dbg !25
  %654 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract89) #3, !dbg !25
  %.extract91 = extractelement <2 x i16> %591, i64 1, !dbg !25
  %655 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract91) #3, !dbg !25
  %.extract93 = extractelement <2 x i16> %593, i64 0, !dbg !25
  %656 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract93) #3, !dbg !25
  %.extract95 = extractelement <2 x i16> %593, i64 1, !dbg !25
  %657 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract95) #3, !dbg !25
  %.extract97 = extractelement <2 x i16> %595, i64 0, !dbg !25
  %658 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract97) #3, !dbg !25
  %.extract99 = extractelement <2 x i16> %595, i64 1, !dbg !25
  %659 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract99) #3, !dbg !25
  %.extract101 = extractelement <2 x i16> %597, i64 0, !dbg !25
  %660 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract101) #3, !dbg !25
  %.extract103 = extractelement <2 x i16> %597, i64 1, !dbg !25
  %661 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract103) #3, !dbg !25
  %.extract105 = extractelement <2 x i16> %599, i64 0, !dbg !25
  %662 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract105) #3, !dbg !25
  %.extract107 = extractelement <2 x i16> %599, i64 1, !dbg !25
  %663 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract107) #3, !dbg !25
  %.extract109 = extractelement <2 x i16> %601, i64 0, !dbg !25
  %664 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract109) #3, !dbg !25
  %.extract111 = extractelement <2 x i16> %601, i64 1, !dbg !25
  %665 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract111) #3, !dbg !25
  %.extract113 = extractelement <2 x i16> %603, i64 0, !dbg !25
  %666 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract113) #3, !dbg !25
  %.extract115 = extractelement <2 x i16> %603, i64 1, !dbg !25
  %667 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract115) #3, !dbg !25
  %.extract117 = extractelement <2 x i16> %605, i64 0, !dbg !25
  %668 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract117) #3, !dbg !25
  %.extract119 = extractelement <2 x i16> %605, i64 1, !dbg !25
  %669 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract119) #3, !dbg !25
  %.extract121 = extractelement <2 x i16> %607, i64 0, !dbg !25
  %670 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract121) #3, !dbg !25
  %.extract123 = extractelement <2 x i16> %607, i64 1, !dbg !25
  %671 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract123) #3, !dbg !25
  %.extract125 = extractelement <2 x i16> %609, i64 0, !dbg !25
  %672 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract125) #3, !dbg !25
  %.extract127 = extractelement <2 x i16> %609, i64 1, !dbg !25
  %673 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %.extract127) #3, !dbg !25
  %674 = shufflevector <1 x i8> %416, <1 x i8> %418, <2 x i32> <i32 0, i32 1>, !dbg !25
  %675 = bitcast <2 x i8> %674 to i16, !dbg !25
  %676 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %675) #3, !dbg !25
  %677 = shufflevector <1 x i8> %420, <1 x i8> %422, <2 x i32> <i32 0, i32 1>, !dbg !25
  %678 = bitcast <2 x i8> %677 to i16, !dbg !25
  %679 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %678) #3, !dbg !25
  %680 = shufflevector <1 x i8> %424, <1 x i8> %426, <2 x i32> <i32 0, i32 1>, !dbg !25
  %681 = bitcast <2 x i8> %680 to i16, !dbg !25
  %682 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %681) #3, !dbg !25
  %683 = shufflevector <1 x i8> %428, <1 x i8> %430, <2 x i32> <i32 0, i32 1>, !dbg !25
  %684 = bitcast <2 x i8> %683 to i16, !dbg !25
  %685 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %684) #3, !dbg !25
  %686 = shufflevector <1 x i8> %432, <1 x i8> %434, <2 x i32> <i32 0, i32 1>, !dbg !25
  %687 = bitcast <2 x i8> %686 to i16, !dbg !25
  %688 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %687) #3, !dbg !25
  %689 = shufflevector <1 x i8> %436, <1 x i8> %438, <2 x i32> <i32 0, i32 1>, !dbg !25
  %690 = bitcast <2 x i8> %689 to i16, !dbg !25
  %691 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %690) #3, !dbg !25
  %692 = shufflevector <1 x i8> %440, <1 x i8> %442, <2 x i32> <i32 0, i32 1>, !dbg !25
  %693 = bitcast <2 x i8> %692 to i16, !dbg !25
  %694 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %693) #3, !dbg !25
  %695 = shufflevector <1 x i8> %444, <1 x i8> %446, <2 x i32> <i32 0, i32 1>, !dbg !25
  %696 = bitcast <2 x i8> %695 to i16, !dbg !25
  %697 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %696) #3, !dbg !25
  %698 = shufflevector <1 x i8> %448, <1 x i8> %450, <2 x i32> <i32 0, i32 1>, !dbg !25
  %699 = bitcast <2 x i8> %698 to i16, !dbg !25
  %700 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %699) #3, !dbg !25
  %701 = shufflevector <1 x i8> %452, <1 x i8> %454, <2 x i32> <i32 0, i32 1>, !dbg !25
  %702 = bitcast <2 x i8> %701 to i16, !dbg !25
  %703 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %702) #3, !dbg !25
  %704 = shufflevector <1 x i8> %456, <1 x i8> %458, <2 x i32> <i32 0, i32 1>, !dbg !25
  %705 = bitcast <2 x i8> %704 to i16, !dbg !25
  %706 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %705) #3, !dbg !25
  %707 = shufflevector <1 x i8> %460, <1 x i8> %462, <2 x i32> <i32 0, i32 1>, !dbg !25
  %708 = bitcast <2 x i8> %707 to i16, !dbg !25
  %709 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %708) #3, !dbg !25
  %710 = shufflevector <1 x i8> %464, <1 x i8> %466, <2 x i32> <i32 0, i32 1>, !dbg !25
  %711 = bitcast <2 x i8> %710 to i16, !dbg !25
  %712 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %711) #3, !dbg !25
  %713 = shufflevector <1 x i8> %468, <1 x i8> %470, <2 x i32> <i32 0, i32 1>, !dbg !25
  %714 = bitcast <2 x i8> %713 to i16, !dbg !25
  %715 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %714) #3, !dbg !25
  %716 = shufflevector <1 x i8> %472, <1 x i8> %474, <2 x i32> <i32 0, i32 1>, !dbg !25
  %717 = bitcast <2 x i8> %716 to i16, !dbg !25
  %718 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %717) #3, !dbg !25
  %719 = shufflevector <1 x i8> %476, <1 x i8> %478, <2 x i32> <i32 0, i32 1>, !dbg !25
  %720 = bitcast <2 x i8> %719 to i16, !dbg !25
  %721 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %720) #3, !dbg !25
  %722 = shufflevector <1 x i8> %480, <1 x i8> %482, <2 x i32> <i32 0, i32 1>, !dbg !25
  %723 = bitcast <2 x i8> %722 to i16, !dbg !25
  %724 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %723) #3, !dbg !25
  %725 = shufflevector <1 x i8> %484, <1 x i8> %486, <2 x i32> <i32 0, i32 1>, !dbg !25
  %726 = bitcast <2 x i8> %725 to i16, !dbg !25
  %727 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %726) #3, !dbg !25
  %728 = shufflevector <1 x i8> %488, <1 x i8> %490, <2 x i32> <i32 0, i32 1>, !dbg !25
  %729 = bitcast <2 x i8> %728 to i16, !dbg !25
  %730 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %729) #3, !dbg !25
  %731 = shufflevector <1 x i8> %492, <1 x i8> %494, <2 x i32> <i32 0, i32 1>, !dbg !25
  %732 = bitcast <2 x i8> %731 to i16, !dbg !25
  %733 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %732) #3, !dbg !25
  %734 = shufflevector <1 x i8> %496, <1 x i8> %498, <2 x i32> <i32 0, i32 1>, !dbg !25
  %735 = bitcast <2 x i8> %734 to i16, !dbg !25
  %736 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %735) #3, !dbg !25
  %737 = shufflevector <1 x i8> %500, <1 x i8> %502, <2 x i32> <i32 0, i32 1>, !dbg !25
  %738 = bitcast <2 x i8> %737 to i16, !dbg !25
  %739 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %738) #3, !dbg !25
  %740 = shufflevector <1 x i8> %504, <1 x i8> %506, <2 x i32> <i32 0, i32 1>, !dbg !25
  %741 = bitcast <2 x i8> %740 to i16, !dbg !25
  %742 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %741) #3, !dbg !25
  %743 = shufflevector <1 x i8> %508, <1 x i8> %510, <2 x i32> <i32 0, i32 1>, !dbg !25
  %744 = bitcast <2 x i8> %743 to i16, !dbg !25
  %745 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %744) #3, !dbg !25
  %746 = shufflevector <1 x i8> %512, <1 x i8> %514, <2 x i32> <i32 0, i32 1>, !dbg !25
  %747 = bitcast <2 x i8> %746 to i16, !dbg !25
  %748 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %747) #3, !dbg !25
  %749 = shufflevector <1 x i8> %516, <1 x i8> %518, <2 x i32> <i32 0, i32 1>, !dbg !25
  %750 = bitcast <2 x i8> %749 to i16, !dbg !25
  %751 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %750) #3, !dbg !25
  %752 = shufflevector <1 x i8> %520, <1 x i8> %522, <2 x i32> <i32 0, i32 1>, !dbg !25
  %753 = bitcast <2 x i8> %752 to i16, !dbg !25
  %754 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %753) #3, !dbg !25
  %755 = shufflevector <1 x i8> %524, <1 x i8> %526, <2 x i32> <i32 0, i32 1>, !dbg !25
  %756 = bitcast <2 x i8> %755 to i16, !dbg !25
  %757 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %756) #3, !dbg !25
  %758 = shufflevector <1 x i8> %528, <1 x i8> %530, <2 x i32> <i32 0, i32 1>, !dbg !25
  %759 = bitcast <2 x i8> %758 to i16, !dbg !25
  %760 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %759) #3, !dbg !25
  %761 = shufflevector <1 x i8> %532, <1 x i8> %534, <2 x i32> <i32 0, i32 1>, !dbg !25
  %762 = bitcast <2 x i8> %761 to i16, !dbg !25
  %763 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %762) #3, !dbg !25
  %764 = shufflevector <1 x i8> %536, <1 x i8> %538, <2 x i32> <i32 0, i32 1>, !dbg !25
  %765 = bitcast <2 x i8> %764 to i16, !dbg !25
  %766 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %765) #3, !dbg !25
  %767 = shufflevector <1 x i8> %540, <1 x i8> %542, <2 x i32> <i32 0, i32 1>, !dbg !25
  %768 = bitcast <2 x i8> %767 to i16, !dbg !25
  %769 = tail call <2 x half> asm "cvt.rn.f16x2.e5m2x2 $0, $1; \0A\09", "=r,h"(i16 %768) #3, !dbg !25
  %770 = bitcast <2 x half> %610 to i32, !dbg !25
  %771 = bitcast <2 x half> %612 to i32, !dbg !25
  %772 = bitcast <2 x half> %614 to i32, !dbg !25
  %773 = bitcast <2 x half> %616 to i32, !dbg !25
  %774 = bitcast <2 x half> %611 to i32, !dbg !25
  %775 = bitcast <2 x half> %613 to i32, !dbg !25
  %776 = bitcast <2 x half> %615 to i32, !dbg !25
  %777 = bitcast <2 x half> %617 to i32, !dbg !25
  %778 = bitcast <2 x half> %618 to i32, !dbg !25
  %779 = bitcast <2 x half> %620 to i32, !dbg !25
  %780 = bitcast <2 x half> %622 to i32, !dbg !25
  %781 = bitcast <2 x half> %624 to i32, !dbg !25
  %782 = bitcast <2 x half> %619 to i32, !dbg !25
  %783 = bitcast <2 x half> %621 to i32, !dbg !25
  %784 = bitcast <2 x half> %623 to i32, !dbg !25
  %785 = bitcast <2 x half> %625 to i32, !dbg !25
  %786 = bitcast <2 x half> %626 to i32, !dbg !25
  %787 = bitcast <2 x half> %628 to i32, !dbg !25
  %788 = bitcast <2 x half> %630 to i32, !dbg !25
  %789 = bitcast <2 x half> %632 to i32, !dbg !25
  %790 = bitcast <2 x half> %627 to i32, !dbg !25
  %791 = bitcast <2 x half> %629 to i32, !dbg !25
  %792 = bitcast <2 x half> %631 to i32, !dbg !25
  %793 = bitcast <2 x half> %633 to i32, !dbg !25
  %794 = bitcast <2 x half> %634 to i32, !dbg !25
  %795 = bitcast <2 x half> %636 to i32, !dbg !25
  %796 = bitcast <2 x half> %638 to i32, !dbg !25
  %797 = bitcast <2 x half> %640 to i32, !dbg !25
  %798 = bitcast <2 x half> %635 to i32, !dbg !25
  %799 = bitcast <2 x half> %637 to i32, !dbg !25
  %800 = bitcast <2 x half> %639 to i32, !dbg !25
  %801 = bitcast <2 x half> %641 to i32, !dbg !25
  %802 = bitcast <2 x half> %642 to i32, !dbg !25
  %803 = bitcast <2 x half> %644 to i32, !dbg !25
  %804 = bitcast <2 x half> %646 to i32, !dbg !25
  %805 = bitcast <2 x half> %648 to i32, !dbg !25
  %806 = bitcast <2 x half> %643 to i32, !dbg !25
  %807 = bitcast <2 x half> %645 to i32, !dbg !25
  %808 = bitcast <2 x half> %647 to i32, !dbg !25
  %809 = bitcast <2 x half> %649 to i32, !dbg !25
  %810 = bitcast <2 x half> %650 to i32, !dbg !25
  %811 = bitcast <2 x half> %652 to i32, !dbg !25
  %812 = bitcast <2 x half> %654 to i32, !dbg !25
  %813 = bitcast <2 x half> %656 to i32, !dbg !25
  %814 = bitcast <2 x half> %651 to i32, !dbg !25
  %815 = bitcast <2 x half> %653 to i32, !dbg !25
  %816 = bitcast <2 x half> %655 to i32, !dbg !25
  %817 = bitcast <2 x half> %657 to i32, !dbg !25
  %818 = bitcast <2 x half> %658 to i32, !dbg !25
  %819 = bitcast <2 x half> %660 to i32, !dbg !25
  %820 = bitcast <2 x half> %662 to i32, !dbg !25
  %821 = bitcast <2 x half> %664 to i32, !dbg !25
  %822 = bitcast <2 x half> %659 to i32, !dbg !25
  %823 = bitcast <2 x half> %661 to i32, !dbg !25
  %824 = bitcast <2 x half> %663 to i32, !dbg !25
  %825 = bitcast <2 x half> %665 to i32, !dbg !25
  %826 = bitcast <2 x half> %666 to i32, !dbg !25
  %827 = bitcast <2 x half> %668 to i32, !dbg !25
  %828 = bitcast <2 x half> %670 to i32, !dbg !25
  %829 = bitcast <2 x half> %672 to i32, !dbg !25
  %830 = bitcast <2 x half> %667 to i32, !dbg !25
  %831 = bitcast <2 x half> %669 to i32, !dbg !25
  %832 = bitcast <2 x half> %671 to i32, !dbg !25
  %833 = bitcast <2 x half> %673 to i32, !dbg !25
  %834 = bitcast <2 x half> %676 to i32, !dbg !25
  %835 = bitcast <2 x half> %682 to i32, !dbg !25
  %836 = bitcast <2 x half> %679 to i32, !dbg !25
  %837 = bitcast <2 x half> %685 to i32, !dbg !25
  %838 = bitcast <2 x half> %688 to i32, !dbg !25
  %839 = bitcast <2 x half> %694 to i32, !dbg !25
  %840 = bitcast <2 x half> %691 to i32, !dbg !25
  %841 = bitcast <2 x half> %697 to i32, !dbg !25
  %842 = bitcast <2 x half> %700 to i32, !dbg !25
  %843 = bitcast <2 x half> %706 to i32, !dbg !25
  %844 = bitcast <2 x half> %703 to i32, !dbg !25
  %845 = bitcast <2 x half> %709 to i32, !dbg !25
  %846 = bitcast <2 x half> %712 to i32, !dbg !25
  %847 = bitcast <2 x half> %718 to i32, !dbg !25
  %848 = bitcast <2 x half> %715 to i32, !dbg !25
  %849 = bitcast <2 x half> %721 to i32, !dbg !25
  %850 = bitcast <2 x half> %724 to i32, !dbg !25
  %851 = bitcast <2 x half> %730 to i32, !dbg !25
  %852 = bitcast <2 x half> %727 to i32, !dbg !25
  %853 = bitcast <2 x half> %733 to i32, !dbg !25
  %854 = bitcast <2 x half> %736 to i32, !dbg !25
  %855 = bitcast <2 x half> %742 to i32, !dbg !25
  %856 = bitcast <2 x half> %739 to i32, !dbg !25
  %857 = bitcast <2 x half> %745 to i32, !dbg !25
  %858 = bitcast <2 x half> %748 to i32, !dbg !25
  %859 = bitcast <2 x half> %754 to i32, !dbg !25
  %860 = bitcast <2 x half> %751 to i32, !dbg !25
  %861 = bitcast <2 x half> %757 to i32, !dbg !25
  %862 = bitcast <2 x half> %760 to i32, !dbg !25
  %863 = bitcast <2 x half> %766 to i32, !dbg !25
  %864 = bitcast <2 x half> %763 to i32, !dbg !25
  %865 = bitcast <2 x half> %769 to i32, !dbg !25
  %866 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %339, float %340, float %341, float %342, i32 %770, i32 %771, i32 %772, i32 %773, i32 %834, i32 %835) #3, !dbg !25
  %867 = extractvalue { float, float, float, float } %866, 0, !dbg !25
  %868 = extractvalue { float, float, float, float } %866, 1, !dbg !25
  %869 = extractvalue { float, float, float, float } %866, 2, !dbg !25
  %870 = extractvalue { float, float, float, float } %866, 3, !dbg !25
  %871 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %343, float %344, float %345, float %346, i32 %770, i32 %771, i32 %772, i32 %773, i32 %842, i32 %843) #3, !dbg !25
  %872 = extractvalue { float, float, float, float } %871, 0, !dbg !25
  %873 = extractvalue { float, float, float, float } %871, 1, !dbg !25
  %874 = extractvalue { float, float, float, float } %871, 2, !dbg !25
  %875 = extractvalue { float, float, float, float } %871, 3, !dbg !25
  %876 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %347, float %348, float %349, float %350, i32 %770, i32 %771, i32 %772, i32 %773, i32 %850, i32 %851) #3, !dbg !25
  %877 = extractvalue { float, float, float, float } %876, 0, !dbg !25
  %878 = extractvalue { float, float, float, float } %876, 1, !dbg !25
  %879 = extractvalue { float, float, float, float } %876, 2, !dbg !25
  %880 = extractvalue { float, float, float, float } %876, 3, !dbg !25
  %881 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %351, float %352, float %353, float %354, i32 %770, i32 %771, i32 %772, i32 %773, i32 %858, i32 %859) #3, !dbg !25
  %882 = extractvalue { float, float, float, float } %881, 0, !dbg !25
  %883 = extractvalue { float, float, float, float } %881, 1, !dbg !25
  %884 = extractvalue { float, float, float, float } %881, 2, !dbg !25
  %885 = extractvalue { float, float, float, float } %881, 3, !dbg !25
  %886 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %355, float %356, float %357, float %358, i32 %786, i32 %787, i32 %788, i32 %789, i32 %834, i32 %835) #3, !dbg !25
  %887 = extractvalue { float, float, float, float } %886, 0, !dbg !25
  %888 = extractvalue { float, float, float, float } %886, 1, !dbg !25
  %889 = extractvalue { float, float, float, float } %886, 2, !dbg !25
  %890 = extractvalue { float, float, float, float } %886, 3, !dbg !25
  %891 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %359, float %360, float %361, float %362, i32 %786, i32 %787, i32 %788, i32 %789, i32 %842, i32 %843) #3, !dbg !25
  %892 = extractvalue { float, float, float, float } %891, 0, !dbg !25
  %893 = extractvalue { float, float, float, float } %891, 1, !dbg !25
  %894 = extractvalue { float, float, float, float } %891, 2, !dbg !25
  %895 = extractvalue { float, float, float, float } %891, 3, !dbg !25
  %896 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %363, float %364, float %365, float %366, i32 %786, i32 %787, i32 %788, i32 %789, i32 %850, i32 %851) #3, !dbg !25
  %897 = extractvalue { float, float, float, float } %896, 0, !dbg !25
  %898 = extractvalue { float, float, float, float } %896, 1, !dbg !25
  %899 = extractvalue { float, float, float, float } %896, 2, !dbg !25
  %900 = extractvalue { float, float, float, float } %896, 3, !dbg !25
  %901 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %367, float %368, float %369, float %370, i32 %786, i32 %787, i32 %788, i32 %789, i32 %858, i32 %859) #3, !dbg !25
  %902 = extractvalue { float, float, float, float } %901, 0, !dbg !25
  %903 = extractvalue { float, float, float, float } %901, 1, !dbg !25
  %904 = extractvalue { float, float, float, float } %901, 2, !dbg !25
  %905 = extractvalue { float, float, float, float } %901, 3, !dbg !25
  %906 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %371, float %372, float %373, float %374, i32 %802, i32 %803, i32 %804, i32 %805, i32 %834, i32 %835) #3, !dbg !25
  %907 = extractvalue { float, float, float, float } %906, 0, !dbg !25
  %908 = extractvalue { float, float, float, float } %906, 1, !dbg !25
  %909 = extractvalue { float, float, float, float } %906, 2, !dbg !25
  %910 = extractvalue { float, float, float, float } %906, 3, !dbg !25
  %911 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %375, float %376, float %377, float %378, i32 %802, i32 %803, i32 %804, i32 %805, i32 %842, i32 %843) #3, !dbg !25
  %912 = extractvalue { float, float, float, float } %911, 0, !dbg !25
  %913 = extractvalue { float, float, float, float } %911, 1, !dbg !25
  %914 = extractvalue { float, float, float, float } %911, 2, !dbg !25
  %915 = extractvalue { float, float, float, float } %911, 3, !dbg !25
  %916 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %379, float %380, float %381, float %382, i32 %802, i32 %803, i32 %804, i32 %805, i32 %850, i32 %851) #3, !dbg !25
  %917 = extractvalue { float, float, float, float } %916, 0, !dbg !25
  %918 = extractvalue { float, float, float, float } %916, 1, !dbg !25
  %919 = extractvalue { float, float, float, float } %916, 2, !dbg !25
  %920 = extractvalue { float, float, float, float } %916, 3, !dbg !25
  %921 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %383, float %384, float %385, float %386, i32 %802, i32 %803, i32 %804, i32 %805, i32 %858, i32 %859) #3, !dbg !25
  %922 = extractvalue { float, float, float, float } %921, 0, !dbg !25
  %923 = extractvalue { float, float, float, float } %921, 1, !dbg !25
  %924 = extractvalue { float, float, float, float } %921, 2, !dbg !25
  %925 = extractvalue { float, float, float, float } %921, 3, !dbg !25
  %926 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %387, float %388, float %389, float %390, i32 %818, i32 %819, i32 %820, i32 %821, i32 %834, i32 %835) #3, !dbg !25
  %927 = extractvalue { float, float, float, float } %926, 0, !dbg !25
  %928 = extractvalue { float, float, float, float } %926, 1, !dbg !25
  %929 = extractvalue { float, float, float, float } %926, 2, !dbg !25
  %930 = extractvalue { float, float, float, float } %926, 3, !dbg !25
  %931 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %391, float %392, float %393, float %394, i32 %818, i32 %819, i32 %820, i32 %821, i32 %842, i32 %843) #3, !dbg !25
  %932 = extractvalue { float, float, float, float } %931, 0, !dbg !25
  %933 = extractvalue { float, float, float, float } %931, 1, !dbg !25
  %934 = extractvalue { float, float, float, float } %931, 2, !dbg !25
  %935 = extractvalue { float, float, float, float } %931, 3, !dbg !25
  %936 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %395, float %396, float %397, float %398, i32 %818, i32 %819, i32 %820, i32 %821, i32 %850, i32 %851) #3, !dbg !25
  %937 = extractvalue { float, float, float, float } %936, 0, !dbg !25
  %938 = extractvalue { float, float, float, float } %936, 1, !dbg !25
  %939 = extractvalue { float, float, float, float } %936, 2, !dbg !25
  %940 = extractvalue { float, float, float, float } %936, 3, !dbg !25
  %941 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %399, float %400, float %401, float %402, i32 %818, i32 %819, i32 %820, i32 %821, i32 %858, i32 %859) #3, !dbg !25
  %942 = extractvalue { float, float, float, float } %941, 0, !dbg !25
  %943 = extractvalue { float, float, float, float } %941, 1, !dbg !25
  %944 = extractvalue { float, float, float, float } %941, 2, !dbg !25
  %945 = extractvalue { float, float, float, float } %941, 3, !dbg !25
  %946 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %867, float %868, float %869, float %870, i32 %774, i32 %775, i32 %776, i32 %777, i32 %836, i32 %837) #3, !dbg !25
  %947 = extractvalue { float, float, float, float } %946, 0, !dbg !25
  %948 = extractvalue { float, float, float, float } %946, 1, !dbg !25
  %949 = extractvalue { float, float, float, float } %946, 2, !dbg !25
  %950 = extractvalue { float, float, float, float } %946, 3, !dbg !25
  %951 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %872, float %873, float %874, float %875, i32 %774, i32 %775, i32 %776, i32 %777, i32 %844, i32 %845) #3, !dbg !25
  %952 = extractvalue { float, float, float, float } %951, 0, !dbg !25
  %953 = extractvalue { float, float, float, float } %951, 1, !dbg !25
  %954 = extractvalue { float, float, float, float } %951, 2, !dbg !25
  %955 = extractvalue { float, float, float, float } %951, 3, !dbg !25
  %956 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %877, float %878, float %879, float %880, i32 %774, i32 %775, i32 %776, i32 %777, i32 %852, i32 %853) #3, !dbg !25
  %957 = extractvalue { float, float, float, float } %956, 0, !dbg !25
  %958 = extractvalue { float, float, float, float } %956, 1, !dbg !25
  %959 = extractvalue { float, float, float, float } %956, 2, !dbg !25
  %960 = extractvalue { float, float, float, float } %956, 3, !dbg !25
  %961 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %882, float %883, float %884, float %885, i32 %774, i32 %775, i32 %776, i32 %777, i32 %860, i32 %861) #3, !dbg !25
  %962 = extractvalue { float, float, float, float } %961, 0, !dbg !25
  %963 = extractvalue { float, float, float, float } %961, 1, !dbg !25
  %964 = extractvalue { float, float, float, float } %961, 2, !dbg !25
  %965 = extractvalue { float, float, float, float } %961, 3, !dbg !25
  %966 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %887, float %888, float %889, float %890, i32 %790, i32 %791, i32 %792, i32 %793, i32 %836, i32 %837) #3, !dbg !25
  %967 = extractvalue { float, float, float, float } %966, 0, !dbg !25
  %968 = extractvalue { float, float, float, float } %966, 1, !dbg !25
  %969 = extractvalue { float, float, float, float } %966, 2, !dbg !25
  %970 = extractvalue { float, float, float, float } %966, 3, !dbg !25
  %971 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %892, float %893, float %894, float %895, i32 %790, i32 %791, i32 %792, i32 %793, i32 %844, i32 %845) #3, !dbg !25
  %972 = extractvalue { float, float, float, float } %971, 0, !dbg !25
  %973 = extractvalue { float, float, float, float } %971, 1, !dbg !25
  %974 = extractvalue { float, float, float, float } %971, 2, !dbg !25
  %975 = extractvalue { float, float, float, float } %971, 3, !dbg !25
  %976 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %897, float %898, float %899, float %900, i32 %790, i32 %791, i32 %792, i32 %793, i32 %852, i32 %853) #3, !dbg !25
  %977 = extractvalue { float, float, float, float } %976, 0, !dbg !25
  %978 = extractvalue { float, float, float, float } %976, 1, !dbg !25
  %979 = extractvalue { float, float, float, float } %976, 2, !dbg !25
  %980 = extractvalue { float, float, float, float } %976, 3, !dbg !25
  %981 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %902, float %903, float %904, float %905, i32 %790, i32 %791, i32 %792, i32 %793, i32 %860, i32 %861) #3, !dbg !25
  %982 = extractvalue { float, float, float, float } %981, 0, !dbg !25
  %983 = extractvalue { float, float, float, float } %981, 1, !dbg !25
  %984 = extractvalue { float, float, float, float } %981, 2, !dbg !25
  %985 = extractvalue { float, float, float, float } %981, 3, !dbg !25
  %986 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %907, float %908, float %909, float %910, i32 %806, i32 %807, i32 %808, i32 %809, i32 %836, i32 %837) #3, !dbg !25
  %987 = extractvalue { float, float, float, float } %986, 0, !dbg !25
  %988 = extractvalue { float, float, float, float } %986, 1, !dbg !25
  %989 = extractvalue { float, float, float, float } %986, 2, !dbg !25
  %990 = extractvalue { float, float, float, float } %986, 3, !dbg !25
  %991 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %912, float %913, float %914, float %915, i32 %806, i32 %807, i32 %808, i32 %809, i32 %844, i32 %845) #3, !dbg !25
  %992 = extractvalue { float, float, float, float } %991, 0, !dbg !25
  %993 = extractvalue { float, float, float, float } %991, 1, !dbg !25
  %994 = extractvalue { float, float, float, float } %991, 2, !dbg !25
  %995 = extractvalue { float, float, float, float } %991, 3, !dbg !25
  %996 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %917, float %918, float %919, float %920, i32 %806, i32 %807, i32 %808, i32 %809, i32 %852, i32 %853) #3, !dbg !25
  %997 = extractvalue { float, float, float, float } %996, 0, !dbg !25
  %998 = extractvalue { float, float, float, float } %996, 1, !dbg !25
  %999 = extractvalue { float, float, float, float } %996, 2, !dbg !25
  %1000 = extractvalue { float, float, float, float } %996, 3, !dbg !25
  %1001 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %922, float %923, float %924, float %925, i32 %806, i32 %807, i32 %808, i32 %809, i32 %860, i32 %861) #3, !dbg !25
  %1002 = extractvalue { float, float, float, float } %1001, 0, !dbg !25
  %1003 = extractvalue { float, float, float, float } %1001, 1, !dbg !25
  %1004 = extractvalue { float, float, float, float } %1001, 2, !dbg !25
  %1005 = extractvalue { float, float, float, float } %1001, 3, !dbg !25
  %1006 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %927, float %928, float %929, float %930, i32 %822, i32 %823, i32 %824, i32 %825, i32 %836, i32 %837) #3, !dbg !25
  %1007 = extractvalue { float, float, float, float } %1006, 0, !dbg !25
  %1008 = extractvalue { float, float, float, float } %1006, 1, !dbg !25
  %1009 = extractvalue { float, float, float, float } %1006, 2, !dbg !25
  %1010 = extractvalue { float, float, float, float } %1006, 3, !dbg !25
  %1011 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %932, float %933, float %934, float %935, i32 %822, i32 %823, i32 %824, i32 %825, i32 %844, i32 %845) #3, !dbg !25
  %1012 = extractvalue { float, float, float, float } %1011, 0, !dbg !25
  %1013 = extractvalue { float, float, float, float } %1011, 1, !dbg !25
  %1014 = extractvalue { float, float, float, float } %1011, 2, !dbg !25
  %1015 = extractvalue { float, float, float, float } %1011, 3, !dbg !25
  %1016 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %937, float %938, float %939, float %940, i32 %822, i32 %823, i32 %824, i32 %825, i32 %852, i32 %853) #3, !dbg !25
  %1017 = extractvalue { float, float, float, float } %1016, 0, !dbg !25
  %1018 = extractvalue { float, float, float, float } %1016, 1, !dbg !25
  %1019 = extractvalue { float, float, float, float } %1016, 2, !dbg !25
  %1020 = extractvalue { float, float, float, float } %1016, 3, !dbg !25
  %1021 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %942, float %943, float %944, float %945, i32 %822, i32 %823, i32 %824, i32 %825, i32 %860, i32 %861) #3, !dbg !25
  %1022 = extractvalue { float, float, float, float } %1021, 0, !dbg !25
  %1023 = extractvalue { float, float, float, float } %1021, 1, !dbg !25
  %1024 = extractvalue { float, float, float, float } %1021, 2, !dbg !25
  %1025 = extractvalue { float, float, float, float } %1021, 3, !dbg !25
  %1026 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %947, float %948, float %949, float %950, i32 %778, i32 %779, i32 %780, i32 %781, i32 %838, i32 %839) #3, !dbg !25
  %1027 = extractvalue { float, float, float, float } %1026, 0, !dbg !25
  %1028 = extractvalue { float, float, float, float } %1026, 1, !dbg !25
  %1029 = extractvalue { float, float, float, float } %1026, 2, !dbg !25
  %1030 = extractvalue { float, float, float, float } %1026, 3, !dbg !25
  %1031 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %952, float %953, float %954, float %955, i32 %778, i32 %779, i32 %780, i32 %781, i32 %846, i32 %847) #3, !dbg !25
  %1032 = extractvalue { float, float, float, float } %1031, 0, !dbg !25
  %1033 = extractvalue { float, float, float, float } %1031, 1, !dbg !25
  %1034 = extractvalue { float, float, float, float } %1031, 2, !dbg !25
  %1035 = extractvalue { float, float, float, float } %1031, 3, !dbg !25
  %1036 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %957, float %958, float %959, float %960, i32 %778, i32 %779, i32 %780, i32 %781, i32 %854, i32 %855) #3, !dbg !25
  %1037 = extractvalue { float, float, float, float } %1036, 0, !dbg !25
  %1038 = extractvalue { float, float, float, float } %1036, 1, !dbg !25
  %1039 = extractvalue { float, float, float, float } %1036, 2, !dbg !25
  %1040 = extractvalue { float, float, float, float } %1036, 3, !dbg !25
  %1041 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %962, float %963, float %964, float %965, i32 %778, i32 %779, i32 %780, i32 %781, i32 %862, i32 %863) #3, !dbg !25
  %1042 = extractvalue { float, float, float, float } %1041, 0, !dbg !25
  %1043 = extractvalue { float, float, float, float } %1041, 1, !dbg !25
  %1044 = extractvalue { float, float, float, float } %1041, 2, !dbg !25
  %1045 = extractvalue { float, float, float, float } %1041, 3, !dbg !25
  %1046 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %967, float %968, float %969, float %970, i32 %794, i32 %795, i32 %796, i32 %797, i32 %838, i32 %839) #3, !dbg !25
  %1047 = extractvalue { float, float, float, float } %1046, 0, !dbg !25
  %1048 = extractvalue { float, float, float, float } %1046, 1, !dbg !25
  %1049 = extractvalue { float, float, float, float } %1046, 2, !dbg !25
  %1050 = extractvalue { float, float, float, float } %1046, 3, !dbg !25
  %1051 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %972, float %973, float %974, float %975, i32 %794, i32 %795, i32 %796, i32 %797, i32 %846, i32 %847) #3, !dbg !25
  %1052 = extractvalue { float, float, float, float } %1051, 0, !dbg !25
  %1053 = extractvalue { float, float, float, float } %1051, 1, !dbg !25
  %1054 = extractvalue { float, float, float, float } %1051, 2, !dbg !25
  %1055 = extractvalue { float, float, float, float } %1051, 3, !dbg !25
  %1056 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %977, float %978, float %979, float %980, i32 %794, i32 %795, i32 %796, i32 %797, i32 %854, i32 %855) #3, !dbg !25
  %1057 = extractvalue { float, float, float, float } %1056, 0, !dbg !25
  %1058 = extractvalue { float, float, float, float } %1056, 1, !dbg !25
  %1059 = extractvalue { float, float, float, float } %1056, 2, !dbg !25
  %1060 = extractvalue { float, float, float, float } %1056, 3, !dbg !25
  %1061 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %982, float %983, float %984, float %985, i32 %794, i32 %795, i32 %796, i32 %797, i32 %862, i32 %863) #3, !dbg !25
  %1062 = extractvalue { float, float, float, float } %1061, 0, !dbg !25
  %1063 = extractvalue { float, float, float, float } %1061, 1, !dbg !25
  %1064 = extractvalue { float, float, float, float } %1061, 2, !dbg !25
  %1065 = extractvalue { float, float, float, float } %1061, 3, !dbg !25
  %1066 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %987, float %988, float %989, float %990, i32 %810, i32 %811, i32 %812, i32 %813, i32 %838, i32 %839) #3, !dbg !25
  %1067 = extractvalue { float, float, float, float } %1066, 0, !dbg !25
  %1068 = extractvalue { float, float, float, float } %1066, 1, !dbg !25
  %1069 = extractvalue { float, float, float, float } %1066, 2, !dbg !25
  %1070 = extractvalue { float, float, float, float } %1066, 3, !dbg !25
  %1071 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %992, float %993, float %994, float %995, i32 %810, i32 %811, i32 %812, i32 %813, i32 %846, i32 %847) #3, !dbg !25
  %1072 = extractvalue { float, float, float, float } %1071, 0, !dbg !25
  %1073 = extractvalue { float, float, float, float } %1071, 1, !dbg !25
  %1074 = extractvalue { float, float, float, float } %1071, 2, !dbg !25
  %1075 = extractvalue { float, float, float, float } %1071, 3, !dbg !25
  %1076 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %997, float %998, float %999, float %1000, i32 %810, i32 %811, i32 %812, i32 %813, i32 %854, i32 %855) #3, !dbg !25
  %1077 = extractvalue { float, float, float, float } %1076, 0, !dbg !25
  %1078 = extractvalue { float, float, float, float } %1076, 1, !dbg !25
  %1079 = extractvalue { float, float, float, float } %1076, 2, !dbg !25
  %1080 = extractvalue { float, float, float, float } %1076, 3, !dbg !25
  %1081 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1002, float %1003, float %1004, float %1005, i32 %810, i32 %811, i32 %812, i32 %813, i32 %862, i32 %863) #3, !dbg !25
  %1082 = extractvalue { float, float, float, float } %1081, 0, !dbg !25
  %1083 = extractvalue { float, float, float, float } %1081, 1, !dbg !25
  %1084 = extractvalue { float, float, float, float } %1081, 2, !dbg !25
  %1085 = extractvalue { float, float, float, float } %1081, 3, !dbg !25
  %1086 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1007, float %1008, float %1009, float %1010, i32 %826, i32 %827, i32 %828, i32 %829, i32 %838, i32 %839) #3, !dbg !25
  %1087 = extractvalue { float, float, float, float } %1086, 0, !dbg !25
  %1088 = extractvalue { float, float, float, float } %1086, 1, !dbg !25
  %1089 = extractvalue { float, float, float, float } %1086, 2, !dbg !25
  %1090 = extractvalue { float, float, float, float } %1086, 3, !dbg !25
  %1091 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1012, float %1013, float %1014, float %1015, i32 %826, i32 %827, i32 %828, i32 %829, i32 %846, i32 %847) #3, !dbg !25
  %1092 = extractvalue { float, float, float, float } %1091, 0, !dbg !25
  %1093 = extractvalue { float, float, float, float } %1091, 1, !dbg !25
  %1094 = extractvalue { float, float, float, float } %1091, 2, !dbg !25
  %1095 = extractvalue { float, float, float, float } %1091, 3, !dbg !25
  %1096 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1017, float %1018, float %1019, float %1020, i32 %826, i32 %827, i32 %828, i32 %829, i32 %854, i32 %855) #3, !dbg !25
  %1097 = extractvalue { float, float, float, float } %1096, 0, !dbg !25
  %1098 = extractvalue { float, float, float, float } %1096, 1, !dbg !25
  %1099 = extractvalue { float, float, float, float } %1096, 2, !dbg !25
  %1100 = extractvalue { float, float, float, float } %1096, 3, !dbg !25
  %1101 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1022, float %1023, float %1024, float %1025, i32 %826, i32 %827, i32 %828, i32 %829, i32 %862, i32 %863) #3, !dbg !25
  %1102 = extractvalue { float, float, float, float } %1101, 0, !dbg !25
  %1103 = extractvalue { float, float, float, float } %1101, 1, !dbg !25
  %1104 = extractvalue { float, float, float, float } %1101, 2, !dbg !25
  %1105 = extractvalue { float, float, float, float } %1101, 3, !dbg !25
  %1106 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1027, float %1028, float %1029, float %1030, i32 %782, i32 %783, i32 %784, i32 %785, i32 %840, i32 %841) #3, !dbg !25
  %1107 = extractvalue { float, float, float, float } %1106, 0, !dbg !25
  %1108 = extractvalue { float, float, float, float } %1106, 1, !dbg !25
  %1109 = extractvalue { float, float, float, float } %1106, 2, !dbg !25
  %1110 = extractvalue { float, float, float, float } %1106, 3, !dbg !25
  %1111 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1032, float %1033, float %1034, float %1035, i32 %782, i32 %783, i32 %784, i32 %785, i32 %848, i32 %849) #3, !dbg !25
  %1112 = extractvalue { float, float, float, float } %1111, 0, !dbg !25
  %1113 = extractvalue { float, float, float, float } %1111, 1, !dbg !25
  %1114 = extractvalue { float, float, float, float } %1111, 2, !dbg !25
  %1115 = extractvalue { float, float, float, float } %1111, 3, !dbg !25
  %1116 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1037, float %1038, float %1039, float %1040, i32 %782, i32 %783, i32 %784, i32 %785, i32 %856, i32 %857) #3, !dbg !25
  %1117 = extractvalue { float, float, float, float } %1116, 0, !dbg !25
  %1118 = extractvalue { float, float, float, float } %1116, 1, !dbg !25
  %1119 = extractvalue { float, float, float, float } %1116, 2, !dbg !25
  %1120 = extractvalue { float, float, float, float } %1116, 3, !dbg !25
  %1121 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1042, float %1043, float %1044, float %1045, i32 %782, i32 %783, i32 %784, i32 %785, i32 %864, i32 %865) #3, !dbg !25
  %1122 = extractvalue { float, float, float, float } %1121, 0, !dbg !25
  %1123 = extractvalue { float, float, float, float } %1121, 1, !dbg !25
  %1124 = extractvalue { float, float, float, float } %1121, 2, !dbg !25
  %1125 = extractvalue { float, float, float, float } %1121, 3, !dbg !25
  %1126 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1047, float %1048, float %1049, float %1050, i32 %798, i32 %799, i32 %800, i32 %801, i32 %840, i32 %841) #3, !dbg !25
  %1127 = extractvalue { float, float, float, float } %1126, 0, !dbg !25
  %1128 = extractvalue { float, float, float, float } %1126, 1, !dbg !25
  %1129 = extractvalue { float, float, float, float } %1126, 2, !dbg !25
  %1130 = extractvalue { float, float, float, float } %1126, 3, !dbg !25
  %1131 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1052, float %1053, float %1054, float %1055, i32 %798, i32 %799, i32 %800, i32 %801, i32 %848, i32 %849) #3, !dbg !25
  %1132 = extractvalue { float, float, float, float } %1131, 0, !dbg !25
  %1133 = extractvalue { float, float, float, float } %1131, 1, !dbg !25
  %1134 = extractvalue { float, float, float, float } %1131, 2, !dbg !25
  %1135 = extractvalue { float, float, float, float } %1131, 3, !dbg !25
  %1136 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1057, float %1058, float %1059, float %1060, i32 %798, i32 %799, i32 %800, i32 %801, i32 %856, i32 %857) #3, !dbg !25
  %1137 = extractvalue { float, float, float, float } %1136, 0, !dbg !25
  %1138 = extractvalue { float, float, float, float } %1136, 1, !dbg !25
  %1139 = extractvalue { float, float, float, float } %1136, 2, !dbg !25
  %1140 = extractvalue { float, float, float, float } %1136, 3, !dbg !25
  %1141 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1062, float %1063, float %1064, float %1065, i32 %798, i32 %799, i32 %800, i32 %801, i32 %864, i32 %865) #3, !dbg !25
  %1142 = extractvalue { float, float, float, float } %1141, 0, !dbg !25
  %1143 = extractvalue { float, float, float, float } %1141, 1, !dbg !25
  %1144 = extractvalue { float, float, float, float } %1141, 2, !dbg !25
  %1145 = extractvalue { float, float, float, float } %1141, 3, !dbg !25
  %1146 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1067, float %1068, float %1069, float %1070, i32 %814, i32 %815, i32 %816, i32 %817, i32 %840, i32 %841) #3, !dbg !25
  %1147 = extractvalue { float, float, float, float } %1146, 0, !dbg !25
  %1148 = extractvalue { float, float, float, float } %1146, 1, !dbg !25
  %1149 = extractvalue { float, float, float, float } %1146, 2, !dbg !25
  %1150 = extractvalue { float, float, float, float } %1146, 3, !dbg !25
  %1151 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1072, float %1073, float %1074, float %1075, i32 %814, i32 %815, i32 %816, i32 %817, i32 %848, i32 %849) #3, !dbg !25
  %1152 = extractvalue { float, float, float, float } %1151, 0, !dbg !25
  %1153 = extractvalue { float, float, float, float } %1151, 1, !dbg !25
  %1154 = extractvalue { float, float, float, float } %1151, 2, !dbg !25
  %1155 = extractvalue { float, float, float, float } %1151, 3, !dbg !25
  %1156 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1077, float %1078, float %1079, float %1080, i32 %814, i32 %815, i32 %816, i32 %817, i32 %856, i32 %857) #3, !dbg !25
  %1157 = extractvalue { float, float, float, float } %1156, 0, !dbg !25
  %1158 = extractvalue { float, float, float, float } %1156, 1, !dbg !25
  %1159 = extractvalue { float, float, float, float } %1156, 2, !dbg !25
  %1160 = extractvalue { float, float, float, float } %1156, 3, !dbg !25
  %1161 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1082, float %1083, float %1084, float %1085, i32 %814, i32 %815, i32 %816, i32 %817, i32 %864, i32 %865) #3, !dbg !25
  %1162 = extractvalue { float, float, float, float } %1161, 0, !dbg !25
  %1163 = extractvalue { float, float, float, float } %1161, 1, !dbg !25
  %1164 = extractvalue { float, float, float, float } %1161, 2, !dbg !25
  %1165 = extractvalue { float, float, float, float } %1161, 3, !dbg !25
  %1166 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1087, float %1088, float %1089, float %1090, i32 %830, i32 %831, i32 %832, i32 %833, i32 %840, i32 %841) #3, !dbg !25
  %1167 = extractvalue { float, float, float, float } %1166, 0, !dbg !25
  %1168 = extractvalue { float, float, float, float } %1166, 1, !dbg !25
  %1169 = extractvalue { float, float, float, float } %1166, 2, !dbg !25
  %1170 = extractvalue { float, float, float, float } %1166, 3, !dbg !25
  %1171 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1092, float %1093, float %1094, float %1095, i32 %830, i32 %831, i32 %832, i32 %833, i32 %848, i32 %849) #3, !dbg !25
  %1172 = extractvalue { float, float, float, float } %1171, 0, !dbg !25
  %1173 = extractvalue { float, float, float, float } %1171, 1, !dbg !25
  %1174 = extractvalue { float, float, float, float } %1171, 2, !dbg !25
  %1175 = extractvalue { float, float, float, float } %1171, 3, !dbg !25
  %1176 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1097, float %1098, float %1099, float %1100, i32 %830, i32 %831, i32 %832, i32 %833, i32 %856, i32 %857) #3, !dbg !25
  %1177 = extractvalue { float, float, float, float } %1176, 0, !dbg !25
  %1178 = extractvalue { float, float, float, float } %1176, 1, !dbg !25
  %1179 = extractvalue { float, float, float, float } %1176, 2, !dbg !25
  %1180 = extractvalue { float, float, float, float } %1176, 3, !dbg !25
  %1181 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1102, float %1103, float %1104, float %1105, i32 %830, i32 %831, i32 %832, i32 %833, i32 %864, i32 %865) #3, !dbg !25
  %1182 = extractvalue { float, float, float, float } %1181, 0, !dbg !25
  %1183 = extractvalue { float, float, float, float } %1181, 1, !dbg !25
  %1184 = extractvalue { float, float, float, float } %1181, 2, !dbg !25
  %1185 = extractvalue { float, float, float, float } %1181, 3, !dbg !25
  %1186 = add i32 %338, 1, !dbg !21
  %1187 = icmp slt i32 %1186, 2, !dbg !21
  %1188 = select i1 %1187, i32 %1186, i32 0, !dbg !21
  %1189 = shl i32 %403, 6, !dbg !26
  %1190 = add nuw i32 %1189, 128, !dbg !26
  %1191 = sext i32 %1188 to i64, !dbg !21
  %1192 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %1191, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %1193 = and i1 %25, %404, !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 12288;", "b,r"(i1 %1193, ptr addrspace(3) %1192) #3, !dbg !21
  %1194 = shl i32 %1188, 13, !dbg !22
  %1195 = sext i32 %1194 to i64, !dbg !22
  %1196 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %1195, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %1197 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %1198 = extractvalue { i32, i1 } %1197, 1, !dbg !22
  %1199 = and i1 %404, %1198, !dbg !22
  %1200 = and i1 %43, %1199, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %1200, ptr addrspace(3) %1196, ptr addrspace(1) %20, i32 %1190, i32 %36, ptr addrspace(3) %1192) #3, !dbg !22
  %1201 = shl i32 %1188, 12, !dbg !23
  %1202 = sext i32 %1201 to i64, !dbg !23
  %1203 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %1202, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %1204 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !23
  %1205 = extractvalue { i32, i1 } %1204, 1, !dbg !23
  %1206 = and i1 %404, %1205, !dbg !23
  %1207 = and i1 %43, %1206, !dbg !23
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %1207, ptr addrspace(3) %1203, ptr addrspace(1) %29, i32 %37, i32 %1190, ptr addrspace(3) %1192) #3, !dbg !23
  %1208 = add nuw nsw i32 %403, 1, !dbg !21
  %exitcond.not = icmp eq i32 %1208, %35, !dbg !21
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %335, !dbg !21

._crit_edge.loopexit:                             ; preds = %335
  %1209 = insertelement <64 x float> poison, float %1107, i64 0, !dbg !27
  %1210 = insertelement <64 x float> %1209, float %1108, i64 1, !dbg !27
  %1211 = insertelement <64 x float> %1210, float %1109, i64 2, !dbg !27
  %1212 = insertelement <64 x float> %1211, float %1110, i64 3, !dbg !27
  %1213 = insertelement <64 x float> %1212, float %1112, i64 4, !dbg !27
  %1214 = insertelement <64 x float> %1213, float %1113, i64 5, !dbg !27
  %1215 = insertelement <64 x float> %1214, float %1114, i64 6, !dbg !27
  %1216 = insertelement <64 x float> %1215, float %1115, i64 7, !dbg !27
  %1217 = insertelement <64 x float> %1216, float %1117, i64 8, !dbg !27
  %1218 = insertelement <64 x float> %1217, float %1118, i64 9, !dbg !27
  %1219 = insertelement <64 x float> %1218, float %1119, i64 10, !dbg !27
  %1220 = insertelement <64 x float> %1219, float %1120, i64 11, !dbg !27
  %1221 = insertelement <64 x float> %1220, float %1122, i64 12, !dbg !27
  %1222 = insertelement <64 x float> %1221, float %1123, i64 13, !dbg !27
  %1223 = insertelement <64 x float> %1222, float %1124, i64 14, !dbg !27
  %1224 = insertelement <64 x float> %1223, float %1125, i64 15, !dbg !27
  %1225 = insertelement <64 x float> %1224, float %1127, i64 16, !dbg !27
  %1226 = insertelement <64 x float> %1225, float %1128, i64 17, !dbg !27
  %1227 = insertelement <64 x float> %1226, float %1129, i64 18, !dbg !27
  %1228 = insertelement <64 x float> %1227, float %1130, i64 19, !dbg !27
  %1229 = insertelement <64 x float> %1228, float %1132, i64 20, !dbg !27
  %1230 = insertelement <64 x float> %1229, float %1133, i64 21, !dbg !27
  %1231 = insertelement <64 x float> %1230, float %1134, i64 22, !dbg !27
  %1232 = insertelement <64 x float> %1231, float %1135, i64 23, !dbg !27
  %1233 = insertelement <64 x float> %1232, float %1137, i64 24, !dbg !27
  %1234 = insertelement <64 x float> %1233, float %1138, i64 25, !dbg !27
  %1235 = insertelement <64 x float> %1234, float %1139, i64 26, !dbg !27
  %1236 = insertelement <64 x float> %1235, float %1140, i64 27, !dbg !27
  %1237 = insertelement <64 x float> %1236, float %1142, i64 28, !dbg !27
  %1238 = insertelement <64 x float> %1237, float %1143, i64 29, !dbg !27
  %1239 = insertelement <64 x float> %1238, float %1144, i64 30, !dbg !27
  %1240 = insertelement <64 x float> %1239, float %1145, i64 31, !dbg !27
  %1241 = insertelement <64 x float> %1240, float %1147, i64 32, !dbg !27
  %1242 = insertelement <64 x float> %1241, float %1148, i64 33, !dbg !27
  %1243 = insertelement <64 x float> %1242, float %1149, i64 34, !dbg !27
  %1244 = insertelement <64 x float> %1243, float %1150, i64 35, !dbg !27
  %1245 = insertelement <64 x float> %1244, float %1152, i64 36, !dbg !27
  %1246 = insertelement <64 x float> %1245, float %1153, i64 37, !dbg !27
  %1247 = insertelement <64 x float> %1246, float %1154, i64 38, !dbg !27
  %1248 = insertelement <64 x float> %1247, float %1155, i64 39, !dbg !27
  %1249 = insertelement <64 x float> %1248, float %1157, i64 40, !dbg !27
  %1250 = insertelement <64 x float> %1249, float %1158, i64 41, !dbg !27
  %1251 = insertelement <64 x float> %1250, float %1159, i64 42, !dbg !27
  %1252 = insertelement <64 x float> %1251, float %1160, i64 43, !dbg !27
  %1253 = insertelement <64 x float> %1252, float %1162, i64 44, !dbg !27
  %1254 = insertelement <64 x float> %1253, float %1163, i64 45, !dbg !27
  %1255 = insertelement <64 x float> %1254, float %1164, i64 46, !dbg !27
  %1256 = insertelement <64 x float> %1255, float %1165, i64 47, !dbg !27
  %1257 = insertelement <64 x float> %1256, float %1167, i64 48, !dbg !27
  %1258 = insertelement <64 x float> %1257, float %1168, i64 49, !dbg !27
  %1259 = insertelement <64 x float> %1258, float %1169, i64 50, !dbg !27
  %1260 = insertelement <64 x float> %1259, float %1170, i64 51, !dbg !27
  %1261 = insertelement <64 x float> %1260, float %1172, i64 52, !dbg !27
  %1262 = insertelement <64 x float> %1261, float %1173, i64 53, !dbg !27
  %1263 = insertelement <64 x float> %1262, float %1174, i64 54, !dbg !27
  %1264 = insertelement <64 x float> %1263, float %1175, i64 55, !dbg !27
  %1265 = insertelement <64 x float> %1264, float %1177, i64 56, !dbg !27
  %1266 = insertelement <64 x float> %1265, float %1178, i64 57, !dbg !27
  %1267 = insertelement <64 x float> %1266, float %1179, i64 58, !dbg !27
  %1268 = insertelement <64 x float> %1267, float %1180, i64 59, !dbg !27
  %1269 = insertelement <64 x float> %1268, float %1182, i64 60, !dbg !27
  %1270 = insertelement <64 x float> %1269, float %1183, i64 61, !dbg !27
  %1271 = insertelement <64 x float> %1270, float %1184, i64 62, !dbg !27
  %1272 = insertelement <64 x float> %1271, float %1185, i64 63, !dbg !27
  %1273 = fptrunc <64 x float> %1272 to <64 x half>, !dbg !27
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi138 = phi i32 [ %.pre137, %.._crit_edge_crit_edge ], [ %212, %._crit_edge.loopexit ], !dbg !24
  %.pre-phi134 = phi i32 [ %.pre133, %.._crit_edge_crit_edge ], [ %75, %._crit_edge.loopexit ], !dbg !24
  %.pre-phi130 = phi i32 [ %.pre129, %.._crit_edge_crit_edge ], [ %69, %._crit_edge.loopexit ], !dbg !24
  %.pre-phi = phi i32 [ %.pre, %.._crit_edge_crit_edge ], [ %65, %._crit_edge.loopexit ], !dbg !24
  %1274 = phi <64 x half> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %1273, %._crit_edge.loopexit ]
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %25, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576)) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %25, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24584)) #3, !dbg !21
  %1275 = shl i32 %21, 1, !dbg !24
  %1276 = and i32 %1275, 6, !dbg !24
  %1277 = and i32 %21, 4, !dbg !24
  %1278 = icmp eq i32 %1277, 0, !dbg !24
  %1279 = select i1 %1278, i32 0, i32 72, !dbg !24
  %1280 = or disjoint i32 %1279, %1276, !dbg !24
  %1281 = icmp eq i32 %.pre-phi, 0, !dbg !24
  %1282 = select i1 %1281, i32 0, i32 144, !dbg !24
  %1283 = or disjoint i32 %1280, %1282, !dbg !24
  %1284 = icmp eq i32 %.pre-phi130, 0, !dbg !24
  %1285 = select i1 %1284, i32 0, i32 288, !dbg !24
  %1286 = or disjoint i32 %1283, %1285, !dbg !24
  %1287 = xor i32 %1286, %.pre-phi134, !dbg !24
  %1288 = or disjoint i32 %1287, %.pre-phi138, !dbg !24
  %1289 = zext nneg i32 %1288 to i64, !dbg !24
  %1290 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1289, !dbg !24
  %1291 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !24
  store <2 x half> %1291, ptr addrspace(3) %1290, align 4, !dbg !24
  %1292 = or disjoint i32 %1286, 512, !dbg !24
  %1293 = or disjoint i32 %.pre-phi138, %.pre-phi134, !dbg !24
  %1294 = xor i32 %1293, %1292, !dbg !24
  %1295 = zext nneg i32 %1294 to i64, !dbg !24
  %1296 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1295, !dbg !24
  %1297 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !24
  store <2 x half> %1297, ptr addrspace(3) %1296, align 4, !dbg !24
  %1298 = or disjoint i32 %1280, 16, !dbg !24
  %1299 = xor i32 %1298, %1282, !dbg !24
  %1300 = or disjoint i32 %1299, %1285, !dbg !24
  %1301 = xor i32 %1293, %1300, !dbg !24
  %1302 = zext nneg i32 %1301 to i64, !dbg !24
  %1303 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1302, !dbg !24
  %1304 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !24
  store <2 x half> %1304, ptr addrspace(3) %1303, align 4, !dbg !24
  %1305 = or disjoint i32 %1280, 528, !dbg !24
  %1306 = xor i32 %1305, %1282, !dbg !24
  %1307 = or disjoint i32 %1306, %1285, !dbg !24
  %1308 = xor i32 %1293, %1307, !dbg !24
  %1309 = zext nneg i32 %1308 to i64, !dbg !24
  %1310 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1309, !dbg !24
  %1311 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !24
  store <2 x half> %1311, ptr addrspace(3) %1310, align 4, !dbg !24
  %1312 = or disjoint i32 %1283, 32, !dbg !24
  %1313 = or disjoint i32 %1293, %1285, !dbg !24
  %1314 = xor i32 %1313, %1312, !dbg !24
  %1315 = zext nneg i32 %1314 to i64, !dbg !24
  %1316 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1315, !dbg !24
  %1317 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !24
  store <2 x half> %1317, ptr addrspace(3) %1316, align 4, !dbg !24
  %1318 = or disjoint i32 %1283, 544, !dbg !24
  %1319 = xor i32 %1313, %1318, !dbg !24
  %1320 = zext nneg i32 %1319 to i64, !dbg !24
  %1321 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1320, !dbg !24
  %1322 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !24
  store <2 x half> %1322, ptr addrspace(3) %1321, align 4, !dbg !24
  %1323 = or disjoint i32 %1280, 48, !dbg !24
  %1324 = or disjoint i32 %1293, %1282, !dbg !24
  %1325 = or disjoint i32 %1324, %1285, !dbg !24
  %1326 = xor i32 %1325, %1323, !dbg !24
  %1327 = zext nneg i32 %1326 to i64, !dbg !24
  %1328 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1327, !dbg !24
  %1329 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !24
  store <2 x half> %1329, ptr addrspace(3) %1328, align 4, !dbg !24
  %1330 = or disjoint i32 %1280, 560, !dbg !24
  %1331 = xor i32 %1325, %1330, !dbg !24
  %1332 = zext nneg i32 %1331 to i64, !dbg !24
  %1333 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1332, !dbg !24
  %1334 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !24
  store <2 x half> %1334, ptr addrspace(3) %1333, align 4, !dbg !24
  %1335 = or disjoint i32 %1286, 2048, !dbg !24
  %1336 = xor i32 %1293, %1335, !dbg !24
  %1337 = zext nneg i32 %1336 to i64, !dbg !24
  %1338 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1337, !dbg !24
  %1339 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !24
  store <2 x half> %1339, ptr addrspace(3) %1338, align 4, !dbg !24
  %1340 = or disjoint i32 %1286, 2560, !dbg !24
  %1341 = xor i32 %1293, %1340, !dbg !24
  %1342 = zext nneg i32 %1341 to i64, !dbg !24
  %1343 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1342, !dbg !24
  %1344 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !24
  store <2 x half> %1344, ptr addrspace(3) %1343, align 4, !dbg !24
  %1345 = or disjoint i32 %1280, 2064, !dbg !24
  %1346 = xor i32 %1345, %1282, !dbg !24
  %1347 = or disjoint i32 %1346, %1285, !dbg !24
  %1348 = xor i32 %1293, %1347, !dbg !24
  %1349 = zext nneg i32 %1348 to i64, !dbg !24
  %1350 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1349, !dbg !24
  %1351 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !24
  store <2 x half> %1351, ptr addrspace(3) %1350, align 4, !dbg !24
  %1352 = or disjoint i32 %1280, 2576, !dbg !24
  %1353 = xor i32 %1352, %1282, !dbg !24
  %1354 = or disjoint i32 %1353, %1285, !dbg !24
  %1355 = xor i32 %1293, %1354, !dbg !24
  %1356 = zext nneg i32 %1355 to i64, !dbg !24
  %1357 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1356, !dbg !24
  %1358 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !24
  store <2 x half> %1358, ptr addrspace(3) %1357, align 4, !dbg !24
  %1359 = or disjoint i32 %1283, 2080, !dbg !24
  %1360 = xor i32 %1313, %1359, !dbg !24
  %1361 = zext nneg i32 %1360 to i64, !dbg !24
  %1362 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1361, !dbg !24
  %1363 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !24
  store <2 x half> %1363, ptr addrspace(3) %1362, align 4, !dbg !24
  %1364 = or disjoint i32 %1283, 2592, !dbg !24
  %1365 = xor i32 %1313, %1364, !dbg !24
  %1366 = zext nneg i32 %1365 to i64, !dbg !24
  %1367 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1366, !dbg !24
  %1368 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !24
  store <2 x half> %1368, ptr addrspace(3) %1367, align 4, !dbg !24
  %1369 = or disjoint i32 %1280, 2096, !dbg !24
  %1370 = xor i32 %1325, %1369, !dbg !24
  %1371 = zext nneg i32 %1370 to i64, !dbg !24
  %1372 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1371, !dbg !24
  %1373 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !24
  store <2 x half> %1373, ptr addrspace(3) %1372, align 4, !dbg !24
  %1374 = or disjoint i32 %1280, 2608, !dbg !24
  %1375 = xor i32 %1325, %1374, !dbg !24
  %1376 = zext nneg i32 %1375 to i64, !dbg !24
  %1377 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1376, !dbg !24
  %1378 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !24
  store <2 x half> %1378, ptr addrspace(3) %1377, align 4, !dbg !24
  %1379 = or disjoint i32 %1286, 4096, !dbg !24
  %1380 = xor i32 %1293, %1379, !dbg !24
  %1381 = zext nneg i32 %1380 to i64, !dbg !24
  %1382 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1381, !dbg !24
  %1383 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 32, i32 33>, !dbg !24
  store <2 x half> %1383, ptr addrspace(3) %1382, align 4, !dbg !24
  %1384 = or disjoint i32 %1286, 4608, !dbg !24
  %1385 = xor i32 %1293, %1384, !dbg !24
  %1386 = zext nneg i32 %1385 to i64, !dbg !24
  %1387 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1386, !dbg !24
  %1388 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 34, i32 35>, !dbg !24
  store <2 x half> %1388, ptr addrspace(3) %1387, align 4, !dbg !24
  %1389 = or disjoint i32 %1280, 4112, !dbg !24
  %1390 = xor i32 %1389, %1282, !dbg !24
  %1391 = or disjoint i32 %1390, %1285, !dbg !24
  %1392 = xor i32 %1293, %1391, !dbg !24
  %1393 = zext nneg i32 %1392 to i64, !dbg !24
  %1394 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1393, !dbg !24
  %1395 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 36, i32 37>, !dbg !24
  store <2 x half> %1395, ptr addrspace(3) %1394, align 4, !dbg !24
  %1396 = or disjoint i32 %1280, 4624, !dbg !24
  %1397 = xor i32 %1396, %1282, !dbg !24
  %1398 = or disjoint i32 %1397, %1285, !dbg !24
  %1399 = xor i32 %1293, %1398, !dbg !24
  %1400 = zext nneg i32 %1399 to i64, !dbg !24
  %1401 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1400, !dbg !24
  %1402 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 38, i32 39>, !dbg !24
  store <2 x half> %1402, ptr addrspace(3) %1401, align 4, !dbg !24
  %1403 = or disjoint i32 %1283, 4128, !dbg !24
  %1404 = xor i32 %1313, %1403, !dbg !24
  %1405 = zext nneg i32 %1404 to i64, !dbg !24
  %1406 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1405, !dbg !24
  %1407 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 40, i32 41>, !dbg !24
  store <2 x half> %1407, ptr addrspace(3) %1406, align 4, !dbg !24
  %1408 = or disjoint i32 %1283, 4640, !dbg !24
  %1409 = xor i32 %1313, %1408, !dbg !24
  %1410 = zext nneg i32 %1409 to i64, !dbg !24
  %1411 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1410, !dbg !24
  %1412 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 42, i32 43>, !dbg !24
  store <2 x half> %1412, ptr addrspace(3) %1411, align 4, !dbg !24
  %1413 = or disjoint i32 %1280, 4144, !dbg !24
  %1414 = xor i32 %1325, %1413, !dbg !24
  %1415 = zext nneg i32 %1414 to i64, !dbg !24
  %1416 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1415, !dbg !24
  %1417 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 44, i32 45>, !dbg !24
  store <2 x half> %1417, ptr addrspace(3) %1416, align 4, !dbg !24
  %1418 = or disjoint i32 %1280, 4656, !dbg !24
  %1419 = xor i32 %1325, %1418, !dbg !24
  %1420 = zext nneg i32 %1419 to i64, !dbg !24
  %1421 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1420, !dbg !24
  %1422 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 46, i32 47>, !dbg !24
  store <2 x half> %1422, ptr addrspace(3) %1421, align 4, !dbg !24
  %1423 = or disjoint i32 %1286, 6144, !dbg !24
  %1424 = xor i32 %1293, %1423, !dbg !24
  %1425 = zext nneg i32 %1424 to i64, !dbg !24
  %1426 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1425, !dbg !24
  %1427 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 48, i32 49>, !dbg !24
  store <2 x half> %1427, ptr addrspace(3) %1426, align 4, !dbg !24
  %1428 = or disjoint i32 %1286, 6656, !dbg !24
  %1429 = xor i32 %1293, %1428, !dbg !24
  %1430 = zext nneg i32 %1429 to i64, !dbg !24
  %1431 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1430, !dbg !24
  %1432 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 50, i32 51>, !dbg !24
  store <2 x half> %1432, ptr addrspace(3) %1431, align 4, !dbg !24
  %1433 = or disjoint i32 %1280, 6160, !dbg !24
  %1434 = xor i32 %1433, %1282, !dbg !24
  %1435 = or disjoint i32 %1434, %1285, !dbg !24
  %1436 = xor i32 %1293, %1435, !dbg !24
  %1437 = zext nneg i32 %1436 to i64, !dbg !24
  %1438 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1437, !dbg !24
  %1439 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 52, i32 53>, !dbg !24
  store <2 x half> %1439, ptr addrspace(3) %1438, align 4, !dbg !24
  %1440 = or disjoint i32 %1280, 6672, !dbg !24
  %1441 = xor i32 %1440, %1282, !dbg !24
  %1442 = or disjoint i32 %1441, %1285, !dbg !24
  %1443 = xor i32 %1293, %1442, !dbg !24
  %1444 = zext nneg i32 %1443 to i64, !dbg !24
  %1445 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1444, !dbg !24
  %1446 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 54, i32 55>, !dbg !24
  store <2 x half> %1446, ptr addrspace(3) %1445, align 4, !dbg !24
  %1447 = or disjoint i32 %1283, 6176, !dbg !24
  %1448 = xor i32 %1313, %1447, !dbg !24
  %1449 = zext nneg i32 %1448 to i64, !dbg !24
  %1450 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1449, !dbg !24
  %1451 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 56, i32 57>, !dbg !24
  store <2 x half> %1451, ptr addrspace(3) %1450, align 4, !dbg !24
  %1452 = or disjoint i32 %1283, 6688, !dbg !24
  %1453 = xor i32 %1313, %1452, !dbg !24
  %1454 = zext nneg i32 %1453 to i64, !dbg !24
  %1455 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1454, !dbg !24
  %1456 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 58, i32 59>, !dbg !24
  store <2 x half> %1456, ptr addrspace(3) %1455, align 4, !dbg !24
  %1457 = or disjoint i32 %1280, 6192, !dbg !24
  %1458 = xor i32 %1325, %1457, !dbg !24
  %1459 = zext nneg i32 %1458 to i64, !dbg !24
  %1460 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1459, !dbg !24
  %1461 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 60, i32 61>, !dbg !24
  store <2 x half> %1461, ptr addrspace(3) %1460, align 4, !dbg !24
  %1462 = or disjoint i32 %1280, 6704, !dbg !24
  %1463 = xor i32 %1325, %1462, !dbg !24
  %1464 = zext nneg i32 %1463 to i64, !dbg !24
  %1465 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %1464, !dbg !24
  %1466 = shufflevector <64 x half> %1274, <64 x half> poison, <2 x i32> <i32 62, i32 63>, !dbg !24
  store <2 x half> %1466, ptr addrspace(3) %1465, align 4, !dbg !24
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %1467 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !24
  %1468 = extractvalue { i32, i1 } %1467, 1, !dbg !24
  %1469 = and i1 %43, %1468, !dbg !24
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1469, ptr addrspace(1) %32, i32 %37, i32 %36, ptr addrspace(3) @global_smem) #3, !dbg !24
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !24
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !24
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.nctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.bar.warp.sync(i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare { i32, i1 } @llvm.nvvm.elect.sync(i32) #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.commit.group() #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 immarg) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "matmul-with-tma-v3.py", directory: "/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120")
!4 = !{ptr @matmul_kernel_make_tensor_desciptor, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "matmul_kernel_make_tensor_desciptor", linkageName: "matmul_kernel_make_tensor_desciptor", scope: !3, file: !3, line: 9, type: !7, scopeLine: 9, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 14, column: 26, scope: !6)
!10 = !DILocation(line: 15, column: 26, scope: !6)
!11 = !DILocation(line: 18, column: 8, scope: !6)
!12 = !DILocation(line: 24, column: 8, scope: !6)
!13 = !DILocation(line: 30, column: 8, scope: !6)
!14 = !DILocation(line: 40, column: 22, scope: !15, inlinedAt: !17)
!15 = distinct !DILexicalBlockFile(scope: !6, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language")
!17 = !DILocation(line: 37, column: 30, scope: !6)
!18 = !DILocation(line: 40, column: 28, scope: !15, inlinedAt: !17)
!19 = !DILocation(line: 38, column: 33, scope: !6)
!20 = !DILocation(line: 39, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 19, scope: !6)
!22 = !DILocation(line: 38, column: 24, scope: !6)
!23 = !DILocation(line: 39, column: 24, scope: !6)
!24 = !DILocation(line: 43, column: 63, scope: !6)
!25 = !DILocation(line: 40, column: 32, scope: !6)
!26 = !DILocation(line: 38, column: 51, scope: !6)
!27 = !DILocation(line: 42, column: 33, scope: !6)
!28 = !DILocation(line: 43, column: 4, scope: !6)
