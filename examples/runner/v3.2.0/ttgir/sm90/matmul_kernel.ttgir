#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":8:0)
#mma = #triton_gpu.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 64, 16]}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = true}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":8:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":8:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":8:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":8:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":8:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":8:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":8:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":8:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":8:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<128x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<64x64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<128x64xi32, #blocked> loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x64xf16, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128x64xf16, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %1, %c128_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.splat %2 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %6 = tt.splat %2 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %7 = arith.addi %5, %3 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %8 = arith.addi %6, %4 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %9 = arith.muli %0, %c64_i32 : i32 loc(#loc7)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %11 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %12 = tt.splat %9 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.splat %9 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %14 = arith.addi %12, %10 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %15 = arith.addi %13, %11 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %16 = tt.expand_dims %7 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc10)
    %18 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked> loc(#loc11)
    %19 = arith.muli %16, %18 : tensor<128x1xi32, #blocked> loc(#loc11)
    %20 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<128x1x!tt.ptr<f16>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %19 : tensor<128x1x!tt.ptr<f16>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc12)
    %22 = tt.expand_dims %10 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc13)
    %23 = tt.broadcast %21 : tensor<128x1x!tt.ptr<f16>, #blocked> -> tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc14)
    %24 = tt.broadcast %22 : tensor<1x64xi32, #blocked> -> tensor<128x64xi32, #blocked> loc(#loc14)
    %25 = tt.addptr %23, %24 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc14)
    %26 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %27 = tt.expand_dims %26 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc15)
    %28 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc16)
    %29 = arith.muli %27, %28 : tensor<64x1xi32, #blocked> loc(#loc16)
    %30 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked> loc(#loc17)
    %31 = tt.addptr %30, %29 : tensor<64x1x!tt.ptr<f16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc17)
    %32 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc18)
    %33 = tt.expand_dims %15 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc18)
    %34 = tt.broadcast %31 : tensor<64x1x!tt.ptr<f16>, #blocked> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc19)
    %35 = tt.broadcast %32 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc19)
    %36 = tt.addptr %34, %35 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc19)
    %37 = arith.addi %arg4, %c63_i32 : i32 loc(#loc42)
    %38 = arith.divsi %37, %c64_i32 : i32 loc(#loc43)
    %39 = triton_gpu.local_alloc  : () -> !tt.memdesc<3x128x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc23)
    %40 = triton_gpu.local_alloc  : () -> !tt.memdesc<3x64x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
    %41 = arith.cmpi sgt, %38, %c0_i32 : i32 loc(#loc25)
    %42 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
    %43 = arith.cmpi slt, %22, %42 : tensor<1x64xi32, #blocked> loc(#loc26)
    %44 = tt.addptr %25, %cst_1 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc27)
    %45 = tt.broadcast %43 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc23)
    %46 = triton_gpu.memdesc_subview %39[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<3x128x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<128x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc23)
    %47 = tt.splat %41 : i1 -> tensor<128x64xi1, #blocked> loc(#loc25)
    %48 = arith.andi %47, %45 : tensor<128x64xi1, #blocked> loc(#loc25)
    %49 = triton_gpu.async_copy_global_to_local %44, %46 mask %48 other %cst_3 : tensor<128x64x!tt.ptr<f16>, #blocked> -> <128x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc23)
    %50 = triton_gpu.async_commit_group %49 loc(#loc23)
    %51 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc28)
    %52 = arith.cmpi slt, %27, %51 : tensor<64x1xi32, #blocked> loc(#loc28)
    %53 = tt.addptr %36, %cst_0 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc29)
    %54 = tt.broadcast %52 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc24)
    %55 = triton_gpu.memdesc_subview %40[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<3x64x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<64x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
    %56 = tt.splat %41 : i1 -> tensor<64x64xi1, #blocked> loc(#loc25)
    %57 = arith.andi %56, %54 : tensor<64x64xi1, #blocked> loc(#loc25)
    %58 = triton_gpu.async_copy_global_to_local %53, %55 mask %57 other %cst_2 : tensor<64x64x!tt.ptr<f16>, #blocked> -> <64x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
    %59 = triton_gpu.async_commit_group %58 loc(#loc24)
    %60 = arith.cmpi sgt, %38, %c1_i32 : i32 loc(#loc25)
    %61 = arith.subi %arg4, %c64_i32 : i32 loc(#loc30)
    %62 = tt.splat %61 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
    %63 = arith.cmpi slt, %22, %62 : tensor<1x64xi32, #blocked> loc(#loc26)
    %64 = tt.addptr %25, %cst : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc27)
    %65 = tt.broadcast %63 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc23)
    %66 = triton_gpu.memdesc_subview %39[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<3x128x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<128x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc23)
    %67 = tt.splat %60 : i1 -> tensor<128x64xi1, #blocked> loc(#loc25)
    %68 = arith.andi %67, %65 : tensor<128x64xi1, #blocked> loc(#loc25)
    %69 = triton_gpu.async_copy_global_to_local %64, %66 mask %68 other %cst_3 : tensor<128x64x!tt.ptr<f16>, #blocked> -> <128x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc23)
    %70 = triton_gpu.async_commit_group %69 loc(#loc23)
    %71 = tt.splat %61 : i32 -> tensor<64x1xi32, #blocked> loc(#loc28)
    %72 = arith.cmpi slt, %27, %71 : tensor<64x1xi32, #blocked> loc(#loc28)
    %73 = arith.muli %arg7, %c64_i32 : i32 loc(#loc31)
    %74 = tt.splat %73 : i32 -> tensor<64x64xi32, #blocked> loc(#loc29)
    %75 = tt.addptr %36, %74 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc29)
    %76 = tt.broadcast %72 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc24)
    %77 = triton_gpu.memdesc_subview %40[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<3x64x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<64x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
    %78 = tt.splat %60 : i1 -> tensor<64x64xi1, #blocked> loc(#loc25)
    %79 = arith.andi %78, %76 : tensor<64x64xi1, #blocked> loc(#loc25)
    %80 = triton_gpu.async_copy_global_to_local %75, %77 mask %79 other %cst_2 : tensor<64x64x!tt.ptr<f16>, #blocked> -> <64x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
    %81 = triton_gpu.async_commit_group %80 loc(#loc24)
    %82:5 = scf.for %arg9 = %c0_i32 to %38 step %c1_i32 iter_args(%arg10 = %cst_4, %arg11 = %c1_i32, %arg12 = %c-1_i32, %arg13 = %59, %arg14 = %81) -> (tensor<128x64xf32, #mma>, i32, i32, !triton_gpu.async.token, !triton_gpu.async.token)  : i32 {
      %100 = arith.subi %38, %c2_i32 : i32 loc(#loc25)
      %101 = arith.cmpi slt, %arg9, %100 : i32 loc(#loc25)
      %102 = arith.addi %arg12, %c1_i32 : i32 loc(#loc25)
      %103 = arith.cmpi slt, %102, %c3_i32 : i32 loc(#loc25)
      %104 = arith.select %103, %102, %c0_i32 : i32 loc(#loc25)
      %105 = triton_gpu.memdesc_subview %39[%104, %c0_i32, %c0_i32] : !tt.memdesc<3x128x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<128x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc23)
      %106 = triton_gpu.async_wait %arg13 {num = 2 : i32} loc(#loc23)
      %107 = triton_gpu.memdesc_subview %40[%104, %c0_i32, %c0_i32] : !tt.memdesc<3x64x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<64x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
      %108 = triton_nvidia_gpu.warp_group_dot %105, %107, %arg10 {inputPrecision = 0 : i32, isAsync = true} : !tt.memdesc<128x64xf16, #shared, #triton_gpu.shared_memory, mutable> * !tt.memdesc<64x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> tensor<128x64xf32, #mma> loc(#loc32)
      %109:3 = triton_nvidia_gpu.warp_group_dot_wait %108, %105, %107 {pendings = 1 : i32} : tensor<128x64xf32, #mma>, !tt.memdesc<128x64xf16, #shared, #triton_gpu.shared_memory, mutable>, !tt.memdesc<64x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc32)
      %110 = arith.addi %arg11, %c1_i32 : i32 loc(#loc25)
      %111 = arith.cmpi slt, %110, %c3_i32 : i32 loc(#loc25)
      %112 = arith.select %111, %110, %c0_i32 : i32 loc(#loc25)
      %113 = arith.addi %arg9, %c2_i32 : i32 loc(#loc25)
      %114 = arith.muli %113, %c64_i32 : i32 loc(#loc33)
      %115 = arith.subi %arg4, %114 : i32 loc(#loc30)
      %116 = tt.splat %115 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
      %117 = arith.cmpi slt, %22, %116 : tensor<1x64xi32, #blocked> loc(#loc26)
      %118 = tt.splat %114 : i32 -> tensor<128x64xi32, #blocked> loc(#loc27)
      %119 = tt.addptr %25, %118 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc27)
      %120 = tt.broadcast %117 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc23)
      %121 = triton_gpu.memdesc_subview %39[%112, %c0_i32, %c0_i32] : !tt.memdesc<3x128x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<128x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc23)
      %122 = tt.splat %101 : i1 -> tensor<128x64xi1, #blocked> loc(#loc25)
      %123 = arith.andi %122, %120 : tensor<128x64xi1, #blocked> loc(#loc25)
      %124 = triton_gpu.async_copy_global_to_local %119, %121 mask %123 other %cst_3 : tensor<128x64x!tt.ptr<f16>, #blocked> -> <128x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc23)
      %125 = triton_gpu.async_commit_group %124 loc(#loc23)
      %126 = tt.splat %115 : i32 -> tensor<64x1xi32, #blocked> loc(#loc28)
      %127 = arith.cmpi slt, %27, %126 : tensor<64x1xi32, #blocked> loc(#loc28)
      %128 = arith.muli %114, %arg7 : i32 loc(#loc31)
      %129 = tt.splat %128 : i32 -> tensor<64x64xi32, #blocked> loc(#loc29)
      %130 = tt.addptr %36, %129 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc29)
      %131 = tt.broadcast %127 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc24)
      %132 = triton_gpu.memdesc_subview %40[%112, %c0_i32, %c0_i32] : !tt.memdesc<3x64x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<64x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
      %133 = tt.splat %101 : i1 -> tensor<64x64xi1, #blocked> loc(#loc25)
      %134 = arith.andi %133, %131 : tensor<64x64xi1, #blocked> loc(#loc25)
      %135 = triton_gpu.async_copy_global_to_local %130, %132 mask %134 other %cst_2 : tensor<64x64x!tt.ptr<f16>, #blocked> -> <64x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
      %136 = triton_gpu.async_commit_group %135 loc(#loc24)
      scf.yield %109#0, %112, %104, %arg14, %136 : tensor<128x64xf32, #mma>, i32, i32, !triton_gpu.async.token, !triton_gpu.async.token loc(#loc25)
    } loc(#loc25)
    %83 = triton_nvidia_gpu.warp_group_dot_wait %82#0 {pendings = 0 : i32} : tensor<128x64xf32, #mma> loc(#loc25)
    %84 = triton_gpu.async_wait  {num = 0 : i32} loc(#loc25)
    triton_gpu.local_dealloc %39 : !tt.memdesc<3x128x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc25)
    triton_gpu.local_dealloc %40 : !tt.memdesc<3x64x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc25)
    %85 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc34)
    %86 = arith.muli %17, %85 : tensor<128x1xi32, #blocked1> loc(#loc34)
    %87 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %88 = tt.addptr %87, %86 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi32, #blocked1> loc(#loc35)
    %89 = tt.broadcast %88 : tensor<128x1x!tt.ptr<f32>, #blocked1> -> tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %90 = tt.broadcast %33 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc36)
    %91 = tt.addptr %89, %90 : tensor<128x64x!tt.ptr<f32>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc36)
    %92 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc37)
    %93 = arith.cmpi slt, %17, %92 : tensor<128x1xi32, #blocked1> loc(#loc37)
    %94 = tt.splat %arg5 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
    %95 = arith.cmpi slt, %33, %94 : tensor<1x64xi32, #blocked1> loc(#loc38)
    %96 = tt.broadcast %93 : tensor<128x1xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc39)
    %97 = tt.broadcast %95 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc39)
    %98 = arith.andi %96, %97 : tensor<128x64xi1, #blocked1> loc(#loc39)
    %99 = triton_gpu.convert_layout %83 : tensor<128x64xf32, #mma> -> tensor<128x64xf32, #blocked1> loc(#loc40)
    tt.store %91, %99, %98 : tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":17:26)
#loc3 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":18:26)
#loc4 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":20:21)
#loc5 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":20:49)
#loc6 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":20:36)
#loc7 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":21:21)
#loc8 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":21:49)
#loc9 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":21:36)
#loc10 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":24:28)
#loc11 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":24:39)
#loc12 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":24:21)
#loc13 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":24:58)
#loc14 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":24:51)
#loc15 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":25:28)
#loc16 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":25:39)
#loc17 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":25:21)
#loc18 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":25:58)
#loc19 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":25:51)
#loc20 = loc("/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py":40:22)
#loc21 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":29:33)
#loc22 = loc("/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py":40:28)
#loc23 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":31:20)
#loc24 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":32:20)
#loc25 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":29:22)
#loc26 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":31:82)
#loc27 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":31:29)
#loc28 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":32:82)
#loc29 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":32:29)
#loc30 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":30:22)
#loc31 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":32:48)
#loc32 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":33:32)
#loc33 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":30:26)
#loc34 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":35:39)
#loc35 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":35:21)
#loc36 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":35:51)
#loc37 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":38:33)
#loc38 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":38:58)
#loc39 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":38:39)
#loc40 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":39:21)
#loc41 = loc("/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py":39:4)
#loc42 = loc(callsite(#loc20 at #loc21))
#loc43 = loc(callsite(#loc22 at #loc21))
