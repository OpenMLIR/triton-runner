; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !11
  %12 = shl i32 %11, 7, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = lshr i32 %13, 3, !dbg !13
  %15 = and i32 %14, 15, !dbg !13
  %16 = or disjoint i32 %15, 16, !dbg !13
  %17 = or disjoint i32 %15, 32, !dbg !13
  %18 = or disjoint i32 %15, 48, !dbg !13
  %19 = or disjoint i32 %15, 64, !dbg !13
  %20 = or disjoint i32 %15, 80, !dbg !13
  %21 = or disjoint i32 %15, 96, !dbg !13
  %22 = or disjoint i32 %15, 112, !dbg !13
  %23 = or disjoint i32 %12, %15, !dbg !14
  %24 = or disjoint i32 %12, %16, !dbg !14
  %25 = or disjoint i32 %12, %17, !dbg !14
  %26 = or disjoint i32 %12, %18, !dbg !14
  %27 = or disjoint i32 %12, %19, !dbg !14
  %28 = or disjoint i32 %12, %20, !dbg !14
  %29 = or disjoint i32 %12, %21, !dbg !14
  %30 = or disjoint i32 %12, %22, !dbg !14
  %31 = shl i32 %10, 6, !dbg !15
  %32 = shl i32 %13, 3, !dbg !16
  %33 = and i32 %32, 56, !dbg !16
  %34 = or disjoint i32 %31, %33, !dbg !17
  %35 = mul i32 %23, %6, !dbg !18
  %36 = mul i32 %24, %6, !dbg !18
  %37 = mul i32 %25, %6, !dbg !18
  %38 = mul i32 %26, %6, !dbg !18
  %39 = mul i32 %27, %6, !dbg !18
  %40 = mul i32 %28, %6, !dbg !18
  %41 = mul i32 %29, %6, !dbg !18
  %42 = mul i32 %30, %6, !dbg !18
  %43 = sext i32 %35 to i64, !dbg !19
  %44 = getelementptr half, ptr addrspace(1) %0, i64 %43, !dbg !19
  %45 = sext i32 %36 to i64, !dbg !19
  %46 = getelementptr half, ptr addrspace(1) %0, i64 %45, !dbg !19
  %47 = sext i32 %37 to i64, !dbg !19
  %48 = getelementptr half, ptr addrspace(1) %0, i64 %47, !dbg !19
  %49 = sext i32 %38 to i64, !dbg !19
  %50 = getelementptr half, ptr addrspace(1) %0, i64 %49, !dbg !19
  %51 = sext i32 %39 to i64, !dbg !19
  %52 = getelementptr half, ptr addrspace(1) %0, i64 %51, !dbg !19
  %53 = sext i32 %40 to i64, !dbg !19
  %54 = getelementptr half, ptr addrspace(1) %0, i64 %53, !dbg !19
  %55 = sext i32 %41 to i64, !dbg !19
  %56 = getelementptr half, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = sext i32 %42 to i64, !dbg !19
  %58 = getelementptr half, ptr addrspace(1) %0, i64 %57, !dbg !19
  %59 = zext nneg i32 %33 to i64, !dbg !20
  %60 = getelementptr half, ptr addrspace(1) %44, i64 %59, !dbg !20
  %61 = getelementptr half, ptr addrspace(1) %46, i64 %59, !dbg !20
  %62 = getelementptr half, ptr addrspace(1) %48, i64 %59, !dbg !20
  %63 = getelementptr half, ptr addrspace(1) %50, i64 %59, !dbg !20
  %64 = getelementptr half, ptr addrspace(1) %52, i64 %59, !dbg !20
  %65 = getelementptr half, ptr addrspace(1) %54, i64 %59, !dbg !20
  %66 = getelementptr half, ptr addrspace(1) %56, i64 %59, !dbg !20
  %67 = getelementptr half, ptr addrspace(1) %58, i64 %59, !dbg !20
  %68 = mul i32 %7, %15, !dbg !21
  %69 = mul i32 %7, %16, !dbg !21
  %70 = mul i32 %7, %17, !dbg !21
  %71 = mul i32 %7, %18, !dbg !21
  %72 = sext i32 %68 to i64, !dbg !22
  %73 = getelementptr half, ptr addrspace(1) %1, i64 %72, !dbg !22
  %74 = sext i32 %69 to i64, !dbg !22
  %75 = getelementptr half, ptr addrspace(1) %1, i64 %74, !dbg !22
  %76 = sext i32 %70 to i64, !dbg !22
  %77 = getelementptr half, ptr addrspace(1) %1, i64 %76, !dbg !22
  %78 = sext i32 %71 to i64, !dbg !22
  %79 = getelementptr half, ptr addrspace(1) %1, i64 %78, !dbg !22
  %80 = sext i32 %34 to i64, !dbg !23
  %81 = getelementptr half, ptr addrspace(1) %73, i64 %80, !dbg !23
  %82 = getelementptr half, ptr addrspace(1) %75, i64 %80, !dbg !23
  %83 = getelementptr half, ptr addrspace(1) %77, i64 %80, !dbg !23
  %84 = getelementptr half, ptr addrspace(1) %79, i64 %80, !dbg !23
  %85 = add i32 %4, 63, !dbg !24
  %86 = icmp sgt i32 %85, 63, !dbg !28
  %87 = icmp slt i32 %33, %4, !dbg !29
  %88 = and i1 %87, %86, !dbg !28
  %89 = xor i32 %32, %13, !dbg !30
  %90 = and i32 %89, 56, !dbg !30
  %91 = shl nuw nsw i32 %15, 6, !dbg !30
  %92 = or disjoint i32 %90, %91, !dbg !30
  %93 = zext nneg i32 %92 to i64, !dbg !30
  %94 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %93, !dbg !30
  %95 = or disjoint i32 %92, 1024, !dbg !30
  %96 = zext nneg i32 %95 to i64, !dbg !30
  %97 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %96, !dbg !30
  %98 = or disjoint i32 %92, 2048, !dbg !30
  %99 = zext nneg i32 %98 to i64, !dbg !30
  %100 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %99, !dbg !30
  %101 = or disjoint i32 %92, 3072, !dbg !30
  %102 = zext nneg i32 %101 to i64, !dbg !30
  %103 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %102, !dbg !30
  %104 = or disjoint i32 %92, 4096, !dbg !30
  %105 = zext nneg i32 %104 to i64, !dbg !30
  %106 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %105, !dbg !30
  %107 = or disjoint i32 %92, 5120, !dbg !30
  %108 = zext nneg i32 %107 to i64, !dbg !30
  %109 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %108, !dbg !30
  %110 = or disjoint i32 %92, 6144, !dbg !30
  %111 = zext nneg i32 %110 to i64, !dbg !30
  %112 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %111, !dbg !30
  %113 = or disjoint i32 %92, 7168, !dbg !30
  %114 = zext nneg i32 %113 to i64, !dbg !30
  %115 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %114, !dbg !30
  %116 = select i1 %88, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %94, ptr addrspace(1) %60, i32 %116, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %97, ptr addrspace(1) %61, i32 %116, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %62, i32 %116, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %103, ptr addrspace(1) %63, i32 %116, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %106, ptr addrspace(1) %64, i32 %116, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %109, ptr addrspace(1) %65, i32 %116, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %112, ptr addrspace(1) %66, i32 %116, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %115, ptr addrspace(1) %67, i32 %116, i1 true) #2, !dbg !30
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !30
  %117 = icmp slt i32 %15, %4, !dbg !31
  %118 = icmp slt i32 %16, %4, !dbg !31
  %119 = icmp slt i32 %17, %4, !dbg !31
  %120 = icmp slt i32 %18, %4, !dbg !31
  %121 = and i1 %117, %86, !dbg !28
  %122 = and i1 %118, %86, !dbg !28
  %123 = and i1 %119, %86, !dbg !28
  %124 = and i1 %120, %86, !dbg !28
  %125 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %93, !dbg !32
  %126 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %96, !dbg !32
  %127 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %99, !dbg !32
  %128 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %102, !dbg !32
  %129 = select i1 %121, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %125, ptr addrspace(1) %81, i32 %129, i1 true) #2, !dbg !32
  %130 = select i1 %122, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %126, ptr addrspace(1) %82, i32 %130, i1 true) #2, !dbg !32
  %131 = select i1 %123, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %127, ptr addrspace(1) %83, i32 %131, i1 true) #2, !dbg !32
  %132 = select i1 %124, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %128, ptr addrspace(1) %84, i32 %132, i1 true) #2, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !32
  %133 = icmp sgt i32 %85, 127, !dbg !28
  %134 = add i32 %4, -64, !dbg !33
  %135 = icmp slt i32 %33, %134, !dbg !29
  %136 = getelementptr i8, ptr addrspace(1) %60, i64 128, !dbg !34
  %137 = getelementptr i8, ptr addrspace(1) %61, i64 128, !dbg !34
  %138 = getelementptr i8, ptr addrspace(1) %62, i64 128, !dbg !34
  %139 = getelementptr i8, ptr addrspace(1) %63, i64 128, !dbg !34
  %140 = getelementptr i8, ptr addrspace(1) %64, i64 128, !dbg !34
  %141 = getelementptr i8, ptr addrspace(1) %65, i64 128, !dbg !34
  %142 = getelementptr i8, ptr addrspace(1) %66, i64 128, !dbg !34
  %143 = getelementptr i8, ptr addrspace(1) %67, i64 128, !dbg !34
  %144 = and i1 %133, %135, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %145 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %93, !dbg !30
  %146 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %96, !dbg !30
  %147 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %99, !dbg !30
  %148 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %102, !dbg !30
  %149 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %105, !dbg !30
  %150 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %108, !dbg !30
  %151 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %111, !dbg !30
  %152 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %114, !dbg !30
  %153 = select i1 %144, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %145, ptr addrspace(1) %136, i32 %153, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %146, ptr addrspace(1) %137, i32 %153, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %147, ptr addrspace(1) %138, i32 %153, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %148, ptr addrspace(1) %139, i32 %153, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %149, ptr addrspace(1) %140, i32 %153, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %150, ptr addrspace(1) %141, i32 %153, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %151, ptr addrspace(1) %142, i32 %153, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %152, ptr addrspace(1) %143, i32 %153, i1 true) #2, !dbg !30
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !30
  %154 = icmp slt i32 %15, %134, !dbg !31
  %155 = icmp slt i32 %16, %134, !dbg !31
  %156 = icmp slt i32 %17, %134, !dbg !31
  %157 = icmp slt i32 %18, %134, !dbg !31
  %158 = shl i32 %7, 6, !dbg !35
  %159 = sext i32 %158 to i64, !dbg !36
  %160 = getelementptr half, ptr addrspace(1) %81, i64 %159, !dbg !36
  %161 = getelementptr half, ptr addrspace(1) %82, i64 %159, !dbg !36
  %162 = getelementptr half, ptr addrspace(1) %83, i64 %159, !dbg !36
  %163 = getelementptr half, ptr addrspace(1) %84, i64 %159, !dbg !36
  %164 = and i1 %133, %154, !dbg !28
  %165 = and i1 %133, %155, !dbg !28
  %166 = and i1 %133, %156, !dbg !28
  %167 = and i1 %133, %157, !dbg !28
  %168 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %93, !dbg !32
  %169 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %96, !dbg !32
  %170 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %99, !dbg !32
  %171 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %102, !dbg !32
  %172 = select i1 %164, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %168, ptr addrspace(1) %160, i32 %172, i1 true) #2, !dbg !32
  %173 = select i1 %165, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %169, ptr addrspace(1) %161, i32 %173, i1 true) #2, !dbg !32
  %174 = select i1 %166, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %170, ptr addrspace(1) %162, i32 %174, i1 true) #2, !dbg !32
  %175 = select i1 %167, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %171, ptr addrspace(1) %163, i32 %175, i1 true) #2, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !32
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %176 = and i32 %13, 7, !dbg !30
  %177 = lshr i32 %13, 4, !dbg !30
  %178 = and i32 %177, 1, !dbg !30
  %179 = shl nuw nsw i32 %177, 3, !dbg !30
  %180 = and i32 %179, 48, !dbg !30
  %181 = and i32 %13, 15, !dbg !30
  %182 = or disjoint i32 %181, %180, !dbg !30
  %183 = xor i32 %178, %176, !dbg !30
  %184 = shl nuw nsw i32 %182, 6, !dbg !30
  %185 = shl nuw nsw i32 %183, 3, !dbg !30
  %186 = or disjoint i32 %184, %185, !dbg !30
  %187 = zext nneg i32 %186 to i64, !dbg !30
  %188 = getelementptr half, ptr addrspace(3) @global_smem, i64 %187, !dbg !30
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %188) #2, !dbg !30
  %190 = getelementptr i8, ptr addrspace(3) %188, i64 8192, !dbg !30
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %190) #2, !dbg !30
  %192 = shl nuw nsw i32 %181, 6, !dbg !32
  %193 = or disjoint i32 %185, %192, !dbg !32
  %194 = zext nneg i32 %193 to i64, !dbg !32
  %195 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %194, !dbg !32
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %195) #2, !dbg !32
  %197 = or disjoint i32 %178, 2, !dbg !32
  %198 = xor i32 %197, %176, !dbg !32
  %199 = shl nuw nsw i32 %198, 3, !dbg !32
  %200 = or disjoint i32 %199, %192, !dbg !32
  %201 = zext nneg i32 %200 to i64, !dbg !32
  %202 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %201, !dbg !32
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %202) #2, !dbg !32
  %204 = or disjoint i32 %178, 4, !dbg !32
  %205 = xor i32 %204, %176, !dbg !32
  %206 = shl nuw nsw i32 %205, 3, !dbg !32
  %207 = or disjoint i32 %206, %192, !dbg !32
  %208 = zext nneg i32 %207 to i64, !dbg !32
  %209 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %208, !dbg !32
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %209) #2, !dbg !32
  %211 = or disjoint i32 %178, 6, !dbg !32
  %212 = xor i32 %211, %176, !dbg !32
  %213 = shl nuw nsw i32 %212, 3, !dbg !32
  %214 = or disjoint i32 %213, %192, !dbg !32
  %215 = zext nneg i32 %214 to i64, !dbg !32
  %216 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %215, !dbg !32
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %216) #2, !dbg !32
  br i1 %86, label %.lr.ph, label %._crit_edge, !dbg !28

.lr.ph:                                           ; preds = %9
  %218 = lshr i32 %85, 6, !dbg !37
  %219 = add nsw i32 %218, -2
  %220 = sext i32 %219 to i64, !dbg !28
  %wide.trip.count = zext nneg i32 %218 to i64, !dbg !28
  %221 = shl nuw nsw i32 %182, 6
  %222 = or disjoint i32 %221, %199
  %223 = zext nneg i32 %222 to i64
  %224 = shl nuw nsw i32 %181, 6
  %225 = or disjoint i32 %224, %185
  %226 = zext nneg i32 %225 to i64
  %227 = or disjoint i32 %224, %199
  %228 = zext nneg i32 %227 to i64
  %229 = or disjoint i32 %224, %206
  %230 = zext nneg i32 %229 to i64
  %231 = or disjoint i32 %224, %213
  %232 = zext nneg i32 %231 to i64
  %233 = or disjoint i32 %221, %206
  %234 = zext nneg i32 %233 to i64
  %235 = or disjoint i32 %221, %213
  %236 = zext nneg i32 %235 to i64
  br label %237, !dbg !28

237:                                              ; preds = %.lr.ph, %237
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %237 ]
  %.pn = phi { i32, i32, i32, i32 } [ %217, %.lr.ph ], [ %754, %237 ]
  %.pn215 = phi { i32, i32, i32, i32 } [ %210, %.lr.ph ], [ %752, %237 ]
  %.pn219 = phi { i32, i32, i32, i32 } [ %203, %.lr.ph ], [ %750, %237 ]
  %.pn223 = phi { i32, i32, i32, i32 } [ %196, %.lr.ph ], [ %748, %237 ]
  %.pn227 = phi { i32, i32, i32, i32 } [ %191, %.lr.ph ], [ %746, %237 ]
  %.pn231 = phi { i32, i32, i32, i32 } [ %189, %.lr.ph ], [ %744, %237 ]
  %238 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), %.lr.ph ], [ %742, %237 ]
  %239 = phi ptr addrspace(3) [ @global_smem, %.lr.ph ], [ %739, %237 ]
  %240 = phi float [ 0.000000e+00, %.lr.ph ], [ %756, %237 ]
  %241 = phi float [ 0.000000e+00, %.lr.ph ], [ %757, %237 ]
  %242 = phi float [ 0.000000e+00, %.lr.ph ], [ %758, %237 ]
  %243 = phi float [ 0.000000e+00, %.lr.ph ], [ %759, %237 ]
  %244 = phi float [ 0.000000e+00, %.lr.ph ], [ %761, %237 ]
  %245 = phi float [ 0.000000e+00, %.lr.ph ], [ %762, %237 ]
  %246 = phi float [ 0.000000e+00, %.lr.ph ], [ %763, %237 ]
  %247 = phi float [ 0.000000e+00, %.lr.ph ], [ %764, %237 ]
  %248 = phi float [ 0.000000e+00, %.lr.ph ], [ %766, %237 ]
  %249 = phi float [ 0.000000e+00, %.lr.ph ], [ %767, %237 ]
  %250 = phi float [ 0.000000e+00, %.lr.ph ], [ %768, %237 ]
  %251 = phi float [ 0.000000e+00, %.lr.ph ], [ %769, %237 ]
  %252 = phi float [ 0.000000e+00, %.lr.ph ], [ %771, %237 ]
  %253 = phi float [ 0.000000e+00, %.lr.ph ], [ %772, %237 ]
  %254 = phi float [ 0.000000e+00, %.lr.ph ], [ %773, %237 ]
  %255 = phi float [ 0.000000e+00, %.lr.ph ], [ %774, %237 ]
  %256 = phi float [ 0.000000e+00, %.lr.ph ], [ %776, %237 ]
  %257 = phi float [ 0.000000e+00, %.lr.ph ], [ %777, %237 ]
  %258 = phi float [ 0.000000e+00, %.lr.ph ], [ %778, %237 ]
  %259 = phi float [ 0.000000e+00, %.lr.ph ], [ %779, %237 ]
  %260 = phi float [ 0.000000e+00, %.lr.ph ], [ %781, %237 ]
  %261 = phi float [ 0.000000e+00, %.lr.ph ], [ %782, %237 ]
  %262 = phi float [ 0.000000e+00, %.lr.ph ], [ %783, %237 ]
  %263 = phi float [ 0.000000e+00, %.lr.ph ], [ %784, %237 ]
  %264 = phi float [ 0.000000e+00, %.lr.ph ], [ %786, %237 ]
  %265 = phi float [ 0.000000e+00, %.lr.ph ], [ %787, %237 ]
  %266 = phi float [ 0.000000e+00, %.lr.ph ], [ %788, %237 ]
  %267 = phi float [ 0.000000e+00, %.lr.ph ], [ %789, %237 ]
  %268 = phi float [ 0.000000e+00, %.lr.ph ], [ %791, %237 ]
  %269 = phi float [ 0.000000e+00, %.lr.ph ], [ %792, %237 ]
  %270 = phi float [ 0.000000e+00, %.lr.ph ], [ %793, %237 ]
  %271 = phi float [ 0.000000e+00, %.lr.ph ], [ %794, %237 ]
  %272 = phi float [ 0.000000e+00, %.lr.ph ], [ %796, %237 ]
  %273 = phi float [ 0.000000e+00, %.lr.ph ], [ %797, %237 ]
  %274 = phi float [ 0.000000e+00, %.lr.ph ], [ %798, %237 ]
  %275 = phi float [ 0.000000e+00, %.lr.ph ], [ %799, %237 ]
  %276 = phi float [ 0.000000e+00, %.lr.ph ], [ %801, %237 ]
  %277 = phi float [ 0.000000e+00, %.lr.ph ], [ %802, %237 ]
  %278 = phi float [ 0.000000e+00, %.lr.ph ], [ %803, %237 ]
  %279 = phi float [ 0.000000e+00, %.lr.ph ], [ %804, %237 ]
  %280 = phi float [ 0.000000e+00, %.lr.ph ], [ %806, %237 ]
  %281 = phi float [ 0.000000e+00, %.lr.ph ], [ %807, %237 ]
  %282 = phi float [ 0.000000e+00, %.lr.ph ], [ %808, %237 ]
  %283 = phi float [ 0.000000e+00, %.lr.ph ], [ %809, %237 ]
  %284 = phi float [ 0.000000e+00, %.lr.ph ], [ %811, %237 ]
  %285 = phi float [ 0.000000e+00, %.lr.ph ], [ %812, %237 ]
  %286 = phi float [ 0.000000e+00, %.lr.ph ], [ %813, %237 ]
  %287 = phi float [ 0.000000e+00, %.lr.ph ], [ %814, %237 ]
  %288 = phi float [ 0.000000e+00, %.lr.ph ], [ %816, %237 ]
  %289 = phi float [ 0.000000e+00, %.lr.ph ], [ %817, %237 ]
  %290 = phi float [ 0.000000e+00, %.lr.ph ], [ %818, %237 ]
  %291 = phi float [ 0.000000e+00, %.lr.ph ], [ %819, %237 ]
  %292 = phi float [ 0.000000e+00, %.lr.ph ], [ %821, %237 ]
  %293 = phi float [ 0.000000e+00, %.lr.ph ], [ %822, %237 ]
  %294 = phi float [ 0.000000e+00, %.lr.ph ], [ %823, %237 ]
  %295 = phi float [ 0.000000e+00, %.lr.ph ], [ %824, %237 ]
  %296 = phi float [ 0.000000e+00, %.lr.ph ], [ %826, %237 ]
  %297 = phi float [ 0.000000e+00, %.lr.ph ], [ %827, %237 ]
  %298 = phi float [ 0.000000e+00, %.lr.ph ], [ %828, %237 ]
  %299 = phi float [ 0.000000e+00, %.lr.ph ], [ %829, %237 ]
  %300 = phi float [ 0.000000e+00, %.lr.ph ], [ %831, %237 ]
  %301 = phi float [ 0.000000e+00, %.lr.ph ], [ %832, %237 ]
  %302 = phi float [ 0.000000e+00, %.lr.ph ], [ %833, %237 ]
  %303 = phi float [ 0.000000e+00, %.lr.ph ], [ %834, %237 ]
  %304 = phi <2 x i32> [ <i32 0, i32 1>, %.lr.ph ], [ %716, %237 ]
  %305 = extractvalue { i32, i32, i32, i32 } %.pn231, 3, !dbg !28
  %306 = extractvalue { i32, i32, i32, i32 } %.pn231, 2, !dbg !28
  %307 = extractvalue { i32, i32, i32, i32 } %.pn231, 1, !dbg !28
  %308 = extractvalue { i32, i32, i32, i32 } %.pn231, 0, !dbg !28
  %309 = extractvalue { i32, i32, i32, i32 } %.pn227, 3, !dbg !28
  %310 = extractvalue { i32, i32, i32, i32 } %.pn227, 2, !dbg !28
  %311 = extractvalue { i32, i32, i32, i32 } %.pn227, 1, !dbg !28
  %312 = extractvalue { i32, i32, i32, i32 } %.pn227, 0, !dbg !28
  %313 = extractvalue { i32, i32, i32, i32 } %.pn223, 3, !dbg !28
  %314 = extractvalue { i32, i32, i32, i32 } %.pn223, 2, !dbg !28
  %315 = extractvalue { i32, i32, i32, i32 } %.pn223, 1, !dbg !28
  %316 = extractvalue { i32, i32, i32, i32 } %.pn223, 0, !dbg !28
  %317 = extractvalue { i32, i32, i32, i32 } %.pn219, 3, !dbg !28
  %318 = extractvalue { i32, i32, i32, i32 } %.pn219, 2, !dbg !28
  %319 = extractvalue { i32, i32, i32, i32 } %.pn219, 1, !dbg !28
  %320 = extractvalue { i32, i32, i32, i32 } %.pn219, 0, !dbg !28
  %321 = extractvalue { i32, i32, i32, i32 } %.pn215, 3, !dbg !28
  %322 = extractvalue { i32, i32, i32, i32 } %.pn215, 2, !dbg !28
  %323 = extractvalue { i32, i32, i32, i32 } %.pn215, 1, !dbg !28
  %324 = extractvalue { i32, i32, i32, i32 } %.pn215, 0, !dbg !28
  %325 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !28
  %326 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !28
  %327 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !28
  %328 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !28
  %329 = icmp slt i64 %indvars.iv, %220, !dbg !28
  %330 = getelementptr half, ptr addrspace(3) %239, i64 %223, !dbg !30
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %330) #2, !dbg !30
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !30
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !30
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !30
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !30
  %336 = getelementptr i8, ptr addrspace(3) %330, i64 8192, !dbg !30
  %337 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %336) #2, !dbg !30
  %338 = extractvalue { i32, i32, i32, i32 } %337, 0, !dbg !30
  %339 = extractvalue { i32, i32, i32, i32 } %337, 1, !dbg !30
  %340 = extractvalue { i32, i32, i32, i32 } %337, 2, !dbg !30
  %341 = extractvalue { i32, i32, i32, i32 } %337, 3, !dbg !30
  %342 = getelementptr i8, ptr addrspace(3) %238, i64 2048, !dbg !32
  %343 = getelementptr half, ptr addrspace(3) %342, i64 %226, !dbg !32
  %344 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %343) #2, !dbg !32
  %345 = extractvalue { i32, i32, i32, i32 } %344, 0, !dbg !32
  %346 = extractvalue { i32, i32, i32, i32 } %344, 1, !dbg !32
  %347 = extractvalue { i32, i32, i32, i32 } %344, 2, !dbg !32
  %348 = extractvalue { i32, i32, i32, i32 } %344, 3, !dbg !32
  %349 = getelementptr half, ptr addrspace(3) %342, i64 %228, !dbg !32
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %349) #2, !dbg !32
  %351 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !32
  %352 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !32
  %353 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !32
  %354 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !32
  %355 = getelementptr half, ptr addrspace(3) %342, i64 %230, !dbg !32
  %356 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %355) #2, !dbg !32
  %357 = extractvalue { i32, i32, i32, i32 } %356, 0, !dbg !32
  %358 = extractvalue { i32, i32, i32, i32 } %356, 1, !dbg !32
  %359 = extractvalue { i32, i32, i32, i32 } %356, 2, !dbg !32
  %360 = extractvalue { i32, i32, i32, i32 } %356, 3, !dbg !32
  %361 = getelementptr half, ptr addrspace(3) %342, i64 %232, !dbg !32
  %362 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %361) #2, !dbg !32
  %363 = extractvalue { i32, i32, i32, i32 } %362, 0, !dbg !32
  %364 = extractvalue { i32, i32, i32, i32 } %362, 1, !dbg !32
  %365 = extractvalue { i32, i32, i32, i32 } %362, 2, !dbg !32
  %366 = extractvalue { i32, i32, i32, i32 } %362, 3, !dbg !32
  %367 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %240, float %241, float %242, float %243, i32 %308, i32 %307, i32 %306, i32 %305, i32 %316, i32 %315) #2, !dbg !38
  %368 = extractvalue { float, float, float, float } %367, 0, !dbg !38
  %369 = extractvalue { float, float, float, float } %367, 1, !dbg !38
  %370 = extractvalue { float, float, float, float } %367, 2, !dbg !38
  %371 = extractvalue { float, float, float, float } %367, 3, !dbg !38
  %372 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %244, float %245, float %246, float %247, i32 %308, i32 %307, i32 %306, i32 %305, i32 %314, i32 %313) #2, !dbg !38
  %373 = extractvalue { float, float, float, float } %372, 0, !dbg !38
  %374 = extractvalue { float, float, float, float } %372, 1, !dbg !38
  %375 = extractvalue { float, float, float, float } %372, 2, !dbg !38
  %376 = extractvalue { float, float, float, float } %372, 3, !dbg !38
  %377 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %248, float %249, float %250, float %251, i32 %308, i32 %307, i32 %306, i32 %305, i32 %320, i32 %319) #2, !dbg !38
  %378 = extractvalue { float, float, float, float } %377, 0, !dbg !38
  %379 = extractvalue { float, float, float, float } %377, 1, !dbg !38
  %380 = extractvalue { float, float, float, float } %377, 2, !dbg !38
  %381 = extractvalue { float, float, float, float } %377, 3, !dbg !38
  %382 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %252, float %253, float %254, float %255, i32 %308, i32 %307, i32 %306, i32 %305, i32 %318, i32 %317) #2, !dbg !38
  %383 = extractvalue { float, float, float, float } %382, 0, !dbg !38
  %384 = extractvalue { float, float, float, float } %382, 1, !dbg !38
  %385 = extractvalue { float, float, float, float } %382, 2, !dbg !38
  %386 = extractvalue { float, float, float, float } %382, 3, !dbg !38
  %387 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %256, float %257, float %258, float %259, i32 %308, i32 %307, i32 %306, i32 %305, i32 %324, i32 %323) #2, !dbg !38
  %388 = extractvalue { float, float, float, float } %387, 0, !dbg !38
  %389 = extractvalue { float, float, float, float } %387, 1, !dbg !38
  %390 = extractvalue { float, float, float, float } %387, 2, !dbg !38
  %391 = extractvalue { float, float, float, float } %387, 3, !dbg !38
  %392 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %260, float %261, float %262, float %263, i32 %308, i32 %307, i32 %306, i32 %305, i32 %322, i32 %321) #2, !dbg !38
  %393 = extractvalue { float, float, float, float } %392, 0, !dbg !38
  %394 = extractvalue { float, float, float, float } %392, 1, !dbg !38
  %395 = extractvalue { float, float, float, float } %392, 2, !dbg !38
  %396 = extractvalue { float, float, float, float } %392, 3, !dbg !38
  %397 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %264, float %265, float %266, float %267, i32 %308, i32 %307, i32 %306, i32 %305, i32 %328, i32 %327) #2, !dbg !38
  %398 = extractvalue { float, float, float, float } %397, 0, !dbg !38
  %399 = extractvalue { float, float, float, float } %397, 1, !dbg !38
  %400 = extractvalue { float, float, float, float } %397, 2, !dbg !38
  %401 = extractvalue { float, float, float, float } %397, 3, !dbg !38
  %402 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %268, float %269, float %270, float %271, i32 %308, i32 %307, i32 %306, i32 %305, i32 %326, i32 %325) #2, !dbg !38
  %403 = extractvalue { float, float, float, float } %402, 0, !dbg !38
  %404 = extractvalue { float, float, float, float } %402, 1, !dbg !38
  %405 = extractvalue { float, float, float, float } %402, 2, !dbg !38
  %406 = extractvalue { float, float, float, float } %402, 3, !dbg !38
  %407 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %272, float %273, float %274, float %275, i32 %312, i32 %311, i32 %310, i32 %309, i32 %316, i32 %315) #2, !dbg !38
  %408 = extractvalue { float, float, float, float } %407, 0, !dbg !38
  %409 = extractvalue { float, float, float, float } %407, 1, !dbg !38
  %410 = extractvalue { float, float, float, float } %407, 2, !dbg !38
  %411 = extractvalue { float, float, float, float } %407, 3, !dbg !38
  %412 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %276, float %277, float %278, float %279, i32 %312, i32 %311, i32 %310, i32 %309, i32 %314, i32 %313) #2, !dbg !38
  %413 = extractvalue { float, float, float, float } %412, 0, !dbg !38
  %414 = extractvalue { float, float, float, float } %412, 1, !dbg !38
  %415 = extractvalue { float, float, float, float } %412, 2, !dbg !38
  %416 = extractvalue { float, float, float, float } %412, 3, !dbg !38
  %417 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %280, float %281, float %282, float %283, i32 %312, i32 %311, i32 %310, i32 %309, i32 %320, i32 %319) #2, !dbg !38
  %418 = extractvalue { float, float, float, float } %417, 0, !dbg !38
  %419 = extractvalue { float, float, float, float } %417, 1, !dbg !38
  %420 = extractvalue { float, float, float, float } %417, 2, !dbg !38
  %421 = extractvalue { float, float, float, float } %417, 3, !dbg !38
  %422 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %284, float %285, float %286, float %287, i32 %312, i32 %311, i32 %310, i32 %309, i32 %318, i32 %317) #2, !dbg !38
  %423 = extractvalue { float, float, float, float } %422, 0, !dbg !38
  %424 = extractvalue { float, float, float, float } %422, 1, !dbg !38
  %425 = extractvalue { float, float, float, float } %422, 2, !dbg !38
  %426 = extractvalue { float, float, float, float } %422, 3, !dbg !38
  %427 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %288, float %289, float %290, float %291, i32 %312, i32 %311, i32 %310, i32 %309, i32 %324, i32 %323) #2, !dbg !38
  %428 = extractvalue { float, float, float, float } %427, 0, !dbg !38
  %429 = extractvalue { float, float, float, float } %427, 1, !dbg !38
  %430 = extractvalue { float, float, float, float } %427, 2, !dbg !38
  %431 = extractvalue { float, float, float, float } %427, 3, !dbg !38
  %432 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %292, float %293, float %294, float %295, i32 %312, i32 %311, i32 %310, i32 %309, i32 %322, i32 %321) #2, !dbg !38
  %433 = extractvalue { float, float, float, float } %432, 0, !dbg !38
  %434 = extractvalue { float, float, float, float } %432, 1, !dbg !38
  %435 = extractvalue { float, float, float, float } %432, 2, !dbg !38
  %436 = extractvalue { float, float, float, float } %432, 3, !dbg !38
  %437 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %296, float %297, float %298, float %299, i32 %312, i32 %311, i32 %310, i32 %309, i32 %328, i32 %327) #2, !dbg !38
  %438 = extractvalue { float, float, float, float } %437, 0, !dbg !38
  %439 = extractvalue { float, float, float, float } %437, 1, !dbg !38
  %440 = extractvalue { float, float, float, float } %437, 2, !dbg !38
  %441 = extractvalue { float, float, float, float } %437, 3, !dbg !38
  %442 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %300, float %301, float %302, float %303, i32 %312, i32 %311, i32 %310, i32 %309, i32 %326, i32 %325) #2, !dbg !38
  %443 = extractvalue { float, float, float, float } %442, 0, !dbg !38
  %444 = extractvalue { float, float, float, float } %442, 1, !dbg !38
  %445 = extractvalue { float, float, float, float } %442, 2, !dbg !38
  %446 = extractvalue { float, float, float, float } %442, 3, !dbg !38
  %447 = getelementptr half, ptr addrspace(3) %239, i64 %234, !dbg !30
  %448 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %447) #2, !dbg !30
  %449 = extractvalue { i32, i32, i32, i32 } %448, 0, !dbg !30
  %450 = extractvalue { i32, i32, i32, i32 } %448, 1, !dbg !30
  %451 = extractvalue { i32, i32, i32, i32 } %448, 2, !dbg !30
  %452 = extractvalue { i32, i32, i32, i32 } %448, 3, !dbg !30
  %453 = getelementptr i8, ptr addrspace(3) %447, i64 8192, !dbg !30
  %454 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %453) #2, !dbg !30
  %455 = extractvalue { i32, i32, i32, i32 } %454, 0, !dbg !30
  %456 = extractvalue { i32, i32, i32, i32 } %454, 1, !dbg !30
  %457 = extractvalue { i32, i32, i32, i32 } %454, 2, !dbg !30
  %458 = extractvalue { i32, i32, i32, i32 } %454, 3, !dbg !30
  %459 = getelementptr i8, ptr addrspace(3) %238, i64 4096, !dbg !32
  %460 = getelementptr half, ptr addrspace(3) %459, i64 %226, !dbg !32
  %461 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %460) #2, !dbg !32
  %462 = extractvalue { i32, i32, i32, i32 } %461, 0, !dbg !32
  %463 = extractvalue { i32, i32, i32, i32 } %461, 1, !dbg !32
  %464 = extractvalue { i32, i32, i32, i32 } %461, 2, !dbg !32
  %465 = extractvalue { i32, i32, i32, i32 } %461, 3, !dbg !32
  %466 = getelementptr half, ptr addrspace(3) %459, i64 %228, !dbg !32
  %467 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %466) #2, !dbg !32
  %468 = extractvalue { i32, i32, i32, i32 } %467, 0, !dbg !32
  %469 = extractvalue { i32, i32, i32, i32 } %467, 1, !dbg !32
  %470 = extractvalue { i32, i32, i32, i32 } %467, 2, !dbg !32
  %471 = extractvalue { i32, i32, i32, i32 } %467, 3, !dbg !32
  %472 = getelementptr half, ptr addrspace(3) %459, i64 %230, !dbg !32
  %473 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %472) #2, !dbg !32
  %474 = extractvalue { i32, i32, i32, i32 } %473, 0, !dbg !32
  %475 = extractvalue { i32, i32, i32, i32 } %473, 1, !dbg !32
  %476 = extractvalue { i32, i32, i32, i32 } %473, 2, !dbg !32
  %477 = extractvalue { i32, i32, i32, i32 } %473, 3, !dbg !32
  %478 = getelementptr half, ptr addrspace(3) %459, i64 %232, !dbg !32
  %479 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %478) #2, !dbg !32
  %480 = extractvalue { i32, i32, i32, i32 } %479, 0, !dbg !32
  %481 = extractvalue { i32, i32, i32, i32 } %479, 1, !dbg !32
  %482 = extractvalue { i32, i32, i32, i32 } %479, 2, !dbg !32
  %483 = extractvalue { i32, i32, i32, i32 } %479, 3, !dbg !32
  %484 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %368, float %369, float %370, float %371, i32 %332, i32 %333, i32 %334, i32 %335, i32 %345, i32 %346) #2, !dbg !38
  %485 = extractvalue { float, float, float, float } %484, 0, !dbg !38
  %486 = extractvalue { float, float, float, float } %484, 1, !dbg !38
  %487 = extractvalue { float, float, float, float } %484, 2, !dbg !38
  %488 = extractvalue { float, float, float, float } %484, 3, !dbg !38
  %489 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %373, float %374, float %375, float %376, i32 %332, i32 %333, i32 %334, i32 %335, i32 %347, i32 %348) #2, !dbg !38
  %490 = extractvalue { float, float, float, float } %489, 0, !dbg !38
  %491 = extractvalue { float, float, float, float } %489, 1, !dbg !38
  %492 = extractvalue { float, float, float, float } %489, 2, !dbg !38
  %493 = extractvalue { float, float, float, float } %489, 3, !dbg !38
  %494 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %378, float %379, float %380, float %381, i32 %332, i32 %333, i32 %334, i32 %335, i32 %351, i32 %352) #2, !dbg !38
  %495 = extractvalue { float, float, float, float } %494, 0, !dbg !38
  %496 = extractvalue { float, float, float, float } %494, 1, !dbg !38
  %497 = extractvalue { float, float, float, float } %494, 2, !dbg !38
  %498 = extractvalue { float, float, float, float } %494, 3, !dbg !38
  %499 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %383, float %384, float %385, float %386, i32 %332, i32 %333, i32 %334, i32 %335, i32 %353, i32 %354) #2, !dbg !38
  %500 = extractvalue { float, float, float, float } %499, 0, !dbg !38
  %501 = extractvalue { float, float, float, float } %499, 1, !dbg !38
  %502 = extractvalue { float, float, float, float } %499, 2, !dbg !38
  %503 = extractvalue { float, float, float, float } %499, 3, !dbg !38
  %504 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %388, float %389, float %390, float %391, i32 %332, i32 %333, i32 %334, i32 %335, i32 %357, i32 %358) #2, !dbg !38
  %505 = extractvalue { float, float, float, float } %504, 0, !dbg !38
  %506 = extractvalue { float, float, float, float } %504, 1, !dbg !38
  %507 = extractvalue { float, float, float, float } %504, 2, !dbg !38
  %508 = extractvalue { float, float, float, float } %504, 3, !dbg !38
  %509 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %393, float %394, float %395, float %396, i32 %332, i32 %333, i32 %334, i32 %335, i32 %359, i32 %360) #2, !dbg !38
  %510 = extractvalue { float, float, float, float } %509, 0, !dbg !38
  %511 = extractvalue { float, float, float, float } %509, 1, !dbg !38
  %512 = extractvalue { float, float, float, float } %509, 2, !dbg !38
  %513 = extractvalue { float, float, float, float } %509, 3, !dbg !38
  %514 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %398, float %399, float %400, float %401, i32 %332, i32 %333, i32 %334, i32 %335, i32 %363, i32 %364) #2, !dbg !38
  %515 = extractvalue { float, float, float, float } %514, 0, !dbg !38
  %516 = extractvalue { float, float, float, float } %514, 1, !dbg !38
  %517 = extractvalue { float, float, float, float } %514, 2, !dbg !38
  %518 = extractvalue { float, float, float, float } %514, 3, !dbg !38
  %519 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %403, float %404, float %405, float %406, i32 %332, i32 %333, i32 %334, i32 %335, i32 %365, i32 %366) #2, !dbg !38
  %520 = extractvalue { float, float, float, float } %519, 0, !dbg !38
  %521 = extractvalue { float, float, float, float } %519, 1, !dbg !38
  %522 = extractvalue { float, float, float, float } %519, 2, !dbg !38
  %523 = extractvalue { float, float, float, float } %519, 3, !dbg !38
  %524 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %408, float %409, float %410, float %411, i32 %338, i32 %339, i32 %340, i32 %341, i32 %345, i32 %346) #2, !dbg !38
  %525 = extractvalue { float, float, float, float } %524, 0, !dbg !38
  %526 = extractvalue { float, float, float, float } %524, 1, !dbg !38
  %527 = extractvalue { float, float, float, float } %524, 2, !dbg !38
  %528 = extractvalue { float, float, float, float } %524, 3, !dbg !38
  %529 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %413, float %414, float %415, float %416, i32 %338, i32 %339, i32 %340, i32 %341, i32 %347, i32 %348) #2, !dbg !38
  %530 = extractvalue { float, float, float, float } %529, 0, !dbg !38
  %531 = extractvalue { float, float, float, float } %529, 1, !dbg !38
  %532 = extractvalue { float, float, float, float } %529, 2, !dbg !38
  %533 = extractvalue { float, float, float, float } %529, 3, !dbg !38
  %534 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %418, float %419, float %420, float %421, i32 %338, i32 %339, i32 %340, i32 %341, i32 %351, i32 %352) #2, !dbg !38
  %535 = extractvalue { float, float, float, float } %534, 0, !dbg !38
  %536 = extractvalue { float, float, float, float } %534, 1, !dbg !38
  %537 = extractvalue { float, float, float, float } %534, 2, !dbg !38
  %538 = extractvalue { float, float, float, float } %534, 3, !dbg !38
  %539 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %423, float %424, float %425, float %426, i32 %338, i32 %339, i32 %340, i32 %341, i32 %353, i32 %354) #2, !dbg !38
  %540 = extractvalue { float, float, float, float } %539, 0, !dbg !38
  %541 = extractvalue { float, float, float, float } %539, 1, !dbg !38
  %542 = extractvalue { float, float, float, float } %539, 2, !dbg !38
  %543 = extractvalue { float, float, float, float } %539, 3, !dbg !38
  %544 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %428, float %429, float %430, float %431, i32 %338, i32 %339, i32 %340, i32 %341, i32 %357, i32 %358) #2, !dbg !38
  %545 = extractvalue { float, float, float, float } %544, 0, !dbg !38
  %546 = extractvalue { float, float, float, float } %544, 1, !dbg !38
  %547 = extractvalue { float, float, float, float } %544, 2, !dbg !38
  %548 = extractvalue { float, float, float, float } %544, 3, !dbg !38
  %549 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %433, float %434, float %435, float %436, i32 %338, i32 %339, i32 %340, i32 %341, i32 %359, i32 %360) #2, !dbg !38
  %550 = extractvalue { float, float, float, float } %549, 0, !dbg !38
  %551 = extractvalue { float, float, float, float } %549, 1, !dbg !38
  %552 = extractvalue { float, float, float, float } %549, 2, !dbg !38
  %553 = extractvalue { float, float, float, float } %549, 3, !dbg !38
  %554 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %438, float %439, float %440, float %441, i32 %338, i32 %339, i32 %340, i32 %341, i32 %363, i32 %364) #2, !dbg !38
  %555 = extractvalue { float, float, float, float } %554, 0, !dbg !38
  %556 = extractvalue { float, float, float, float } %554, 1, !dbg !38
  %557 = extractvalue { float, float, float, float } %554, 2, !dbg !38
  %558 = extractvalue { float, float, float, float } %554, 3, !dbg !38
  %559 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %443, float %444, float %445, float %446, i32 %338, i32 %339, i32 %340, i32 %341, i32 %365, i32 %366) #2, !dbg !38
  %560 = extractvalue { float, float, float, float } %559, 0, !dbg !38
  %561 = extractvalue { float, float, float, float } %559, 1, !dbg !38
  %562 = extractvalue { float, float, float, float } %559, 2, !dbg !38
  %563 = extractvalue { float, float, float, float } %559, 3, !dbg !38
  %564 = getelementptr half, ptr addrspace(3) %239, i64 %236, !dbg !30
  %565 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %564) #2, !dbg !30
  %566 = extractvalue { i32, i32, i32, i32 } %565, 0, !dbg !30
  %567 = extractvalue { i32, i32, i32, i32 } %565, 1, !dbg !30
  %568 = extractvalue { i32, i32, i32, i32 } %565, 2, !dbg !30
  %569 = extractvalue { i32, i32, i32, i32 } %565, 3, !dbg !30
  %570 = getelementptr i8, ptr addrspace(3) %564, i64 8192, !dbg !30
  %571 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %570) #2, !dbg !30
  %572 = extractvalue { i32, i32, i32, i32 } %571, 0, !dbg !30
  %573 = extractvalue { i32, i32, i32, i32 } %571, 1, !dbg !30
  %574 = extractvalue { i32, i32, i32, i32 } %571, 2, !dbg !30
  %575 = extractvalue { i32, i32, i32, i32 } %571, 3, !dbg !30
  %576 = getelementptr i8, ptr addrspace(3) %238, i64 6144, !dbg !32
  %577 = getelementptr half, ptr addrspace(3) %576, i64 %226, !dbg !32
  %578 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %577) #2, !dbg !32
  %579 = extractvalue { i32, i32, i32, i32 } %578, 0, !dbg !32
  %580 = extractvalue { i32, i32, i32, i32 } %578, 1, !dbg !32
  %581 = extractvalue { i32, i32, i32, i32 } %578, 2, !dbg !32
  %582 = extractvalue { i32, i32, i32, i32 } %578, 3, !dbg !32
  %583 = getelementptr half, ptr addrspace(3) %576, i64 %228, !dbg !32
  %584 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %583) #2, !dbg !32
  %585 = extractvalue { i32, i32, i32, i32 } %584, 0, !dbg !32
  %586 = extractvalue { i32, i32, i32, i32 } %584, 1, !dbg !32
  %587 = extractvalue { i32, i32, i32, i32 } %584, 2, !dbg !32
  %588 = extractvalue { i32, i32, i32, i32 } %584, 3, !dbg !32
  %589 = getelementptr half, ptr addrspace(3) %576, i64 %230, !dbg !32
  %590 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %589) #2, !dbg !32
  %591 = extractvalue { i32, i32, i32, i32 } %590, 0, !dbg !32
  %592 = extractvalue { i32, i32, i32, i32 } %590, 1, !dbg !32
  %593 = extractvalue { i32, i32, i32, i32 } %590, 2, !dbg !32
  %594 = extractvalue { i32, i32, i32, i32 } %590, 3, !dbg !32
  %595 = getelementptr half, ptr addrspace(3) %576, i64 %232, !dbg !32
  %596 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %595) #2, !dbg !32
  %597 = extractvalue { i32, i32, i32, i32 } %596, 0, !dbg !32
  %598 = extractvalue { i32, i32, i32, i32 } %596, 1, !dbg !32
  %599 = extractvalue { i32, i32, i32, i32 } %596, 2, !dbg !32
  %600 = extractvalue { i32, i32, i32, i32 } %596, 3, !dbg !32
  %601 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %485, float %486, float %487, float %488, i32 %449, i32 %450, i32 %451, i32 %452, i32 %462, i32 %463) #2, !dbg !38
  %602 = extractvalue { float, float, float, float } %601, 0, !dbg !38
  %603 = extractvalue { float, float, float, float } %601, 1, !dbg !38
  %604 = extractvalue { float, float, float, float } %601, 2, !dbg !38
  %605 = extractvalue { float, float, float, float } %601, 3, !dbg !38
  %606 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %490, float %491, float %492, float %493, i32 %449, i32 %450, i32 %451, i32 %452, i32 %464, i32 %465) #2, !dbg !38
  %607 = extractvalue { float, float, float, float } %606, 0, !dbg !38
  %608 = extractvalue { float, float, float, float } %606, 1, !dbg !38
  %609 = extractvalue { float, float, float, float } %606, 2, !dbg !38
  %610 = extractvalue { float, float, float, float } %606, 3, !dbg !38
  %611 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %495, float %496, float %497, float %498, i32 %449, i32 %450, i32 %451, i32 %452, i32 %468, i32 %469) #2, !dbg !38
  %612 = extractvalue { float, float, float, float } %611, 0, !dbg !38
  %613 = extractvalue { float, float, float, float } %611, 1, !dbg !38
  %614 = extractvalue { float, float, float, float } %611, 2, !dbg !38
  %615 = extractvalue { float, float, float, float } %611, 3, !dbg !38
  %616 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %500, float %501, float %502, float %503, i32 %449, i32 %450, i32 %451, i32 %452, i32 %470, i32 %471) #2, !dbg !38
  %617 = extractvalue { float, float, float, float } %616, 0, !dbg !38
  %618 = extractvalue { float, float, float, float } %616, 1, !dbg !38
  %619 = extractvalue { float, float, float, float } %616, 2, !dbg !38
  %620 = extractvalue { float, float, float, float } %616, 3, !dbg !38
  %621 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %505, float %506, float %507, float %508, i32 %449, i32 %450, i32 %451, i32 %452, i32 %474, i32 %475) #2, !dbg !38
  %622 = extractvalue { float, float, float, float } %621, 0, !dbg !38
  %623 = extractvalue { float, float, float, float } %621, 1, !dbg !38
  %624 = extractvalue { float, float, float, float } %621, 2, !dbg !38
  %625 = extractvalue { float, float, float, float } %621, 3, !dbg !38
  %626 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %510, float %511, float %512, float %513, i32 %449, i32 %450, i32 %451, i32 %452, i32 %476, i32 %477) #2, !dbg !38
  %627 = extractvalue { float, float, float, float } %626, 0, !dbg !38
  %628 = extractvalue { float, float, float, float } %626, 1, !dbg !38
  %629 = extractvalue { float, float, float, float } %626, 2, !dbg !38
  %630 = extractvalue { float, float, float, float } %626, 3, !dbg !38
  %631 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %515, float %516, float %517, float %518, i32 %449, i32 %450, i32 %451, i32 %452, i32 %480, i32 %481) #2, !dbg !38
  %632 = extractvalue { float, float, float, float } %631, 0, !dbg !38
  %633 = extractvalue { float, float, float, float } %631, 1, !dbg !38
  %634 = extractvalue { float, float, float, float } %631, 2, !dbg !38
  %635 = extractvalue { float, float, float, float } %631, 3, !dbg !38
  %636 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %520, float %521, float %522, float %523, i32 %449, i32 %450, i32 %451, i32 %452, i32 %482, i32 %483) #2, !dbg !38
  %637 = extractvalue { float, float, float, float } %636, 0, !dbg !38
  %638 = extractvalue { float, float, float, float } %636, 1, !dbg !38
  %639 = extractvalue { float, float, float, float } %636, 2, !dbg !38
  %640 = extractvalue { float, float, float, float } %636, 3, !dbg !38
  %641 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %525, float %526, float %527, float %528, i32 %455, i32 %456, i32 %457, i32 %458, i32 %462, i32 %463) #2, !dbg !38
  %642 = extractvalue { float, float, float, float } %641, 0, !dbg !38
  %643 = extractvalue { float, float, float, float } %641, 1, !dbg !38
  %644 = extractvalue { float, float, float, float } %641, 2, !dbg !38
  %645 = extractvalue { float, float, float, float } %641, 3, !dbg !38
  %646 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %530, float %531, float %532, float %533, i32 %455, i32 %456, i32 %457, i32 %458, i32 %464, i32 %465) #2, !dbg !38
  %647 = extractvalue { float, float, float, float } %646, 0, !dbg !38
  %648 = extractvalue { float, float, float, float } %646, 1, !dbg !38
  %649 = extractvalue { float, float, float, float } %646, 2, !dbg !38
  %650 = extractvalue { float, float, float, float } %646, 3, !dbg !38
  %651 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %535, float %536, float %537, float %538, i32 %455, i32 %456, i32 %457, i32 %458, i32 %468, i32 %469) #2, !dbg !38
  %652 = extractvalue { float, float, float, float } %651, 0, !dbg !38
  %653 = extractvalue { float, float, float, float } %651, 1, !dbg !38
  %654 = extractvalue { float, float, float, float } %651, 2, !dbg !38
  %655 = extractvalue { float, float, float, float } %651, 3, !dbg !38
  %656 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %540, float %541, float %542, float %543, i32 %455, i32 %456, i32 %457, i32 %458, i32 %470, i32 %471) #2, !dbg !38
  %657 = extractvalue { float, float, float, float } %656, 0, !dbg !38
  %658 = extractvalue { float, float, float, float } %656, 1, !dbg !38
  %659 = extractvalue { float, float, float, float } %656, 2, !dbg !38
  %660 = extractvalue { float, float, float, float } %656, 3, !dbg !38
  %661 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %545, float %546, float %547, float %548, i32 %455, i32 %456, i32 %457, i32 %458, i32 %474, i32 %475) #2, !dbg !38
  %662 = extractvalue { float, float, float, float } %661, 0, !dbg !38
  %663 = extractvalue { float, float, float, float } %661, 1, !dbg !38
  %664 = extractvalue { float, float, float, float } %661, 2, !dbg !38
  %665 = extractvalue { float, float, float, float } %661, 3, !dbg !38
  %666 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %550, float %551, float %552, float %553, i32 %455, i32 %456, i32 %457, i32 %458, i32 %476, i32 %477) #2, !dbg !38
  %667 = extractvalue { float, float, float, float } %666, 0, !dbg !38
  %668 = extractvalue { float, float, float, float } %666, 1, !dbg !38
  %669 = extractvalue { float, float, float, float } %666, 2, !dbg !38
  %670 = extractvalue { float, float, float, float } %666, 3, !dbg !38
  %671 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %555, float %556, float %557, float %558, i32 %455, i32 %456, i32 %457, i32 %458, i32 %480, i32 %481) #2, !dbg !38
  %672 = extractvalue { float, float, float, float } %671, 0, !dbg !38
  %673 = extractvalue { float, float, float, float } %671, 1, !dbg !38
  %674 = extractvalue { float, float, float, float } %671, 2, !dbg !38
  %675 = extractvalue { float, float, float, float } %671, 3, !dbg !38
  %676 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %560, float %561, float %562, float %563, i32 %455, i32 %456, i32 %457, i32 %458, i32 %482, i32 %483) #2, !dbg !38
  %677 = extractvalue { float, float, float, float } %676, 0, !dbg !38
  %678 = extractvalue { float, float, float, float } %676, 1, !dbg !38
  %679 = extractvalue { float, float, float, float } %676, 2, !dbg !38
  %680 = extractvalue { float, float, float, float } %676, 3, !dbg !38
  %681 = add <2 x i32> %304, splat (i32 1), !dbg !28
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !33
  %682 = shl i32 %indvars.iv.tr, 6, !dbg !33
  %683 = add i32 %682, 128, !dbg !33
  %684 = sub i32 %4, %683, !dbg !33
  %685 = icmp slt i32 %33, %684, !dbg !29
  %686 = sext i32 %683 to i64, !dbg !34
  %687 = getelementptr half, ptr addrspace(1) %60, i64 %686, !dbg !34
  %688 = getelementptr half, ptr addrspace(1) %61, i64 %686, !dbg !34
  %689 = getelementptr half, ptr addrspace(1) %62, i64 %686, !dbg !34
  %690 = getelementptr half, ptr addrspace(1) %63, i64 %686, !dbg !34
  %691 = getelementptr half, ptr addrspace(1) %64, i64 %686, !dbg !34
  %692 = getelementptr half, ptr addrspace(1) %65, i64 %686, !dbg !34
  %693 = getelementptr half, ptr addrspace(1) %66, i64 %686, !dbg !34
  %694 = getelementptr half, ptr addrspace(1) %67, i64 %686, !dbg !34
  %695 = and i1 %329, %685, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %696 = select i1 %695, i32 16, i32 0, !dbg !30
  %697 = icmp slt i32 %15, %684, !dbg !31
  %698 = icmp slt i32 %16, %684, !dbg !31
  %699 = icmp slt i32 %17, %684, !dbg !31
  %700 = icmp slt i32 %18, %684, !dbg !31
  %701 = mul i32 %683, %7, !dbg !35
  %702 = sext i32 %701 to i64, !dbg !36
  %703 = getelementptr half, ptr addrspace(1) %81, i64 %702, !dbg !36
  %704 = getelementptr half, ptr addrspace(1) %82, i64 %702, !dbg !36
  %705 = getelementptr half, ptr addrspace(1) %83, i64 %702, !dbg !36
  %706 = getelementptr half, ptr addrspace(1) %84, i64 %702, !dbg !36
  %707 = and i1 %329, %697, !dbg !28
  %708 = and i1 %329, %698, !dbg !28
  %709 = and i1 %329, %699, !dbg !28
  %710 = and i1 %329, %700, !dbg !28
  %711 = select i1 %707, i32 16, i32 0, !dbg !32
  %712 = select i1 %708, i32 16, i32 0, !dbg !32
  %713 = select i1 %709, i32 16, i32 0, !dbg !32
  %714 = select i1 %710, i32 16, i32 0, !dbg !32
  %715 = icmp slt <2 x i32> %681, splat (i32 2), !dbg !28
  %716 = select <2 x i1> %715, <2 x i32> %681, <2 x i32> zeroinitializer, !dbg !28
  %717 = extractelement <2 x i32> %716, i64 1, !dbg !32
  %718 = shl i32 %717, 13, !dbg !30
  %719 = sext i32 %718 to i64, !dbg !30
  %720 = getelementptr half, ptr addrspace(3) @global_smem, i64 %719, !dbg !30
  %721 = getelementptr inbounds half, ptr addrspace(3) %720, i64 %93, !dbg !30
  %722 = getelementptr inbounds half, ptr addrspace(3) %720, i64 %96, !dbg !30
  %723 = getelementptr inbounds half, ptr addrspace(3) %720, i64 %99, !dbg !30
  %724 = getelementptr inbounds half, ptr addrspace(3) %720, i64 %102, !dbg !30
  %725 = getelementptr inbounds half, ptr addrspace(3) %720, i64 %105, !dbg !30
  %726 = getelementptr inbounds half, ptr addrspace(3) %720, i64 %108, !dbg !30
  %727 = getelementptr inbounds half, ptr addrspace(3) %720, i64 %111, !dbg !30
  %728 = getelementptr inbounds half, ptr addrspace(3) %720, i64 %114, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %721, ptr addrspace(1) %687, i32 %696, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %722, ptr addrspace(1) %688, i32 %696, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %723, ptr addrspace(1) %689, i32 %696, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %724, ptr addrspace(1) %690, i32 %696, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %725, ptr addrspace(1) %691, i32 %696, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %726, ptr addrspace(1) %692, i32 %696, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %727, ptr addrspace(1) %693, i32 %696, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %728, ptr addrspace(1) %694, i32 %696, i1 true) #2, !dbg !30
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !30
  %729 = shl i32 %717, 12, !dbg !32
  %730 = sext i32 %729 to i64, !dbg !32
  %731 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %730, !dbg !32
  %732 = getelementptr inbounds half, ptr addrspace(3) %731, i64 %93, !dbg !32
  %733 = getelementptr inbounds half, ptr addrspace(3) %731, i64 %96, !dbg !32
  %734 = getelementptr inbounds half, ptr addrspace(3) %731, i64 %99, !dbg !32
  %735 = getelementptr inbounds half, ptr addrspace(3) %731, i64 %102, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %732, ptr addrspace(1) %703, i32 %711, i1 true) #2, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %733, ptr addrspace(1) %704, i32 %712, i1 true) #2, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %734, ptr addrspace(1) %705, i32 %713, i1 true) #2, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %735, ptr addrspace(1) %706, i32 %714, i1 true) #2, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !32
  %736 = extractelement <2 x i32> %716, i64 0, !dbg !32
  %737 = shl i32 %736, 13, !dbg !30
  %738 = sext i32 %737 to i64, !dbg !30
  %739 = getelementptr half, ptr addrspace(3) @global_smem, i64 %738, !dbg !30
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %740 = shl i32 %736, 12, !dbg !32
  %741 = sext i32 %740 to i64, !dbg !32
  %742 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %741, !dbg !32
  %743 = getelementptr half, ptr addrspace(3) %739, i64 %187, !dbg !30
  %744 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %743) #2, !dbg !30
  %745 = getelementptr i8, ptr addrspace(3) %743, i64 8192, !dbg !30
  %746 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %745) #2, !dbg !30
  %747 = getelementptr half, ptr addrspace(3) %742, i64 %194, !dbg !32
  %748 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %747) #2, !dbg !32
  %749 = getelementptr half, ptr addrspace(3) %742, i64 %201, !dbg !32
  %750 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %749) #2, !dbg !32
  %751 = getelementptr half, ptr addrspace(3) %742, i64 %208, !dbg !32
  %752 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %751) #2, !dbg !32
  %753 = getelementptr half, ptr addrspace(3) %742, i64 %215, !dbg !32
  %754 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %753) #2, !dbg !32
  %755 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %602, float %603, float %604, float %605, i32 %566, i32 %567, i32 %568, i32 %569, i32 %579, i32 %580) #2, !dbg !38
  %756 = extractvalue { float, float, float, float } %755, 0, !dbg !38
  %757 = extractvalue { float, float, float, float } %755, 1, !dbg !38
  %758 = extractvalue { float, float, float, float } %755, 2, !dbg !38
  %759 = extractvalue { float, float, float, float } %755, 3, !dbg !38
  %760 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %607, float %608, float %609, float %610, i32 %566, i32 %567, i32 %568, i32 %569, i32 %581, i32 %582) #2, !dbg !38
  %761 = extractvalue { float, float, float, float } %760, 0, !dbg !38
  %762 = extractvalue { float, float, float, float } %760, 1, !dbg !38
  %763 = extractvalue { float, float, float, float } %760, 2, !dbg !38
  %764 = extractvalue { float, float, float, float } %760, 3, !dbg !38
  %765 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %612, float %613, float %614, float %615, i32 %566, i32 %567, i32 %568, i32 %569, i32 %585, i32 %586) #2, !dbg !38
  %766 = extractvalue { float, float, float, float } %765, 0, !dbg !38
  %767 = extractvalue { float, float, float, float } %765, 1, !dbg !38
  %768 = extractvalue { float, float, float, float } %765, 2, !dbg !38
  %769 = extractvalue { float, float, float, float } %765, 3, !dbg !38
  %770 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %617, float %618, float %619, float %620, i32 %566, i32 %567, i32 %568, i32 %569, i32 %587, i32 %588) #2, !dbg !38
  %771 = extractvalue { float, float, float, float } %770, 0, !dbg !38
  %772 = extractvalue { float, float, float, float } %770, 1, !dbg !38
  %773 = extractvalue { float, float, float, float } %770, 2, !dbg !38
  %774 = extractvalue { float, float, float, float } %770, 3, !dbg !38
  %775 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %622, float %623, float %624, float %625, i32 %566, i32 %567, i32 %568, i32 %569, i32 %591, i32 %592) #2, !dbg !38
  %776 = extractvalue { float, float, float, float } %775, 0, !dbg !38
  %777 = extractvalue { float, float, float, float } %775, 1, !dbg !38
  %778 = extractvalue { float, float, float, float } %775, 2, !dbg !38
  %779 = extractvalue { float, float, float, float } %775, 3, !dbg !38
  %780 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %627, float %628, float %629, float %630, i32 %566, i32 %567, i32 %568, i32 %569, i32 %593, i32 %594) #2, !dbg !38
  %781 = extractvalue { float, float, float, float } %780, 0, !dbg !38
  %782 = extractvalue { float, float, float, float } %780, 1, !dbg !38
  %783 = extractvalue { float, float, float, float } %780, 2, !dbg !38
  %784 = extractvalue { float, float, float, float } %780, 3, !dbg !38
  %785 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %632, float %633, float %634, float %635, i32 %566, i32 %567, i32 %568, i32 %569, i32 %597, i32 %598) #2, !dbg !38
  %786 = extractvalue { float, float, float, float } %785, 0, !dbg !38
  %787 = extractvalue { float, float, float, float } %785, 1, !dbg !38
  %788 = extractvalue { float, float, float, float } %785, 2, !dbg !38
  %789 = extractvalue { float, float, float, float } %785, 3, !dbg !38
  %790 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %637, float %638, float %639, float %640, i32 %566, i32 %567, i32 %568, i32 %569, i32 %599, i32 %600) #2, !dbg !38
  %791 = extractvalue { float, float, float, float } %790, 0, !dbg !38
  %792 = extractvalue { float, float, float, float } %790, 1, !dbg !38
  %793 = extractvalue { float, float, float, float } %790, 2, !dbg !38
  %794 = extractvalue { float, float, float, float } %790, 3, !dbg !38
  %795 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %642, float %643, float %644, float %645, i32 %572, i32 %573, i32 %574, i32 %575, i32 %579, i32 %580) #2, !dbg !38
  %796 = extractvalue { float, float, float, float } %795, 0, !dbg !38
  %797 = extractvalue { float, float, float, float } %795, 1, !dbg !38
  %798 = extractvalue { float, float, float, float } %795, 2, !dbg !38
  %799 = extractvalue { float, float, float, float } %795, 3, !dbg !38
  %800 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %647, float %648, float %649, float %650, i32 %572, i32 %573, i32 %574, i32 %575, i32 %581, i32 %582) #2, !dbg !38
  %801 = extractvalue { float, float, float, float } %800, 0, !dbg !38
  %802 = extractvalue { float, float, float, float } %800, 1, !dbg !38
  %803 = extractvalue { float, float, float, float } %800, 2, !dbg !38
  %804 = extractvalue { float, float, float, float } %800, 3, !dbg !38
  %805 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %652, float %653, float %654, float %655, i32 %572, i32 %573, i32 %574, i32 %575, i32 %585, i32 %586) #2, !dbg !38
  %806 = extractvalue { float, float, float, float } %805, 0, !dbg !38
  %807 = extractvalue { float, float, float, float } %805, 1, !dbg !38
  %808 = extractvalue { float, float, float, float } %805, 2, !dbg !38
  %809 = extractvalue { float, float, float, float } %805, 3, !dbg !38
  %810 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %657, float %658, float %659, float %660, i32 %572, i32 %573, i32 %574, i32 %575, i32 %587, i32 %588) #2, !dbg !38
  %811 = extractvalue { float, float, float, float } %810, 0, !dbg !38
  %812 = extractvalue { float, float, float, float } %810, 1, !dbg !38
  %813 = extractvalue { float, float, float, float } %810, 2, !dbg !38
  %814 = extractvalue { float, float, float, float } %810, 3, !dbg !38
  %815 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %662, float %663, float %664, float %665, i32 %572, i32 %573, i32 %574, i32 %575, i32 %591, i32 %592) #2, !dbg !38
  %816 = extractvalue { float, float, float, float } %815, 0, !dbg !38
  %817 = extractvalue { float, float, float, float } %815, 1, !dbg !38
  %818 = extractvalue { float, float, float, float } %815, 2, !dbg !38
  %819 = extractvalue { float, float, float, float } %815, 3, !dbg !38
  %820 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %667, float %668, float %669, float %670, i32 %572, i32 %573, i32 %574, i32 %575, i32 %593, i32 %594) #2, !dbg !38
  %821 = extractvalue { float, float, float, float } %820, 0, !dbg !38
  %822 = extractvalue { float, float, float, float } %820, 1, !dbg !38
  %823 = extractvalue { float, float, float, float } %820, 2, !dbg !38
  %824 = extractvalue { float, float, float, float } %820, 3, !dbg !38
  %825 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %672, float %673, float %674, float %675, i32 %572, i32 %573, i32 %574, i32 %575, i32 %597, i32 %598) #2, !dbg !38
  %826 = extractvalue { float, float, float, float } %825, 0, !dbg !38
  %827 = extractvalue { float, float, float, float } %825, 1, !dbg !38
  %828 = extractvalue { float, float, float, float } %825, 2, !dbg !38
  %829 = extractvalue { float, float, float, float } %825, 3, !dbg !38
  %830 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %677, float %678, float %679, float %680, i32 %572, i32 %573, i32 %574, i32 %575, i32 %599, i32 %600) #2, !dbg !38
  %831 = extractvalue { float, float, float, float } %830, 0, !dbg !38
  %832 = extractvalue { float, float, float, float } %830, 1, !dbg !38
  %833 = extractvalue { float, float, float, float } %830, 2, !dbg !38
  %834 = extractvalue { float, float, float, float } %830, 3, !dbg !38
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !28
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !28
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %237, !dbg !28

._crit_edge.loopexit:                             ; preds = %237
  %835 = bitcast float %756 to i32, !dbg !39
  %836 = bitcast float %757 to i32, !dbg !39
  %837 = bitcast float %758 to i32, !dbg !39
  %838 = bitcast float %759 to i32, !dbg !39
  %839 = bitcast float %761 to i32, !dbg !39
  %840 = bitcast float %762 to i32, !dbg !39
  %841 = bitcast float %763 to i32, !dbg !39
  %842 = bitcast float %764 to i32, !dbg !39
  %843 = bitcast float %766 to i32, !dbg !39
  %844 = bitcast float %767 to i32, !dbg !39
  %845 = bitcast float %768 to i32, !dbg !39
  %846 = bitcast float %769 to i32, !dbg !39
  %847 = bitcast float %771 to i32, !dbg !39
  %848 = bitcast float %772 to i32, !dbg !39
  %849 = bitcast float %773 to i32, !dbg !39
  %850 = bitcast float %774 to i32, !dbg !39
  %851 = bitcast float %776 to i32, !dbg !39
  %852 = bitcast float %777 to i32, !dbg !39
  %853 = bitcast float %778 to i32, !dbg !39
  %854 = bitcast float %779 to i32, !dbg !39
  %855 = bitcast float %781 to i32, !dbg !39
  %856 = bitcast float %782 to i32, !dbg !39
  %857 = bitcast float %783 to i32, !dbg !39
  %858 = bitcast float %784 to i32, !dbg !39
  %859 = bitcast float %786 to i32, !dbg !39
  %860 = bitcast float %787 to i32, !dbg !39
  %861 = bitcast float %788 to i32, !dbg !39
  %862 = bitcast float %789 to i32, !dbg !39
  %863 = bitcast float %791 to i32, !dbg !39
  %864 = bitcast float %792 to i32, !dbg !39
  %865 = bitcast float %793 to i32, !dbg !39
  %866 = bitcast float %794 to i32, !dbg !39
  %867 = bitcast float %796 to i32, !dbg !39
  %868 = bitcast float %797 to i32, !dbg !39
  %869 = bitcast float %798 to i32, !dbg !39
  %870 = bitcast float %799 to i32, !dbg !39
  %871 = bitcast float %801 to i32, !dbg !39
  %872 = bitcast float %802 to i32, !dbg !39
  %873 = bitcast float %803 to i32, !dbg !39
  %874 = bitcast float %804 to i32, !dbg !39
  %875 = bitcast float %806 to i32, !dbg !39
  %876 = bitcast float %807 to i32, !dbg !39
  %877 = bitcast float %808 to i32, !dbg !39
  %878 = bitcast float %809 to i32, !dbg !39
  %879 = bitcast float %811 to i32, !dbg !39
  %880 = bitcast float %812 to i32, !dbg !39
  %881 = bitcast float %813 to i32, !dbg !39
  %882 = bitcast float %814 to i32, !dbg !39
  %883 = bitcast float %816 to i32, !dbg !39
  %884 = bitcast float %817 to i32, !dbg !39
  %885 = bitcast float %818 to i32, !dbg !39
  %886 = bitcast float %819 to i32, !dbg !39
  %887 = bitcast float %821 to i32, !dbg !39
  %888 = bitcast float %822 to i32, !dbg !39
  %889 = bitcast float %823 to i32, !dbg !39
  %890 = bitcast float %824 to i32, !dbg !39
  %891 = bitcast float %826 to i32, !dbg !39
  %892 = bitcast float %827 to i32, !dbg !39
  %893 = bitcast float %828 to i32, !dbg !39
  %894 = bitcast float %829 to i32, !dbg !39
  %895 = bitcast float %831 to i32, !dbg !39
  %896 = bitcast float %832 to i32, !dbg !39
  %897 = bitcast float %833 to i32, !dbg !39
  %898 = bitcast float %834 to i32, !dbg !39
  br label %._crit_edge, !dbg !16

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %899 = phi i32 [ 0, %9 ], [ %835, %._crit_edge.loopexit ]
  %900 = phi i32 [ 0, %9 ], [ %836, %._crit_edge.loopexit ]
  %901 = phi i32 [ 0, %9 ], [ %837, %._crit_edge.loopexit ]
  %902 = phi i32 [ 0, %9 ], [ %838, %._crit_edge.loopexit ]
  %903 = phi i32 [ 0, %9 ], [ %839, %._crit_edge.loopexit ]
  %904 = phi i32 [ 0, %9 ], [ %840, %._crit_edge.loopexit ]
  %905 = phi i32 [ 0, %9 ], [ %841, %._crit_edge.loopexit ]
  %906 = phi i32 [ 0, %9 ], [ %842, %._crit_edge.loopexit ]
  %907 = phi i32 [ 0, %9 ], [ %843, %._crit_edge.loopexit ]
  %908 = phi i32 [ 0, %9 ], [ %844, %._crit_edge.loopexit ]
  %909 = phi i32 [ 0, %9 ], [ %845, %._crit_edge.loopexit ]
  %910 = phi i32 [ 0, %9 ], [ %846, %._crit_edge.loopexit ]
  %911 = phi i32 [ 0, %9 ], [ %847, %._crit_edge.loopexit ]
  %912 = phi i32 [ 0, %9 ], [ %848, %._crit_edge.loopexit ]
  %913 = phi i32 [ 0, %9 ], [ %849, %._crit_edge.loopexit ]
  %914 = phi i32 [ 0, %9 ], [ %850, %._crit_edge.loopexit ]
  %915 = phi i32 [ 0, %9 ], [ %851, %._crit_edge.loopexit ]
  %916 = phi i32 [ 0, %9 ], [ %852, %._crit_edge.loopexit ]
  %917 = phi i32 [ 0, %9 ], [ %853, %._crit_edge.loopexit ]
  %918 = phi i32 [ 0, %9 ], [ %854, %._crit_edge.loopexit ]
  %919 = phi i32 [ 0, %9 ], [ %855, %._crit_edge.loopexit ]
  %920 = phi i32 [ 0, %9 ], [ %856, %._crit_edge.loopexit ]
  %921 = phi i32 [ 0, %9 ], [ %857, %._crit_edge.loopexit ]
  %922 = phi i32 [ 0, %9 ], [ %858, %._crit_edge.loopexit ]
  %923 = phi i32 [ 0, %9 ], [ %859, %._crit_edge.loopexit ]
  %924 = phi i32 [ 0, %9 ], [ %860, %._crit_edge.loopexit ]
  %925 = phi i32 [ 0, %9 ], [ %861, %._crit_edge.loopexit ]
  %926 = phi i32 [ 0, %9 ], [ %862, %._crit_edge.loopexit ]
  %927 = phi i32 [ 0, %9 ], [ %863, %._crit_edge.loopexit ]
  %928 = phi i32 [ 0, %9 ], [ %864, %._crit_edge.loopexit ]
  %929 = phi i32 [ 0, %9 ], [ %865, %._crit_edge.loopexit ]
  %930 = phi i32 [ 0, %9 ], [ %866, %._crit_edge.loopexit ]
  %931 = phi i32 [ 0, %9 ], [ %867, %._crit_edge.loopexit ]
  %932 = phi i32 [ 0, %9 ], [ %868, %._crit_edge.loopexit ]
  %933 = phi i32 [ 0, %9 ], [ %869, %._crit_edge.loopexit ]
  %934 = phi i32 [ 0, %9 ], [ %870, %._crit_edge.loopexit ]
  %935 = phi i32 [ 0, %9 ], [ %871, %._crit_edge.loopexit ]
  %936 = phi i32 [ 0, %9 ], [ %872, %._crit_edge.loopexit ]
  %937 = phi i32 [ 0, %9 ], [ %873, %._crit_edge.loopexit ]
  %938 = phi i32 [ 0, %9 ], [ %874, %._crit_edge.loopexit ]
  %939 = phi i32 [ 0, %9 ], [ %875, %._crit_edge.loopexit ]
  %940 = phi i32 [ 0, %9 ], [ %876, %._crit_edge.loopexit ]
  %941 = phi i32 [ 0, %9 ], [ %877, %._crit_edge.loopexit ]
  %942 = phi i32 [ 0, %9 ], [ %878, %._crit_edge.loopexit ]
  %943 = phi i32 [ 0, %9 ], [ %879, %._crit_edge.loopexit ]
  %944 = phi i32 [ 0, %9 ], [ %880, %._crit_edge.loopexit ]
  %945 = phi i32 [ 0, %9 ], [ %881, %._crit_edge.loopexit ]
  %946 = phi i32 [ 0, %9 ], [ %882, %._crit_edge.loopexit ]
  %947 = phi i32 [ 0, %9 ], [ %883, %._crit_edge.loopexit ]
  %948 = phi i32 [ 0, %9 ], [ %884, %._crit_edge.loopexit ]
  %949 = phi i32 [ 0, %9 ], [ %885, %._crit_edge.loopexit ]
  %950 = phi i32 [ 0, %9 ], [ %886, %._crit_edge.loopexit ]
  %951 = phi i32 [ 0, %9 ], [ %887, %._crit_edge.loopexit ]
  %952 = phi i32 [ 0, %9 ], [ %888, %._crit_edge.loopexit ]
  %953 = phi i32 [ 0, %9 ], [ %889, %._crit_edge.loopexit ]
  %954 = phi i32 [ 0, %9 ], [ %890, %._crit_edge.loopexit ]
  %955 = phi i32 [ 0, %9 ], [ %891, %._crit_edge.loopexit ]
  %956 = phi i32 [ 0, %9 ], [ %892, %._crit_edge.loopexit ]
  %957 = phi i32 [ 0, %9 ], [ %893, %._crit_edge.loopexit ]
  %958 = phi i32 [ 0, %9 ], [ %894, %._crit_edge.loopexit ]
  %959 = phi i32 [ 0, %9 ], [ %895, %._crit_edge.loopexit ]
  %960 = phi i32 [ 0, %9 ], [ %896, %._crit_edge.loopexit ]
  %961 = phi i32 [ 0, %9 ], [ %897, %._crit_edge.loopexit ]
  %962 = phi i32 [ 0, %9 ], [ %898, %._crit_edge.loopexit ]
  %963 = shl i32 %13, 2, !dbg !16
  %964 = and i32 %963, 60, !dbg !16
  %965 = or disjoint i32 %31, %964, !dbg !17
  %966 = and i32 %177, 7, !dbg !13
  %967 = or disjoint i32 %966, %12, !dbg !14
  %968 = or disjoint i32 %967, 120, !dbg !14
  %969 = or disjoint i32 %967, 112, !dbg !14
  %970 = or disjoint i32 %967, 104, !dbg !14
  %971 = or disjoint i32 %967, 96, !dbg !14
  %972 = or disjoint i32 %967, 88, !dbg !14
  %973 = or disjoint i32 %967, 80, !dbg !14
  %974 = or disjoint i32 %967, 72, !dbg !14
  %975 = or disjoint i32 %967, 64, !dbg !14
  %976 = or disjoint i32 %967, 56, !dbg !14
  %977 = or disjoint i32 %967, 48, !dbg !14
  %978 = or disjoint i32 %967, 40, !dbg !14
  %979 = or disjoint i32 %967, 32, !dbg !14
  %980 = or disjoint i32 %967, 24, !dbg !14
  %981 = or disjoint i32 %967, 16, !dbg !14
  %982 = or disjoint i32 %967, 8, !dbg !14
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %983 = mul i32 %967, %8, !dbg !40
  %984 = mul i32 %982, %8, !dbg !40
  %985 = mul i32 %981, %8, !dbg !40
  %986 = mul i32 %980, %8, !dbg !40
  %987 = mul i32 %979, %8, !dbg !40
  %988 = mul i32 %978, %8, !dbg !40
  %989 = mul i32 %977, %8, !dbg !40
  %990 = mul i32 %976, %8, !dbg !40
  %991 = mul i32 %975, %8, !dbg !40
  %992 = mul i32 %974, %8, !dbg !40
  %993 = mul i32 %973, %8, !dbg !40
  %994 = mul i32 %972, %8, !dbg !40
  %995 = mul i32 %971, %8, !dbg !40
  %996 = mul i32 %970, %8, !dbg !40
  %997 = mul i32 %969, %8, !dbg !40
  %998 = mul i32 %968, %8, !dbg !40
  %999 = sext i32 %983 to i64, !dbg !41
  %1000 = getelementptr float, ptr addrspace(1) %2, i64 %999, !dbg !41
  %1001 = sext i32 %984 to i64, !dbg !41
  %1002 = getelementptr float, ptr addrspace(1) %2, i64 %1001, !dbg !41
  %1003 = sext i32 %985 to i64, !dbg !41
  %1004 = getelementptr float, ptr addrspace(1) %2, i64 %1003, !dbg !41
  %1005 = sext i32 %986 to i64, !dbg !41
  %1006 = getelementptr float, ptr addrspace(1) %2, i64 %1005, !dbg !41
  %1007 = sext i32 %987 to i64, !dbg !41
  %1008 = getelementptr float, ptr addrspace(1) %2, i64 %1007, !dbg !41
  %1009 = sext i32 %988 to i64, !dbg !41
  %1010 = getelementptr float, ptr addrspace(1) %2, i64 %1009, !dbg !41
  %1011 = sext i32 %989 to i64, !dbg !41
  %1012 = getelementptr float, ptr addrspace(1) %2, i64 %1011, !dbg !41
  %1013 = sext i32 %990 to i64, !dbg !41
  %1014 = getelementptr float, ptr addrspace(1) %2, i64 %1013, !dbg !41
  %1015 = sext i32 %991 to i64, !dbg !41
  %1016 = getelementptr float, ptr addrspace(1) %2, i64 %1015, !dbg !41
  %1017 = sext i32 %992 to i64, !dbg !41
  %1018 = getelementptr float, ptr addrspace(1) %2, i64 %1017, !dbg !41
  %1019 = sext i32 %993 to i64, !dbg !41
  %1020 = getelementptr float, ptr addrspace(1) %2, i64 %1019, !dbg !41
  %1021 = sext i32 %994 to i64, !dbg !41
  %1022 = getelementptr float, ptr addrspace(1) %2, i64 %1021, !dbg !41
  %1023 = sext i32 %995 to i64, !dbg !41
  %1024 = getelementptr float, ptr addrspace(1) %2, i64 %1023, !dbg !41
  %1025 = sext i32 %996 to i64, !dbg !41
  %1026 = getelementptr float, ptr addrspace(1) %2, i64 %1025, !dbg !41
  %1027 = sext i32 %997 to i64, !dbg !41
  %1028 = getelementptr float, ptr addrspace(1) %2, i64 %1027, !dbg !41
  %1029 = sext i32 %998 to i64, !dbg !41
  %1030 = getelementptr float, ptr addrspace(1) %2, i64 %1029, !dbg !41
  %1031 = sext i32 %965 to i64, !dbg !42
  %1032 = getelementptr float, ptr addrspace(1) %1000, i64 %1031, !dbg !42
  %1033 = getelementptr float, ptr addrspace(1) %1002, i64 %1031, !dbg !42
  %1034 = getelementptr float, ptr addrspace(1) %1004, i64 %1031, !dbg !42
  %1035 = getelementptr float, ptr addrspace(1) %1006, i64 %1031, !dbg !42
  %1036 = getelementptr float, ptr addrspace(1) %1008, i64 %1031, !dbg !42
  %1037 = getelementptr float, ptr addrspace(1) %1010, i64 %1031, !dbg !42
  %1038 = getelementptr float, ptr addrspace(1) %1012, i64 %1031, !dbg !42
  %1039 = getelementptr float, ptr addrspace(1) %1014, i64 %1031, !dbg !42
  %1040 = getelementptr float, ptr addrspace(1) %1016, i64 %1031, !dbg !42
  %1041 = getelementptr float, ptr addrspace(1) %1018, i64 %1031, !dbg !42
  %1042 = getelementptr float, ptr addrspace(1) %1020, i64 %1031, !dbg !42
  %1043 = getelementptr float, ptr addrspace(1) %1022, i64 %1031, !dbg !42
  %1044 = getelementptr float, ptr addrspace(1) %1024, i64 %1031, !dbg !42
  %1045 = getelementptr float, ptr addrspace(1) %1026, i64 %1031, !dbg !42
  %1046 = getelementptr float, ptr addrspace(1) %1028, i64 %1031, !dbg !42
  %1047 = getelementptr float, ptr addrspace(1) %1030, i64 %1031, !dbg !42
  %1048 = icmp slt i32 %967, %3, !dbg !43
  %1049 = icmp slt i32 %982, %3, !dbg !43
  %1050 = icmp slt i32 %981, %3, !dbg !43
  %1051 = icmp slt i32 %980, %3, !dbg !43
  %1052 = icmp slt i32 %979, %3, !dbg !43
  %1053 = icmp slt i32 %978, %3, !dbg !43
  %1054 = icmp slt i32 %977, %3, !dbg !43
  %1055 = icmp slt i32 %976, %3, !dbg !43
  %1056 = icmp slt i32 %975, %3, !dbg !43
  %1057 = icmp slt i32 %974, %3, !dbg !43
  %1058 = icmp slt i32 %973, %3, !dbg !43
  %1059 = icmp slt i32 %972, %3, !dbg !43
  %1060 = icmp slt i32 %971, %3, !dbg !43
  %1061 = icmp slt i32 %970, %3, !dbg !43
  %1062 = icmp slt i32 %969, %3, !dbg !43
  %1063 = icmp slt i32 %968, %3, !dbg !43
  %1064 = icmp slt i32 %965, %5, !dbg !44
  %1065 = and i1 %1064, %1048, !dbg !45
  %1066 = and i1 %1064, %1049, !dbg !45
  %1067 = and i1 %1064, %1050, !dbg !45
  %1068 = and i1 %1064, %1051, !dbg !45
  %1069 = and i1 %1064, %1052, !dbg !45
  %1070 = and i1 %1064, %1053, !dbg !45
  %1071 = and i1 %1064, %1054, !dbg !45
  %1072 = and i1 %1064, %1055, !dbg !45
  %1073 = and i1 %1064, %1056, !dbg !45
  %1074 = and i1 %1064, %1057, !dbg !45
  %1075 = and i1 %1064, %1058, !dbg !45
  %1076 = and i1 %1064, %1059, !dbg !45
  %1077 = and i1 %1064, %1060, !dbg !45
  %1078 = and i1 %1064, %1061, !dbg !45
  %1079 = and i1 %1064, %1062, !dbg !45
  %1080 = and i1 %1064, %1063, !dbg !45
  %1081 = shl i32 %13, 1, !dbg !39
  %1082 = and i32 %1081, 6, !dbg !39
  %1083 = shl i32 %13, 4, !dbg !39
  %1084 = and i32 %1083, 448, !dbg !39
  %1085 = or disjoint i32 %1082, %1084, !dbg !39
  %1086 = shl i32 %13, 5, !dbg !39
  %1087 = and i32 %1086, 3072, !dbg !39
  %1088 = or disjoint i32 %1085, %1087, !dbg !39
  %1089 = and i32 %963, 508, !dbg !39
  %1090 = lshr i32 %1088, 4, !dbg !39
  %1091 = add nuw nsw i32 %1090, %1088, !dbg !39
  %1092 = zext nneg i32 %1091 to i64, !dbg !39
  %1093 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1092, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1093, i32 %899, i32 %900, i1 true) #2, !dbg !39
  %1094 = or disjoint i32 %1088, 512, !dbg !39
  %1095 = lshr i32 %1094, 4, !dbg !39
  %1096 = add nuw nsw i32 %1095, %1094, !dbg !39
  %1097 = zext nneg i32 %1096 to i64, !dbg !39
  %1098 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1097, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1098, i32 %901, i32 %902, i1 true) #2, !dbg !39
  %1099 = or disjoint i32 %1088, 8, !dbg !39
  %1100 = add nuw nsw i32 %1090, %1099, !dbg !39
  %1101 = zext nneg i32 %1100 to i64, !dbg !39
  %1102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1101, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1102, i32 %903, i32 %904, i1 true) #2, !dbg !39
  %1103 = or disjoint i32 %1088, 520, !dbg !39
  %1104 = lshr i32 %1103, 4, !dbg !39
  %1105 = add nuw nsw i32 %1104, %1103, !dbg !39
  %1106 = zext nneg i32 %1105 to i64, !dbg !39
  %1107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1106, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1107, i32 %905, i32 %906, i1 true) #2, !dbg !39
  %1108 = or disjoint i32 %1088, 16, !dbg !39
  %1109 = add nuw nsw i32 %1090, %1108, !dbg !39
  %1110 = zext nneg i32 %1109 to i64, !dbg !39
  %1111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1110, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1111, i32 %907, i32 %908, i1 true) #2, !dbg !39
  %1112 = or disjoint i32 %1088, 528, !dbg !39
  %1113 = lshr i32 %1112, 4, !dbg !39
  %1114 = and i32 %1113, 252, !dbg !39
  %1115 = add nuw nsw i32 %1114, %1112, !dbg !39
  %1116 = zext nneg i32 %1115 to i64, !dbg !39
  %1117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1116, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1117, i32 %909, i32 %910, i1 true) #2, !dbg !39
  %1118 = or disjoint i32 %1088, 24, !dbg !39
  %1119 = add nuw nsw i32 %1090, %1118, !dbg !39
  %1120 = zext nneg i32 %1119 to i64, !dbg !39
  %1121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1120, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1121, i32 %911, i32 %912, i1 true) #2, !dbg !39
  %1122 = or disjoint i32 %1088, 536, !dbg !39
  %1123 = lshr i32 %1122, 4, !dbg !39
  %1124 = and i32 %1123, 252, !dbg !39
  %1125 = add nuw nsw i32 %1124, %1122, !dbg !39
  %1126 = zext nneg i32 %1125 to i64, !dbg !39
  %1127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1126, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1127, i32 %913, i32 %914, i1 true) #2, !dbg !39
  %1128 = or disjoint i32 %1088, 32, !dbg !39
  %1129 = add nuw nsw i32 %1090, %1128, !dbg !39
  %1130 = zext nneg i32 %1129 to i64, !dbg !39
  %1131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1130, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1131, i32 %915, i32 %916, i1 true) #2, !dbg !39
  %1132 = or disjoint i32 %1088, 544, !dbg !39
  %1133 = lshr i32 %1132, 4, !dbg !39
  %1134 = and i32 %1133, 252, !dbg !39
  %1135 = add nuw nsw i32 %1134, %1132, !dbg !39
  %1136 = zext nneg i32 %1135 to i64, !dbg !39
  %1137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1136, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1137, i32 %917, i32 %918, i1 true) #2, !dbg !39
  %1138 = or disjoint i32 %1088, 40, !dbg !39
  %1139 = add nuw nsw i32 %1090, %1138, !dbg !39
  %1140 = zext nneg i32 %1139 to i64, !dbg !39
  %1141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1140, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1141, i32 %919, i32 %920, i1 true) #2, !dbg !39
  %1142 = or disjoint i32 %1088, 552, !dbg !39
  %1143 = lshr i32 %1142, 4, !dbg !39
  %1144 = and i32 %1143, 252, !dbg !39
  %1145 = add nuw nsw i32 %1144, %1142, !dbg !39
  %1146 = zext nneg i32 %1145 to i64, !dbg !39
  %1147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1146, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1147, i32 %921, i32 %922, i1 true) #2, !dbg !39
  %1148 = or disjoint i32 %1088, 48, !dbg !39
  %1149 = add nuw nsw i32 %1090, %1148, !dbg !39
  %1150 = zext nneg i32 %1149 to i64, !dbg !39
  %1151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1150, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1151, i32 %923, i32 %924, i1 true) #2, !dbg !39
  %1152 = or disjoint i32 %1088, 560, !dbg !39
  %1153 = lshr i32 %1152, 4, !dbg !39
  %1154 = and i32 %1153, 252, !dbg !39
  %1155 = add nuw nsw i32 %1154, %1152, !dbg !39
  %1156 = zext nneg i32 %1155 to i64, !dbg !39
  %1157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1156, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1157, i32 %925, i32 %926, i1 true) #2, !dbg !39
  %1158 = or disjoint i32 %1088, 56, !dbg !39
  %1159 = add nuw nsw i32 %1090, %1158, !dbg !39
  %1160 = zext nneg i32 %1159 to i64, !dbg !39
  %1161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1160, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1161, i32 %927, i32 %928, i1 true) #2, !dbg !39
  %1162 = or disjoint i32 %1088, 568, !dbg !39
  %1163 = lshr i32 %1162, 4, !dbg !39
  %1164 = and i32 %1163, 252, !dbg !39
  %1165 = add nuw nsw i32 %1164, %1162, !dbg !39
  %1166 = zext nneg i32 %1165 to i64, !dbg !39
  %1167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1166, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1167, i32 %929, i32 %930, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %1168 = lshr i32 %963, 4, !dbg !39
  %1169 = and i32 %1168, 28, !dbg !39
  %1170 = add nuw nsw i32 %1169, %1089, !dbg !39
  %1171 = zext nneg i32 %1170 to i64, !dbg !39
  %1172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1171, !dbg !39
  %1173 = load <4 x i32>, ptr addrspace(3) %1172, align 16, !dbg !39
  %1174 = or disjoint i32 %1089, 512, !dbg !39
  %1175 = lshr i32 %1174, 4, !dbg !39
  %1176 = and i32 %1175, 60, !dbg !39
  %1177 = add nuw nsw i32 %1176, %1174, !dbg !39
  %1178 = zext nneg i32 %1177 to i64, !dbg !39
  %1179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1178, !dbg !39
  %1180 = load <4 x i32>, ptr addrspace(3) %1179, align 16, !dbg !39
  %1181 = or disjoint i32 %1089, 1024, !dbg !39
  %1182 = lshr i32 %1181, 4, !dbg !39
  %1183 = and i32 %1182, 92, !dbg !39
  %1184 = add nuw nsw i32 %1183, %1181, !dbg !39
  %1185 = zext nneg i32 %1184 to i64, !dbg !39
  %1186 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1185, !dbg !39
  %1187 = load <4 x i32>, ptr addrspace(3) %1186, align 16, !dbg !39
  %1188 = or disjoint i32 %1089, 1536, !dbg !39
  %1189 = lshr i32 %1188, 4, !dbg !39
  %1190 = and i32 %1189, 124, !dbg !39
  %1191 = add nuw nsw i32 %1190, %1188, !dbg !39
  %1192 = zext nneg i32 %1191 to i64, !dbg !39
  %1193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1192, !dbg !39
  %1194 = load <4 x i32>, ptr addrspace(3) %1193, align 16, !dbg !39
  %1195 = or disjoint i32 %1089, 2048, !dbg !39
  %1196 = lshr i32 %1195, 4, !dbg !39
  %1197 = and i32 %1196, 156, !dbg !39
  %1198 = add nuw nsw i32 %1197, %1195, !dbg !39
  %1199 = zext nneg i32 %1198 to i64, !dbg !39
  %1200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1199, !dbg !39
  %1201 = load <4 x i32>, ptr addrspace(3) %1200, align 16, !dbg !39
  %1202 = or disjoint i32 %1089, 2560, !dbg !39
  %1203 = lshr i32 %1202, 4, !dbg !39
  %1204 = and i32 %1203, 188, !dbg !39
  %1205 = add nuw nsw i32 %1204, %1202, !dbg !39
  %1206 = zext nneg i32 %1205 to i64, !dbg !39
  %1207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1206, !dbg !39
  %1208 = load <4 x i32>, ptr addrspace(3) %1207, align 16, !dbg !39
  %1209 = or disjoint i32 %1089, 3072, !dbg !39
  %1210 = lshr i32 %1209, 4, !dbg !39
  %1211 = and i32 %1210, 220, !dbg !39
  %1212 = add nuw nsw i32 %1211, %1209, !dbg !39
  %1213 = zext nneg i32 %1212 to i64, !dbg !39
  %1214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1213, !dbg !39
  %1215 = load <4 x i32>, ptr addrspace(3) %1214, align 16, !dbg !39
  %1216 = or disjoint i32 %1089, 3584, !dbg !39
  %1217 = lshr i32 %1216, 4, !dbg !39
  %1218 = and i32 %1217, 252, !dbg !39
  %1219 = add nuw nsw i32 %1218, %1216, !dbg !39
  %1220 = zext nneg i32 %1219 to i64, !dbg !39
  %1221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %1220, !dbg !39
  %1222 = load <4 x i32>, ptr addrspace(3) %1221, align 16, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1093, i32 %931, i32 %932, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1098, i32 %933, i32 %934, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1102, i32 %935, i32 %936, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1107, i32 %937, i32 %938, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1111, i32 %939, i32 %940, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1117, i32 %941, i32 %942, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1121, i32 %943, i32 %944, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1127, i32 %945, i32 %946, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1131, i32 %947, i32 %948, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1137, i32 %949, i32 %950, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1141, i32 %951, i32 %952, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1147, i32 %953, i32 %954, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1151, i32 %955, i32 %956, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1157, i32 %957, i32 %958, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1161, i32 %959, i32 %960, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1167, i32 %961, i32 %962, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %1223 = load <4 x i32>, ptr addrspace(3) %1172, align 16, !dbg !39
  %1224 = load <4 x i32>, ptr addrspace(3) %1179, align 16, !dbg !39
  %1225 = load <4 x i32>, ptr addrspace(3) %1186, align 16, !dbg !39
  %1226 = load <4 x i32>, ptr addrspace(3) %1193, align 16, !dbg !39
  %1227 = load <4 x i32>, ptr addrspace(3) %1200, align 16, !dbg !39
  %1228 = load <4 x i32>, ptr addrspace(3) %1207, align 16, !dbg !39
  %1229 = load <4 x i32>, ptr addrspace(3) %1214, align 16, !dbg !39
  %1230 = load <4 x i32>, ptr addrspace(3) %1221, align 16, !dbg !39
  %.extract = extractelement <4 x i32> %1173, i64 0, !dbg !39
  %.extract139 = extractelement <4 x i32> %1173, i64 1, !dbg !39
  %.extract140 = extractelement <4 x i32> %1173, i64 2, !dbg !39
  %.extract141 = extractelement <4 x i32> %1173, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract139, i32 %.extract140, i32 %.extract141, ptr addrspace(1) %1032, i1 %1065) #2, !dbg !39
  %.extract142 = extractelement <4 x i32> %1180, i64 0, !dbg !39
  %.extract143 = extractelement <4 x i32> %1180, i64 1, !dbg !39
  %.extract144 = extractelement <4 x i32> %1180, i64 2, !dbg !39
  %.extract145 = extractelement <4 x i32> %1180, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract142, i32 %.extract143, i32 %.extract144, i32 %.extract145, ptr addrspace(1) %1033, i1 %1066) #2, !dbg !39
  %.extract146 = extractelement <4 x i32> %1187, i64 0, !dbg !39
  %.extract147 = extractelement <4 x i32> %1187, i64 1, !dbg !39
  %.extract148 = extractelement <4 x i32> %1187, i64 2, !dbg !39
  %.extract149 = extractelement <4 x i32> %1187, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract146, i32 %.extract147, i32 %.extract148, i32 %.extract149, ptr addrspace(1) %1034, i1 %1067) #2, !dbg !39
  %.extract150 = extractelement <4 x i32> %1194, i64 0, !dbg !39
  %.extract151 = extractelement <4 x i32> %1194, i64 1, !dbg !39
  %.extract152 = extractelement <4 x i32> %1194, i64 2, !dbg !39
  %.extract153 = extractelement <4 x i32> %1194, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract150, i32 %.extract151, i32 %.extract152, i32 %.extract153, ptr addrspace(1) %1035, i1 %1068) #2, !dbg !39
  %.extract154 = extractelement <4 x i32> %1201, i64 0, !dbg !39
  %.extract155 = extractelement <4 x i32> %1201, i64 1, !dbg !39
  %.extract156 = extractelement <4 x i32> %1201, i64 2, !dbg !39
  %.extract157 = extractelement <4 x i32> %1201, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract154, i32 %.extract155, i32 %.extract156, i32 %.extract157, ptr addrspace(1) %1036, i1 %1069) #2, !dbg !39
  %.extract158 = extractelement <4 x i32> %1208, i64 0, !dbg !39
  %.extract159 = extractelement <4 x i32> %1208, i64 1, !dbg !39
  %.extract160 = extractelement <4 x i32> %1208, i64 2, !dbg !39
  %.extract161 = extractelement <4 x i32> %1208, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract158, i32 %.extract159, i32 %.extract160, i32 %.extract161, ptr addrspace(1) %1037, i1 %1070) #2, !dbg !39
  %.extract162 = extractelement <4 x i32> %1215, i64 0, !dbg !39
  %.extract163 = extractelement <4 x i32> %1215, i64 1, !dbg !39
  %.extract164 = extractelement <4 x i32> %1215, i64 2, !dbg !39
  %.extract165 = extractelement <4 x i32> %1215, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract162, i32 %.extract163, i32 %.extract164, i32 %.extract165, ptr addrspace(1) %1038, i1 %1071) #2, !dbg !39
  %.extract166 = extractelement <4 x i32> %1222, i64 0, !dbg !39
  %.extract167 = extractelement <4 x i32> %1222, i64 1, !dbg !39
  %.extract168 = extractelement <4 x i32> %1222, i64 2, !dbg !39
  %.extract169 = extractelement <4 x i32> %1222, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract166, i32 %.extract167, i32 %.extract168, i32 %.extract169, ptr addrspace(1) %1039, i1 %1072) #2, !dbg !39
  %.extract170 = extractelement <4 x i32> %1223, i64 0, !dbg !39
  %.extract171 = extractelement <4 x i32> %1223, i64 1, !dbg !39
  %.extract172 = extractelement <4 x i32> %1223, i64 2, !dbg !39
  %.extract173 = extractelement <4 x i32> %1223, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract170, i32 %.extract171, i32 %.extract172, i32 %.extract173, ptr addrspace(1) %1040, i1 %1073) #2, !dbg !39
  %.extract174 = extractelement <4 x i32> %1224, i64 0, !dbg !39
  %.extract175 = extractelement <4 x i32> %1224, i64 1, !dbg !39
  %.extract176 = extractelement <4 x i32> %1224, i64 2, !dbg !39
  %.extract177 = extractelement <4 x i32> %1224, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract174, i32 %.extract175, i32 %.extract176, i32 %.extract177, ptr addrspace(1) %1041, i1 %1074) #2, !dbg !39
  %.extract178 = extractelement <4 x i32> %1225, i64 0, !dbg !39
  %.extract179 = extractelement <4 x i32> %1225, i64 1, !dbg !39
  %.extract180 = extractelement <4 x i32> %1225, i64 2, !dbg !39
  %.extract181 = extractelement <4 x i32> %1225, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract178, i32 %.extract179, i32 %.extract180, i32 %.extract181, ptr addrspace(1) %1042, i1 %1075) #2, !dbg !39
  %.extract182 = extractelement <4 x i32> %1226, i64 0, !dbg !39
  %.extract183 = extractelement <4 x i32> %1226, i64 1, !dbg !39
  %.extract184 = extractelement <4 x i32> %1226, i64 2, !dbg !39
  %.extract185 = extractelement <4 x i32> %1226, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract182, i32 %.extract183, i32 %.extract184, i32 %.extract185, ptr addrspace(1) %1043, i1 %1076) #2, !dbg !39
  %.extract186 = extractelement <4 x i32> %1227, i64 0, !dbg !39
  %.extract187 = extractelement <4 x i32> %1227, i64 1, !dbg !39
  %.extract188 = extractelement <4 x i32> %1227, i64 2, !dbg !39
  %.extract189 = extractelement <4 x i32> %1227, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract186, i32 %.extract187, i32 %.extract188, i32 %.extract189, ptr addrspace(1) %1044, i1 %1077) #2, !dbg !39
  %.extract190 = extractelement <4 x i32> %1228, i64 0, !dbg !39
  %.extract191 = extractelement <4 x i32> %1228, i64 1, !dbg !39
  %.extract192 = extractelement <4 x i32> %1228, i64 2, !dbg !39
  %.extract193 = extractelement <4 x i32> %1228, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract190, i32 %.extract191, i32 %.extract192, i32 %.extract193, ptr addrspace(1) %1045, i1 %1078) #2, !dbg !39
  %.extract194 = extractelement <4 x i32> %1229, i64 0, !dbg !39
  %.extract195 = extractelement <4 x i32> %1229, i64 1, !dbg !39
  %.extract196 = extractelement <4 x i32> %1229, i64 2, !dbg !39
  %.extract197 = extractelement <4 x i32> %1229, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract194, i32 %.extract195, i32 %.extract196, i32 %.extract197, ptr addrspace(1) %1046, i1 %1079) #2, !dbg !39
  %.extract198 = extractelement <4 x i32> %1230, i64 0, !dbg !39
  %.extract199 = extractelement <4 x i32> %1230, i64 1, !dbg !39
  %.extract200 = extractelement <4 x i32> %1230, i64 2, !dbg !39
  %.extract201 = extractelement <4 x i32> %1230, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract198, i32 %.extract199, i32 %.extract200, i32 %.extract201, ptr addrspace(1) %1047, i1 %1080) #2, !dbg !39
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "matmul-with-dot-v2.py", directory: "/home/ubuntu/triton_runner/examples/ttgir_runner/sm86")
!4 = !{ptr @matmul_kernel, !"kernel", i32 1}
!5 = !{ptr @matmul_kernel, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !3, file: !3, line: 8, type: !8, scopeLine: 8, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 17, column: 26, scope: !7)
!11 = !DILocation(line: 18, column: 26, scope: !7)
!12 = !DILocation(line: 20, column: 21, scope: !7)
!13 = !DILocation(line: 20, column: 49, scope: !7)
!14 = !DILocation(line: 20, column: 36, scope: !7)
!15 = !DILocation(line: 21, column: 21, scope: !7)
!16 = !DILocation(line: 21, column: 49, scope: !7)
!17 = !DILocation(line: 21, column: 36, scope: !7)
!18 = !DILocation(line: 24, column: 39, scope: !7)
!19 = !DILocation(line: 24, column: 21, scope: !7)
!20 = !DILocation(line: 24, column: 51, scope: !7)
!21 = !DILocation(line: 25, column: 39, scope: !7)
!22 = !DILocation(line: 25, column: 21, scope: !7)
!23 = !DILocation(line: 25, column: 51, scope: !7)
!24 = !DILocation(line: 40, column: 22, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 29, column: 33, scope: !7)
!28 = !DILocation(line: 29, column: 22, scope: !7)
!29 = !DILocation(line: 31, column: 82, scope: !7)
!30 = !DILocation(line: 31, column: 20, scope: !7)
!31 = !DILocation(line: 32, column: 82, scope: !7)
!32 = !DILocation(line: 32, column: 20, scope: !7)
!33 = !DILocation(line: 30, column: 22, scope: !7)
!34 = !DILocation(line: 31, column: 29, scope: !7)
!35 = !DILocation(line: 32, column: 48, scope: !7)
!36 = !DILocation(line: 32, column: 29, scope: !7)
!37 = !DILocation(line: 40, column: 28, scope: !25, inlinedAt: !27)
!38 = !DILocation(line: 33, column: 32, scope: !7)
!39 = !DILocation(line: 39, column: 21, scope: !7)
!40 = !DILocation(line: 35, column: 39, scope: !7)
!41 = !DILocation(line: 35, column: 21, scope: !7)
!42 = !DILocation(line: 35, column: 51, scope: !7)
!43 = !DILocation(line: 38, column: 33, scope: !7)
!44 = !DILocation(line: 38, column: 58, scope: !7)
!45 = !DILocation(line: 38, column: 39, scope: !7)
!46 = !DILocation(line: 39, column: 4, scope: !7)
