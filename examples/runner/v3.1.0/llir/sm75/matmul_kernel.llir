; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !11
  %12 = shl i32 %11, 4, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = lshr i32 %13, 4, !dbg !13
  %15 = and i32 %14, 7, !dbg !13
  %16 = or disjoint i32 %15, 8, !dbg !13
  %17 = and i32 %13, 15, !dbg !13
  %18 = or disjoint i32 %12, %15, !dbg !14
  %19 = or disjoint i32 %12, %16, !dbg !14
  %20 = shl i32 %10, 4, !dbg !15
  %21 = or disjoint i32 %20, %17, !dbg !16
  %22 = mul i32 %18, %6, !dbg !17
  %23 = mul i32 %19, %6, !dbg !17
  %24 = sext i32 %22 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = sext i32 %23 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !18
  %28 = sext i32 %21 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = icmp sgt i32 %5, 0, !dbg !20
  br i1 %30, label %.lr.ph, label %._crit_edge, !dbg !20

.lr.ph:                                           ; preds = %9, %.lr.ph
  %31 = phi float [ %48, %.lr.ph ], [ 0.000000e+00, %9 ]
  %32 = phi float [ %49, %.lr.ph ], [ 0.000000e+00, %9 ]
  %33 = phi i32 [ %50, %.lr.ph ], [ 0, %9 ]
  %34 = zext nneg i32 %33 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %25, i64 %34, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %27, i64 %34, !dbg !21
  %37 = mul i32 %33, %7, !dbg !22
  %38 = sext i32 %37 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %29, i64 %38, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #2, !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !24
  %43 = bitcast i32 %42 to float, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #2, !dbg !25
  %45 = bitcast i32 %44 to float, !dbg !25
  %46 = fmul float %41, %45, !dbg !26
  %47 = fmul float %43, %45, !dbg !26
  %48 = fadd float %31, %46, !dbg !27
  %49 = fadd float %32, %47, !dbg !27
  %50 = add nuw nsw i32 %33, 1, !dbg !20
  %51 = icmp slt i32 %50, %5, !dbg !20
  br i1 %51, label %.lr.ph, label %._crit_edge, !dbg !20

._crit_edge:                                      ; preds = %.lr.ph, %9
  %52 = phi float [ 0.000000e+00, %9 ], [ %48, %.lr.ph ]
  %53 = phi float [ 0.000000e+00, %9 ], [ %49, %.lr.ph ]
  %54 = shl i32 %13, 1, !dbg !13
  %55 = and i32 %54, 14, !dbg !13
  %56 = or disjoint i32 %20, %55, !dbg !16
  %57 = lshr i32 %13, 3, !dbg !13
  %58 = and i32 %57, 15, !dbg !13
  %59 = or disjoint i32 %12, %58, !dbg !14
  %60 = and i32 %13, 31, !dbg !13
  %61 = lshr i32 %13, 5, !dbg !13
  %62 = mul i32 %59, %8, !dbg !28
  %63 = sext i32 %62 to i64, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !29
  %65 = sext i32 %56 to i64, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %64, i64 %65, !dbg !30
  %67 = icmp slt i32 %59, %3, !dbg !31
  %68 = icmp slt i32 %56, %4, !dbg !32
  %69 = and i1 %68, %67, !dbg !33
  %70 = and i32 %61, 3, !dbg !34
  %71 = lshr i32 %60, 4, !dbg !34
  %72 = shl nuw nsw i32 %70, 1, !dbg !34
  %73 = or disjoint i32 %72, %71, !dbg !34
  %74 = mul nuw nsw i32 %73, 18, !dbg !34
  %75 = add nuw nsw i32 %74, %17, !dbg !34
  %76 = zext nneg i32 %75 to i64, !dbg !34
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i64 %76, !dbg !34
  %78 = insertelement <1 x float> poison, float %52, i64 0, !dbg !34
  store <1 x float> %78, ptr addrspace(3) %77, align 4, !dbg !34
  %79 = or disjoint i32 %17, 144, !dbg !34
  %80 = add nuw nsw i32 %79, %74, !dbg !34
  %81 = zext nneg i32 %80 to i64, !dbg !34
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i64 %81, !dbg !34
  %83 = insertelement <1 x float> poison, float %53, i64 0, !dbg !34
  store <1 x float> %83, ptr addrspace(3) %82, align 4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %84 = lshr i32 %60, 3, !dbg !34
  %85 = shl nuw nsw i32 %70, 2, !dbg !34
  %86 = or disjoint i32 %85, %84, !dbg !34
  %87 = mul nuw nsw i32 %86, 18, !dbg !34
  %88 = add nuw nsw i32 %87, %55, !dbg !34
  %89 = zext nneg i32 %88 to i64, !dbg !34
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i64 %89, !dbg !34
  %.extract = load i32, ptr addrspace(3) %90, align 8, !dbg !34
  %91 = getelementptr inbounds i8, ptr addrspace(3) %90, i64 4, !dbg !34
  %.extract5 = load i32, ptr addrspace(3) %91, align 4, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %66, i1 %69) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "matmul.py", directory: "/home/ubuntu/triton_runner/examples/python_runner")
!4 = !{ptr @matmul_kernel, !"kernel", i32 1}
!5 = !{ptr @matmul_kernel, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !3, file: !3, line: 13, type: !8, scopeLine: 13, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 26, scope: !7)
!11 = !DILocation(line: 22, column: 26, scope: !7)
!12 = !DILocation(line: 24, column: 21, scope: !7)
!13 = !DILocation(line: 24, column: 49, scope: !7)
!14 = !DILocation(line: 24, column: 36, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 36, scope: !7)
!17 = !DILocation(line: 28, column: 39, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 21, scope: !7)
!20 = !DILocation(line: 34, column: 19, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 36, column: 35, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 38, column: 20, scope: !7)
!25 = !DILocation(line: 39, column: 20, scope: !7)
!26 = !DILocation(line: 40, column: 27, scope: !7)
!27 = !DILocation(line: 40, column: 23, scope: !7)
!28 = !DILocation(line: 43, column: 39, scope: !7)
!29 = !DILocation(line: 43, column: 21, scope: !7)
!30 = !DILocation(line: 43, column: 51, scope: !7)
!31 = !DILocation(line: 44, column: 32, scope: !7)
!32 = !DILocation(line: 44, column: 56, scope: !7)
!33 = !DILocation(line: 44, column: 38, scope: !7)
!34 = !DILocation(line: 45, column: 21, scope: !7)
!35 = !DILocation(line: 45, column: 4, scope: !7)
