//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	matmul_kernel_make_tensor_desciptor // -- Begin function matmul_kernel_make_tensor_desciptor
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel_make_tensor_desciptor
.visible .entry matmul_kernel_make_tensor_desciptor(
	.param .u64 .ptr .global .align 1 matmul_kernel_make_tensor_desciptor_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_make_tensor_desciptor_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_make_tensor_desciptor_param_2,
	.param .u32 matmul_kernel_make_tensor_desciptor_param_3,
	.param .u32 matmul_kernel_make_tensor_desciptor_param_4,
	.param .u32 matmul_kernel_make_tensor_desciptor_param_5,
	.param .u64 .ptr .global .align 1 matmul_kernel_make_tensor_desciptor_param_6
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<94>;
	.reg .b16 	%rs<33>;
	.reg .b32 	%r<638>;
	.reg .f32 	%f<590>;
	.reg .b64 	%rd<86>;
	.loc	1 9 0                           // matmul-with-tma-v3.py:9:0
$L__func_begin0:
	.loc	1 9 0                           // matmul-with-tma-v3.py:9:0

// %bb.0:
	ld.param.u64 	%rd7, [matmul_kernel_make_tensor_desciptor_param_0];
	ld.param.u64 	%rd25, [matmul_kernel_make_tensor_desciptor_param_1];
$L__tmp0:
	.loc	1 14 26                         // matmul-with-tma-v3.py:14:26
	mov.u32 	%r192, %ctaid.x;
	ld.param.u64 	%rd43, [matmul_kernel_make_tensor_desciptor_param_2];
	.loc	1 15 26                         // matmul-with-tma-v3.py:15:26
	mov.u32 	%r193, %ctaid.y;
	ld.param.u32 	%r152, [matmul_kernel_make_tensor_desciptor_param_3];
	.loc	1 18 8                          // matmul-with-tma-v3.py:18:8
	mov.u32 	%r194, %ctaid.z;
	ld.param.u32 	%r151, [matmul_kernel_make_tensor_desciptor_param_4];
	mov.u32 	%r195, %nctaid.x;
	ld.param.u32 	%r159, [matmul_kernel_make_tensor_desciptor_param_5];
	mov.u32 	%r196, %nctaid.y;
	ld.param.u64 	%rd64, [matmul_kernel_make_tensor_desciptor_param_6];
	mad.lo.s32 	%r197, %r194, %r196, %r193;
	mad.lo.s32 	%r198, %r197, %r195, %r192;
	mul.lo.s32 	%r199, %r198, 384;
	cvt.s64.s32 	%rd65, %r199;
	add.s64 	%rd62, %rd64, %rd65;
	mov.u32 	%r1, %tid.x;
	setp.lt.s32 	%p1, %r1, 32;
	shl.b32 	%r200, %r1, 2;
	mov.u32 	%r175, global_smem;
	add.s32 	%r147, %r175, %r200;
	mov.b32 	%r606, 0;
	// begin inline asm
	@%p1 st.shared.b32 [ %r147 + 0 ], %r606;
	// end inline asm
	bar.warp.sync 	-1;
	setp.eq.s32 	%p86, %r1, 0;
	cvt.u64.u32 	%rd6, %r175;
	// begin inline asm
	@%p86 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ %rd6 + 0 ], %rd7;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1;
	// end inline asm
	mov.b32 	%r149, 64;
	// begin inline asm
	@%p86 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r149;
	// end inline asm
	mov.b32 	%r598, 128;
	// begin inline asm
	@%p86 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r598;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r151;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r152;
	// end inline asm
	shr.s32 	%r201, %r151, 4;
	cvt.s64.s32 	%rd14, %r201;
	// begin inline asm
	@%p86 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ %rd6 + 0 ], 0x0, %rd14;
	// end inline asm
	mov.b32 	%r601, 1;
	// begin inline asm
	@%p86 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r601;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r601;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x2;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p1 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ %rd62 + 0 ], [ %rd6 + 0 ], 0x80;
	// end inline asm
	// begin inline asm
	@%p1 fence.proxy.tensormap::generic.acquire.gpu [ %rd62 + 0 ], 0x80;
	// end inline asm
	bar.sync 	0;
	.loc	1 24 8                          // matmul-with-tma-v3.py:24:8
	cvt.s64.s32 	%rd66, %r159;
	add.s32 	%r202, %r199, 128;
	cvt.s64.s32 	%rd67, %r202;
	add.s64 	%rd63, %rd64, %rd67;
	bar.sync 	0;
	// begin inline asm
	@%p1 st.shared.b32 [ %r147 + 0 ], %r606;
	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	@%p86 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ %rd6 + 0 ], %rd25;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r149;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r149;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r159;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r151;
	// end inline asm
	shr.s64 	%rd32, %rd66, 4;
	// begin inline asm
	@%p86 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ %rd6 + 0 ], 0x0, %rd32;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r601;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r601;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x2;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p1 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ %rd63 + 0 ], [ %rd6 + 0 ], 0x80;
	// end inline asm
	// begin inline asm
	@%p1 fence.proxy.tensormap::generic.acquire.gpu [ %rd63 + 0 ], 0x80;
	// end inline asm
	bar.sync 	0;
	.loc	1 30 8                          // matmul-with-tma-v3.py:30:8
	add.s32 	%r203, %r199, 256;
	cvt.s64.s32 	%rd68, %r203;
	add.s64 	%rd85, %rd64, %rd68;
	bar.sync 	0;
	// begin inline asm
	@%p1 st.shared.b32 [ %r147 + 0 ], %r606;
	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	@%p86 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ %rd6 + 0 ], %rd43;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r149;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r598;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r159;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r152;
	// end inline asm
	shr.s64 	%rd50, %rd66, 3;
	// begin inline asm
	@%p86 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ %rd6 + 0 ], 0x0, %rd50;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0, %r601;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1, %r601;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x1;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x3;
	// end inline asm
	// begin inline asm
	@%p86 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ %rd6 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p1 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ %rd85 + 0 ], [ %rd6 + 0 ], 0x80;
	// end inline asm
	// begin inline asm
	@%p1 fence.proxy.tensormap::generic.acquire.gpu [ %rd85 + 0 ], 0x80;
	// end inline asm
	bar.sync 	0;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22
	add.s32 	%r204, %r151, 63;
$L__tmp2:
	.loc	1 38 33                         // matmul-with-tma-v3.py:38:33
	shl.b32 	%r564, %r192, 7;
	.loc	1 39 51                         // matmul-with-tma-v3.py:39:51
	shl.b32 	%r563, %r193, 6;
	.loc	1 37 19                         // matmul-with-tma-v3.py:37:19
	add.s32 	%r171, %r175, 40960;
	// begin inline asm
	@%p86 mbarrier.init.shared::cta.b64 [%r171], 1;
	// end inline asm
	bar.sync 	0;
	add.s32 	%r172, %r175, 40968;
	// begin inline asm
	@%p86 mbarrier.init.shared::cta.b64 [%r172], 1;
	// end inline asm
	bar.sync 	0;
	add.s32 	%r173, %r175, 40976;
	// begin inline asm
	@%p86 mbarrier.init.shared::cta.b64 [%r173], 1;
	// end inline asm
	setp.gt.s32 	%p58, %r204, 63;
	bar.sync 	0;
	and.pred  	%p52, %p86, %p58;
	// begin inline asm
	@%p52 mbarrier.arrive.expect_tx.shared.b64 _, [%r171], 12288;
	// end inline asm
	.loc	1 38 24                         // matmul-with-tma-v3.py:38:24
	bar.sync 	0;
	elect.sync 	%r208|%p59, -1;
	and.pred  	%p60, %p58, %p59;
	setp.lt.u32 	%p61, %r1, 32;
	and.pred  	%p53, %p61, %p60;
	// begin inline asm
	@%p53 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r175], [%rd62, {%r606, %r564}], [%r171];
	// end inline asm
	.loc	1 39 24                         // matmul-with-tma-v3.py:39:24
	bar.sync 	0;
	elect.sync 	%r209|%p62, -1;
	and.pred  	%p63, %p58, %p62;
	and.pred  	%p54, %p61, %p63;
	add.s32 	%r179, %r175, 24576;
	// begin inline asm
	@%p54 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r179], [%rd63, {%r563, %r606}], [%r171];
	// end inline asm
	.loc	1 37 19                         // matmul-with-tma-v3.py:37:19
	setp.gt.s32 	%p64, %r204, 127;
	bar.sync 	0;
	and.pred  	%p55, %p86, %p64;
	// begin inline asm
	@%p55 mbarrier.arrive.expect_tx.shared.b64 _, [%r172], 12288;
	// end inline asm
	.loc	1 38 24                         // matmul-with-tma-v3.py:38:24
	bar.sync 	0;
	elect.sync 	%r210|%p65, -1;
	and.pred  	%p66, %p64, %p65;
	and.pred  	%p56, %p61, %p66;
	add.s32 	%r184, %r175, 8192;
	// begin inline asm
	@%p56 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r184], [%rd62, {%r149, %r564}], [%r172];
	// end inline asm
	.loc	1 39 24                         // matmul-with-tma-v3.py:39:24
	bar.sync 	0;
	elect.sync 	%r211|%p67, -1;
	and.pred  	%p68, %p64, %p67;
	and.pred  	%p57, %p61, %p68;
	add.s32 	%r188, %r175, 28672;
	// begin inline asm
	@%p57 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r188], [%rd63, {%r563, %r149}], [%r172];
	// end inline asm
	.loc	1 37 19                         // matmul-with-tma-v3.py:37:19
	@%p58 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %.lr.ph
	.loc	1 0 19                          // matmul-with-tma-v3.py:0:19
	shr.s32 	%r205, %r204, 31;
	shr.u32 	%r206, %r205, 26;
	add.s32 	%r207, %r204, %r206;
	shr.s32 	%r2, %r207, 6;
	add.s32 	%r8, %r2, -2;
	shr.u32 	%r249, %r1, 5;
	and.b32  	%r605, %r1, 2;
	bfe.s32 	%r250, %r1, 1, 1;
	and.b32  	%r604, %r1, 4;
	bfe.s32 	%r251, %r1, 2, 1;
	and.b32  	%r252, %r1, 16;
	and.b32  	%r253, %r1, 32;
	and.b32  	%r254, %r1, 64;
	and.b32  	%r11, %r1, 127;
	and.b32  	%r255, %r1, 15;
	or.b32  	%r256, %r255, 144;
	xor.b32  	%r257, %r256, %r252;
	and.b32  	%r258, %r1, 96;
	or.b32  	%r12, %r258, %r257;
	and.b32  	%r259, %r1, 31;
	or.b32  	%r260, %r259, 288;
	xor.b32  	%r261, %r260, %r253;
	or.b32  	%r13, %r261, %r254;
	or.b32  	%r262, %r255, 432;
	and.b32  	%r263, %r1, 48;
	xor.b32  	%r264, %r262, %r263;
	or.b32  	%r14, %r264, %r254;
	or.b32  	%r265, %r255, 656;
	xor.b32  	%r266, %r265, %r252;
	or.b32  	%r15, %r258, %r266;
	or.b32  	%r267, %r259, 800;
	xor.b32  	%r268, %r267, %r253;
	or.b32  	%r16, %r268, %r254;
	or.b32  	%r269, %r255, 944;
	xor.b32  	%r270, %r269, %r263;
	or.b32  	%r17, %r270, %r254;
	or.b32  	%r271, %r255, 1168;
	xor.b32  	%r272, %r271, %r252;
	or.b32  	%r18, %r258, %r272;
	or.b32  	%r273, %r259, 1312;
	xor.b32  	%r274, %r273, %r253;
	or.b32  	%r19, %r274, %r254;
	or.b32  	%r275, %r255, 1456;
	xor.b32  	%r276, %r275, %r263;
	or.b32  	%r20, %r276, %r254;
	or.b32  	%r277, %r255, 1680;
	xor.b32  	%r278, %r277, %r252;
	or.b32  	%r21, %r258, %r278;
	or.b32  	%r279, %r259, 1824;
	xor.b32  	%r280, %r279, %r253;
	or.b32  	%r22, %r280, %r254;
	or.b32  	%r281, %r255, 1968;
	xor.b32  	%r282, %r281, %r263;
	or.b32  	%r23, %r282, %r254;
	or.b32  	%r283, %r255, 2192;
	xor.b32  	%r284, %r283, %r252;
	or.b32  	%r24, %r258, %r284;
	or.b32  	%r285, %r259, 2336;
	xor.b32  	%r286, %r285, %r253;
	or.b32  	%r25, %r286, %r254;
	or.b32  	%r287, %r255, 2480;
	xor.b32  	%r288, %r287, %r263;
	or.b32  	%r26, %r288, %r254;
	or.b32  	%r289, %r255, 2704;
	xor.b32  	%r290, %r289, %r252;
	or.b32  	%r27, %r258, %r290;
	or.b32  	%r291, %r259, 2848;
	xor.b32  	%r292, %r291, %r253;
	or.b32  	%r28, %r292, %r254;
	or.b32  	%r293, %r255, 2992;
	xor.b32  	%r294, %r293, %r263;
	or.b32  	%r29, %r294, %r254;
	or.b32  	%r295, %r255, 3216;
	xor.b32  	%r296, %r295, %r252;
	or.b32  	%r30, %r258, %r296;
	or.b32  	%r297, %r259, 3360;
	xor.b32  	%r298, %r297, %r253;
	or.b32  	%r31, %r298, %r254;
	or.b32  	%r299, %r255, 3504;
	xor.b32  	%r300, %r299, %r263;
	or.b32  	%r32, %r300, %r254;
	or.b32  	%r301, %r255, 3728;
	xor.b32  	%r302, %r301, %r252;
	or.b32  	%r33, %r258, %r302;
	or.b32  	%r303, %r259, 3872;
	xor.b32  	%r304, %r303, %r253;
	or.b32  	%r34, %r304, %r254;
	or.b32  	%r305, %r255, 4016;
	xor.b32  	%r306, %r305, %r263;
	or.b32  	%r35, %r306, %r254;
	shl.b32 	%r307, %r1, 6;
	and.b32  	%r308, %r307, 64;
	and.b32  	%r309, %r250, 144;
	or.b32  	%r310, %r309, %r308;
	and.b32  	%r311, %r251, 288;
	and.b32  	%r603, %r307, 512;
	shl.b32 	%r312, %r252, 6;
	or.b32  	%r313, %r312, %r603;
	or.b32  	%r314, %r313, %r311;
	or.b32  	%r315, %r314, %r310;
	shl.b32 	%r316, %r253, 6;
	or.b32  	%r317, %r315, %r316;
	bfe.u32 	%r318, %r1, 6, 1;
	or.b32  	%r319, %r317, %r318;
	add.s32 	%r321, %r175, 36864;
	add.s32 	%r37, %r321, %r319;
	or.b32  	%r322, %r318, %r316;
	or.b32  	%r323, %r315, %r322;
	add.s32 	%r324, %r321, %r323;
	add.s32 	%r38, %r324, 2;
	add.s32 	%r39, %r324, 4;
	add.s32 	%r40, %r324, 6;
	add.s32 	%r41, %r324, 8;
	add.s32 	%r42, %r324, 10;
	add.s32 	%r43, %r324, 12;
	add.s32 	%r44, %r324, 14;
	or.b32  	%r325, %r308, 16;
	xor.b32  	%r326, %r325, %r309;
	or.b32  	%r327, %r603, %r326;
	or.b32  	%r328, %r327, %r312;
	or.b32  	%r329, %r328, %r311;
	or.b32  	%r330, %r322, %r329;
	add.s32 	%r45, %r321, %r330;
	or.b32  	%r331, %r308, 18;
	xor.b32  	%r332, %r331, %r309;
	or.b32  	%r333, %r603, %r332;
	or.b32  	%r334, %r333, %r312;
	or.b32  	%r335, %r334, %r311;
	or.b32  	%r336, %r322, %r335;
	add.s32 	%r46, %r321, %r336;
	or.b32  	%r337, %r308, 20;
	xor.b32  	%r338, %r337, %r309;
	or.b32  	%r339, %r603, %r338;
	or.b32  	%r340, %r339, %r312;
	or.b32  	%r341, %r340, %r311;
	or.b32  	%r342, %r322, %r341;
	add.s32 	%r47, %r321, %r342;
	or.b32  	%r343, %r308, 22;
	xor.b32  	%r344, %r343, %r309;
	or.b32  	%r345, %r603, %r344;
	or.b32  	%r346, %r345, %r312;
	or.b32  	%r347, %r346, %r311;
	or.b32  	%r348, %r322, %r347;
	add.s32 	%r48, %r321, %r348;
	or.b32  	%r349, %r308, 24;
	xor.b32  	%r350, %r349, %r309;
	or.b32  	%r351, %r603, %r350;
	or.b32  	%r352, %r351, %r312;
	or.b32  	%r353, %r352, %r311;
	or.b32  	%r354, %r322, %r353;
	add.s32 	%r49, %r321, %r354;
	or.b32  	%r355, %r308, 26;
	xor.b32  	%r356, %r355, %r309;
	or.b32  	%r357, %r603, %r356;
	or.b32  	%r358, %r357, %r312;
	or.b32  	%r359, %r358, %r311;
	or.b32  	%r360, %r322, %r359;
	add.s32 	%r50, %r321, %r360;
	or.b32  	%r361, %r308, 28;
	xor.b32  	%r362, %r361, %r309;
	or.b32  	%r363, %r603, %r362;
	or.b32  	%r364, %r363, %r312;
	or.b32  	%r365, %r364, %r311;
	or.b32  	%r366, %r322, %r365;
	add.s32 	%r51, %r321, %r366;
	or.b32  	%r367, %r308, 30;
	xor.b32  	%r368, %r367, %r309;
	or.b32  	%r369, %r603, %r368;
	or.b32  	%r370, %r369, %r312;
	or.b32  	%r371, %r370, %r311;
	or.b32  	%r372, %r322, %r371;
	add.s32 	%r52, %r321, %r372;
	or.b32  	%r373, %r310, 32;
	xor.b32  	%r374, %r373, %r311;
	or.b32  	%r375, %r603, %r374;
	or.b32  	%r376, %r375, %r312;
	or.b32  	%r377, %r322, %r376;
	add.s32 	%r53, %r321, %r377;
	or.b32  	%r378, %r310, 34;
	xor.b32  	%r379, %r378, %r311;
	or.b32  	%r380, %r603, %r379;
	or.b32  	%r381, %r380, %r312;
	or.b32  	%r382, %r322, %r381;
	add.s32 	%r54, %r321, %r382;
	or.b32  	%r383, %r310, 36;
	xor.b32  	%r384, %r383, %r311;
	or.b32  	%r385, %r603, %r384;
	or.b32  	%r386, %r385, %r312;
	or.b32  	%r387, %r322, %r386;
	add.s32 	%r55, %r321, %r387;
	or.b32  	%r388, %r310, 38;
	xor.b32  	%r389, %r388, %r311;
	or.b32  	%r390, %r603, %r389;
	or.b32  	%r391, %r390, %r312;
	or.b32  	%r392, %r322, %r391;
	add.s32 	%r56, %r321, %r392;
	or.b32  	%r393, %r310, 40;
	xor.b32  	%r394, %r393, %r311;
	or.b32  	%r395, %r603, %r394;
	or.b32  	%r396, %r395, %r312;
	or.b32  	%r397, %r322, %r396;
	add.s32 	%r57, %r321, %r397;
	or.b32  	%r398, %r310, 42;
	xor.b32  	%r399, %r398, %r311;
	or.b32  	%r400, %r603, %r399;
	or.b32  	%r401, %r400, %r312;
	or.b32  	%r402, %r322, %r401;
	add.s32 	%r58, %r321, %r402;
	or.b32  	%r403, %r310, 44;
	xor.b32  	%r404, %r403, %r311;
	or.b32  	%r405, %r603, %r404;
	or.b32  	%r406, %r405, %r312;
	or.b32  	%r407, %r322, %r406;
	add.s32 	%r59, %r321, %r407;
	or.b32  	%r408, %r310, 46;
	xor.b32  	%r409, %r408, %r311;
	or.b32  	%r410, %r603, %r409;
	or.b32  	%r411, %r410, %r312;
	or.b32  	%r412, %r322, %r411;
	add.s32 	%r60, %r321, %r412;
	or.b32  	%r413, %r308, 48;
	or.b32  	%r414, %r311, %r309;
	xor.b32  	%r415, %r414, %r413;
	or.b32  	%r416, %r603, %r415;
	or.b32  	%r417, %r416, %r312;
	or.b32  	%r418, %r316, %r417;
	or.b32  	%r419, %r418, %r318;
	add.s32 	%r61, %r321, %r419;
	or.b32  	%r420, %r308, 50;
	xor.b32  	%r421, %r414, %r420;
	or.b32  	%r422, %r603, %r421;
	or.b32  	%r423, %r422, %r312;
	or.b32  	%r424, %r316, %r423;
	or.b32  	%r425, %r424, %r318;
	add.s32 	%r62, %r321, %r425;
	or.b32  	%r426, %r308, 52;
	xor.b32  	%r427, %r414, %r426;
	or.b32  	%r428, %r603, %r427;
	or.b32  	%r429, %r428, %r312;
	or.b32  	%r430, %r316, %r429;
	or.b32  	%r431, %r430, %r318;
	add.s32 	%r63, %r321, %r431;
	or.b32  	%r432, %r308, 54;
	xor.b32  	%r433, %r414, %r432;
	or.b32  	%r434, %r603, %r433;
	or.b32  	%r435, %r434, %r312;
	or.b32  	%r436, %r316, %r435;
	or.b32  	%r437, %r436, %r318;
	add.s32 	%r64, %r321, %r437;
	or.b32  	%r438, %r308, 56;
	xor.b32  	%r439, %r414, %r438;
	or.b32  	%r440, %r603, %r439;
	or.b32  	%r441, %r440, %r312;
	or.b32  	%r442, %r316, %r441;
	or.b32  	%r443, %r442, %r318;
	add.s32 	%r65, %r321, %r443;
	or.b32  	%r444, %r308, 58;
	xor.b32  	%r445, %r414, %r444;
	or.b32  	%r446, %r603, %r445;
	or.b32  	%r447, %r446, %r312;
	or.b32  	%r448, %r316, %r447;
	or.b32  	%r449, %r448, %r318;
	add.s32 	%r66, %r321, %r449;
	or.b32  	%r450, %r308, 60;
	xor.b32  	%r451, %r414, %r450;
	or.b32  	%r452, %r603, %r451;
	or.b32  	%r453, %r452, %r312;
	or.b32  	%r454, %r316, %r453;
	or.b32  	%r455, %r454, %r318;
	add.s32 	%r67, %r321, %r455;
	or.b32  	%r456, %r308, 62;
	xor.b32  	%r457, %r414, %r456;
	or.b32  	%r458, %r603, %r457;
	or.b32  	%r459, %r458, %r312;
	or.b32  	%r460, %r316, %r459;
	or.b32  	%r461, %r460, %r318;
	add.s32 	%r68, %r321, %r461;
	and.b32  	%r69, %r249, 134217724;
	shr.u32 	%r462, %r321, 4;
	cvt.u64.u32 	%rd69, %r462;
	and.b64  	%rd70, %rd69, 16383;
	or.b64  	%rd72, %rd70, -9223371899399045120;
	add.s64 	%rd74, %rd70, -9223371899399045118;
	mov.f32 	%f521, 0f00000000;
	mov.b32 	%r600, -1;
	mov.b32 	%r599, 0;
	mov.f32 	%f526, %f521;
	mov.f32 	%f527, %f521;
	mov.f32 	%f528, %f521;
	mov.f32 	%f529, %f521;
	mov.f32 	%f530, %f521;
	mov.f32 	%f531, %f521;
	mov.f32 	%f532, %f521;
	mov.f32 	%f533, %f521;
	mov.f32 	%f534, %f521;
	mov.f32 	%f535, %f521;
	mov.f32 	%f536, %f521;
	mov.f32 	%f537, %f521;
	mov.f32 	%f538, %f521;
	mov.f32 	%f539, %f521;
	mov.f32 	%f540, %f521;
	mov.f32 	%f541, %f521;
	mov.f32 	%f542, %f521;
	mov.f32 	%f543, %f521;
	mov.f32 	%f544, %f521;
	mov.f32 	%f545, %f521;
	mov.f32 	%f546, %f521;
	mov.f32 	%f547, %f521;
	mov.f32 	%f548, %f521;
	mov.f32 	%f549, %f521;
	mov.f32 	%f550, %f521;
	mov.f32 	%f551, %f521;
	mov.f32 	%f552, %f521;
	mov.f32 	%f553, %f521;
	mov.f32 	%f554, %f521;
	mov.f32 	%f555, %f521;
	mov.f32 	%f556, %f521;
	mov.f32 	%f557, %f521;
	mov.f32 	%f558, %f521;
	mov.f32 	%f559, %f521;
	mov.f32 	%f560, %f521;
	mov.f32 	%f561, %f521;
	mov.f32 	%f562, %f521;
	mov.f32 	%f563, %f521;
	mov.f32 	%f564, %f521;
	mov.f32 	%f565, %f521;
	mov.f32 	%f566, %f521;
	mov.f32 	%f567, %f521;
	mov.f32 	%f568, %f521;
	mov.f32 	%f569, %f521;
	mov.f32 	%f570, %f521;
	mov.f32 	%f571, %f521;
	mov.f32 	%f572, %f521;
	mov.f32 	%f573, %f521;
	mov.f32 	%f574, %f521;
	mov.f32 	%f575, %f521;
	mov.f32 	%f576, %f521;
	mov.f32 	%f577, %f521;
	mov.f32 	%f578, %f521;
	mov.f32 	%f579, %f521;
	mov.f32 	%f580, %f521;
	mov.f32 	%f581, %f521;
	mov.f32 	%f582, %f521;
	mov.f32 	%f583, %f521;
	mov.f32 	%f584, %f521;
	mov.f32 	%f585, %f521;
	mov.f32 	%f586, %f521;
	mov.f32 	%f587, %f521;
	mov.f32 	%f588, %f521;
	mov.f32 	%f589, %f521;
	mov.u32 	%r602, %r599;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	.loc	1 37 19                         // matmul-with-tma-v3.py:37:19
	setp.lt.s32 	%p78, %r602, %r8;
	add.s32 	%r474, %r600, 1;
	setp.gt.s32 	%p79, %r474, 2;
	selp.b32 	%r600, 0, %r474, %p79;
	selp.u32 	%r475, 1, 0, %p79;
	xor.b32  	%r599, %r599, %r475;
	shl.b32 	%r476, %r600, 3;
	add.s32 	%r463, %r171, %r476;
	bar.sync 	0;
	// begin inline asm
	{
	.reg .pred P1;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 P1, [%r463], %r599;
	@!P1 bra.uni waitLoop;
	}

	// end inline asm
	.loc	1 39 24                         // matmul-with-tma-v3.py:39:24
	shl.b32 	%r479, %r600, 12;
	add.s32 	%r481, %r179, %r479;
	add.s32 	%r482, %r481, %r11;
	ld.shared.u8 	%rs1, [%r482];
	add.s32 	%r483, %r481, %r12;
	ld.shared.u8 	%rs2, [%r483];
	add.s32 	%r484, %r481, %r13;
	ld.shared.u8 	%rs3, [%r484];
	add.s32 	%r485, %r481, %r14;
	ld.shared.u8 	%rs4, [%r485];
	ld.shared.u8 	%rs5, [%r482+512];
	add.s32 	%r486, %r481, %r15;
	ld.shared.u8 	%rs6, [%r486];
	add.s32 	%r487, %r481, %r16;
	ld.shared.u8 	%rs7, [%r487];
	add.s32 	%r488, %r481, %r17;
	ld.shared.u8 	%rs8, [%r488];
	ld.shared.u8 	%rs9, [%r482+1024];
	add.s32 	%r489, %r481, %r18;
	ld.shared.u8 	%rs10, [%r489];
	add.s32 	%r490, %r481, %r19;
	ld.shared.u8 	%rs11, [%r490];
	add.s32 	%r491, %r481, %r20;
	ld.shared.u8 	%rs12, [%r491];
	ld.shared.u8 	%rs13, [%r482+1536];
	add.s32 	%r492, %r481, %r21;
	ld.shared.u8 	%rs14, [%r492];
	add.s32 	%r493, %r481, %r22;
	ld.shared.u8 	%rs15, [%r493];
	add.s32 	%r494, %r481, %r23;
	ld.shared.u8 	%rs16, [%r494];
	ld.shared.u8 	%rs17, [%r482+2048];
	add.s32 	%r495, %r481, %r24;
	ld.shared.u8 	%rs18, [%r495];
	add.s32 	%r496, %r481, %r25;
	ld.shared.u8 	%rs19, [%r496];
	add.s32 	%r497, %r481, %r26;
	ld.shared.u8 	%rs20, [%r497];
	ld.shared.u8 	%rs21, [%r482+2560];
	add.s32 	%r498, %r481, %r27;
	ld.shared.u8 	%rs22, [%r498];
	add.s32 	%r499, %r481, %r28;
	ld.shared.u8 	%rs23, [%r499];
	add.s32 	%r500, %r481, %r29;
	ld.shared.u8 	%rs24, [%r500];
	ld.shared.u8 	%rs25, [%r482+3072];
	add.s32 	%r501, %r481, %r30;
	ld.shared.u8 	%rs26, [%r501];
	add.s32 	%r502, %r481, %r31;
	ld.shared.u8 	%rs27, [%r502];
	add.s32 	%r503, %r481, %r32;
	ld.shared.u8 	%rs28, [%r503];
	ld.shared.u8 	%rs29, [%r482+3584];
	add.s32 	%r504, %r481, %r33;
	ld.shared.u8 	%rs30, [%r504];
	add.s32 	%r505, %r481, %r34;
	ld.shared.u8 	%rs31, [%r505];
	add.s32 	%r506, %r481, %r35;
	ld.shared.u8 	%rs32, [%r506];
	st.shared.u8 	[%r37], %rs1;
	st.shared.u8 	[%r38], %rs2;
	st.shared.u8 	[%r39], %rs3;
	st.shared.u8 	[%r40], %rs4;
	st.shared.u8 	[%r41], %rs5;
	st.shared.u8 	[%r42], %rs6;
	st.shared.u8 	[%r43], %rs7;
	st.shared.u8 	[%r44], %rs8;
	st.shared.u8 	[%r45], %rs9;
	st.shared.u8 	[%r46], %rs10;
	st.shared.u8 	[%r47], %rs11;
	st.shared.u8 	[%r48], %rs12;
	st.shared.u8 	[%r49], %rs13;
	st.shared.u8 	[%r50], %rs14;
	st.shared.u8 	[%r51], %rs15;
	st.shared.u8 	[%r52], %rs16;
	st.shared.u8 	[%r53], %rs17;
	st.shared.u8 	[%r54], %rs18;
	st.shared.u8 	[%r55], %rs19;
	st.shared.u8 	[%r56], %rs20;
	st.shared.u8 	[%r57], %rs21;
	st.shared.u8 	[%r58], %rs22;
	st.shared.u8 	[%r59], %rs23;
	st.shared.u8 	[%r60], %rs24;
	st.shared.u8 	[%r61], %rs25;
	st.shared.u8 	[%r62], %rs26;
	st.shared.u8 	[%r63], %rs27;
	st.shared.u8 	[%r64], %rs28;
	st.shared.u8 	[%r65], %rs29;
	st.shared.u8 	[%r66], %rs30;
	st.shared.u8 	[%r67], %rs31;
	st.shared.u8 	[%r68], %rs32;
	.loc	1 38 24                         // matmul-with-tma-v3.py:38:24
	shl.b32 	%r507, %r600, 13;
	add.s32 	%r508, %r175, %r507;
	.loc	1 40 32                         // matmul-with-tma-v3.py:40:32
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32	%r509, %r69, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r510, %r509, 6;
	and.b32  	%r511, %r510, 192;
	cvt.u64.u32 	%rd81, %r511;
	shr.u32 	%r512, %r508, 4;
	cvt.u64.u32 	%rd82, %r512;
	and.b64  	%rd83, %rd82, 16383;
	add.s64 	%rd84, %rd83, %rd81;
	or.b64  	%rd71, %rd84, -9223371899382267904;
	mov.pred 	%p69, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {%f526,%f527,%f528,%f529,%f530,%f531,%f532,%f533,%f534,%f535,%f536,%f537,%f538,%f539,%f540,%f541,%f542,%f543,%f544,%f545,%f546,%f547,%f548,%f549,%f550,%f551,%f552,%f553,%f554,%f555,%f556,%f557}, %rd71, %rd72, %p69, 1, 1;
	// end inline asm
	add.s64 	%rd73, %rd84, -9223371899382267902;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {%f526,%f527,%f528,%f529,%f530,%f531,%f532,%f533,%f534,%f535,%f536,%f537,%f538,%f539,%f540,%f541,%f542,%f543,%f544,%f545,%f546,%f547,%f548,%f549,%f550,%f551,%f552,%f553,%f554,%f555,%f556,%f557}, %rd73, %rd74, %p69, 1, 1;
	// end inline asm
	add.s64 	%rd75, %rd84, -9223371899382267648;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {%f558,%f559,%f560,%f561,%f562,%f563,%f564,%f565,%f566,%f567,%f568,%f569,%f570,%f571,%f572,%f573,%f574,%f575,%f576,%f577,%f578,%f579,%f580,%f581,%f582,%f583,%f584,%f585,%f586,%f587,%f588,%f589}, %rd75, %rd72, %p69, 1, 1;
	// end inline asm
	add.s64 	%rd77, %rd84, -9223371899382267646;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {%f558,%f559,%f560,%f561,%f562,%f563,%f564,%f565,%f566,%f567,%f568,%f569,%f570,%f571,%f572,%f573,%f574,%f575,%f576,%f577,%f578,%f579,%f580,%f581,%f582,%f583,%f584,%f585,%f586,%f587,%f588,%f589}, %rd77, %rd74, %p69, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%f450, %r508;
	mov.b32 	%f453, %r321;
	mov.f32 	%f455, %f521;
	mov.f32 	%f451, %f521;
	mov.f32 	%f452, %f521;
	mov.f32 	%f454, %f521;
	// begin inline asm
	// wait for regs: %f526,%f527,%f528,%f529,%f530,%f531,%f532,%f533,%f534,%f535,%f536,%f537,%f538,%f539,%f540,%f541,%f542,%f543,%f544,%f545,%f546,%f547,%f548,%f549,%f550,%f551,%f552,%f553,%f554,%f555,%f556,%f557,%f558,%f559,%f560,%f561,%f562,%f563,%f564,%f565,%f566,%f567,%f568,%f569,%f570,%f571,%f572,%f573,%f574,%f575,%f576,%f577,%f578,%f579,%f580,%f581,%f582,%f583,%f584,%f585,%f586,%f587,%f588,%f589,%f450,%f451,%f452,%f453,%f454,%f455
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 37 19                         // matmul-with-tma-v3.py:37:19
	add.s32 	%r514, %r601, 1;
	setp.lt.s32 	%p80, %r514, 3;
	selp.b32 	%r601, %r514, 0, %p80;
	shl.b32 	%r515, %r601, 3;
	add.s32 	%r465, %r171, %r515;
	and.pred  	%p73, %p86, %p78;
	// begin inline asm
	@%p73 mbarrier.arrive.expect_tx.shared.b64 _, [%r465], 12288;
	// end inline asm
	.loc	1 38 24                         // matmul-with-tma-v3.py:38:24
	shl.b32 	%r516, %r601, 13;
	add.s32 	%r466, %r175, %r516;
	bar.sync 	0;
	elect.sync 	%r517|%p81, -1;
	and.pred  	%p82, %p78, %p81;
	and.pred  	%p74, %p61, %p82;
	// begin inline asm
	@%p74 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r466], [%rd62, {%r598, %r564}], [%r465];
	// end inline asm
	.loc	1 39 24                         // matmul-with-tma-v3.py:39:24
	shl.b32 	%r518, %r601, 12;
	add.s32 	%r470, %r179, %r518;
	bar.sync 	0;
	elect.sync 	%r519|%p83, -1;
	and.pred  	%p84, %p78, %p83;
	and.pred  	%p75, %p61, %p84;
	// begin inline asm
	@%p75 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r470], [%rd63, {%r563, %r598}], [%r465];
	// end inline asm
	.loc	1 37 19                         // matmul-with-tma-v3.py:37:19
	add.s32 	%r602, %r602, 1;
	add.s32 	%r598, %r598, 64;
	setp.ne.s32 	%p85, %r2, %r602;
	@%p85 bra 	$L__BB0_3;
// %bb.4:                               // %._crit_edge.loopexit
	.loc	1 42 33                         // matmul-with-tma-v3.py:42:33
	cvt.rn.f16x2.f32 	%r637, %f589, %f588;
	cvt.rn.f16x2.f32 	%r636, %f587, %f586;
	cvt.rn.f16x2.f32 	%r635, %f585, %f584;
	cvt.rn.f16x2.f32 	%r634, %f583, %f582;
	cvt.rn.f16x2.f32 	%r633, %f581, %f580;
	cvt.rn.f16x2.f32 	%r632, %f579, %f578;
	cvt.rn.f16x2.f32 	%r631, %f577, %f576;
	cvt.rn.f16x2.f32 	%r630, %f575, %f574;
	cvt.rn.f16x2.f32 	%r629, %f573, %f572;
	cvt.rn.f16x2.f32 	%r628, %f571, %f570;
	cvt.rn.f16x2.f32 	%r627, %f569, %f568;
	cvt.rn.f16x2.f32 	%r626, %f567, %f566;
	cvt.rn.f16x2.f32 	%r625, %f565, %f564;
	cvt.rn.f16x2.f32 	%r624, %f563, %f562;
	cvt.rn.f16x2.f32 	%r623, %f561, %f560;
	cvt.rn.f16x2.f32 	%r622, %f559, %f558;
	cvt.rn.f16x2.f32 	%r621, %f557, %f556;
	cvt.rn.f16x2.f32 	%r620, %f555, %f554;
	cvt.rn.f16x2.f32 	%r619, %f553, %f552;
	cvt.rn.f16x2.f32 	%r618, %f551, %f550;
	cvt.rn.f16x2.f32 	%r617, %f549, %f548;
	cvt.rn.f16x2.f32 	%r616, %f547, %f546;
	cvt.rn.f16x2.f32 	%r615, %f545, %f544;
	cvt.rn.f16x2.f32 	%r614, %f543, %f542;
	cvt.rn.f16x2.f32 	%r613, %f541, %f540;
	cvt.rn.f16x2.f32 	%r612, %f539, %f538;
	cvt.rn.f16x2.f32 	%r611, %f537, %f536;
	cvt.rn.f16x2.f32 	%r610, %f535, %f534;
	cvt.rn.f16x2.f32 	%r609, %f533, %f532;
	cvt.rn.f16x2.f32 	%r608, %f531, %f530;
	cvt.rn.f16x2.f32 	%r607, %f529, %f528;
	cvt.rn.f16x2.f32 	%r606, %f527, %f526;
	bra.uni 	$L__BB0_5;
$L__BB0_1:                              // %.._crit_edge_crit_edge
	.loc	1 43 63                         // matmul-with-tma-v3.py:43:63
	and.b32  	%r605, %r1, 2;
	and.b32  	%r604, %r1, 4;
	shl.b32 	%r244, %r1, 6;
	and.b32  	%r603, %r244, 512;
	mov.u32 	%r607, %r606;
	mov.u32 	%r608, %r606;
	mov.u32 	%r609, %r606;
	mov.u32 	%r610, %r606;
	mov.u32 	%r611, %r606;
	mov.u32 	%r612, %r606;
	mov.u32 	%r613, %r606;
	mov.u32 	%r614, %r606;
	mov.u32 	%r615, %r606;
	mov.u32 	%r616, %r606;
	mov.u32 	%r617, %r606;
	mov.u32 	%r618, %r606;
	mov.u32 	%r619, %r606;
	mov.u32 	%r620, %r606;
	mov.u32 	%r621, %r606;
	mov.u32 	%r622, %r606;
	mov.u32 	%r623, %r606;
	mov.u32 	%r624, %r606;
	mov.u32 	%r625, %r606;
	mov.u32 	%r626, %r606;
	mov.u32 	%r627, %r606;
	mov.u32 	%r628, %r606;
	mov.u32 	%r629, %r606;
	mov.u32 	%r630, %r606;
	mov.u32 	%r631, %r606;
	mov.u32 	%r632, %r606;
	mov.u32 	%r633, %r606;
	mov.u32 	%r634, %r606;
	mov.u32 	%r635, %r606;
	mov.u32 	%r636, %r606;
	mov.u32 	%r637, %r606;
$L__BB0_5:                              // %._crit_edge
	.loc	1 37 19                         // matmul-with-tma-v3.py:37:19
	cp.async.wait_group 0;
	bar.sync 	0;
	// begin inline asm
	@%p86 mbarrier.inval.shared::cta.b64 [%r171];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p86 mbarrier.inval.shared::cta.b64 [%r172];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p86 mbarrier.inval.shared::cta.b64 [%r173];
	// end inline asm
	.loc	1 43 63                         // matmul-with-tma-v3.py:43:63
	and.b32  	%r566, %r1, 1;
	neg.s32 	%r567, %r566;
	and.b32  	%r568, %r567, 72;
	setp.eq.s32 	%p91, %r605, 0;
	selp.b32 	%r569, 0, 144, %p91;
	setp.eq.s32 	%p92, %r604, 0;
	selp.b32 	%r570, 0, 288, %p92;
	or.b32  	%r571, %r569, %r603;
	or.b32  	%r572, %r571, %r568;
	or.b32  	%r573, %r572, %r570;
	shr.u32 	%r574, %r1, 1;
	and.b32  	%r575, %r574, 8;
	xor.b32  	%r576, %r573, %r575;
	shl.b32 	%r577, %r1, 5;
	and.b32  	%r578, %r577, 1024;
	or.b32  	%r579, %r576, %r578;
	and.b32  	%r580, %r577, 2048;
	or.b32  	%r581, %r579, %r580;
	shl.b32 	%r582, %r581, 1;
	add.s32 	%r523, %r175, %r582;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r523], {%r606, %r607, %r608, %r609};
	// end inline asm
	xor.b32  	%r583, %r581, 16;
	shl.b32 	%r584, %r583, 1;
	add.s32 	%r528, %r175, %r584;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r528], {%r610, %r611, %r612, %r613};
	// end inline asm
	xor.b32  	%r585, %r581, 32;
	shl.b32 	%r586, %r585, 1;
	add.s32 	%r533, %r175, %r586;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r533], {%r614, %r615, %r616, %r617};
	// end inline asm
	xor.b32  	%r587, %r581, 48;
	shl.b32 	%r588, %r587, 1;
	add.s32 	%r538, %r175, %r588;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r538], {%r618, %r619, %r620, %r621};
	// end inline asm
	xor.b32  	%r589, %r581, 4096;
	shl.b32 	%r590, %r589, 1;
	add.s32 	%r543, %r175, %r590;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r543], {%r622, %r623, %r624, %r625};
	// end inline asm
	xor.b32  	%r591, %r581, 4112;
	shl.b32 	%r592, %r591, 1;
	add.s32 	%r548, %r175, %r592;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r548], {%r626, %r627, %r628, %r629};
	// end inline asm
	xor.b32  	%r593, %r581, 4128;
	shl.b32 	%r594, %r593, 1;
	add.s32 	%r553, %r175, %r594;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r553], {%r630, %r631, %r632, %r633};
	// end inline asm
	xor.b32  	%r595, %r581, 4144;
	shl.b32 	%r596, %r595, 1;
	add.s32 	%r558, %r175, %r596;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r558], {%r634, %r635, %r636, %r637};
	// end inline asm
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r597|%p93, -1;
	and.pred  	%p89, %p61, %p93;
	// begin inline asm
	@%p89 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd85, {%r563, %r564}], [%r175];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 0;
	.loc	1 43 4                          // matmul-with-tma-v3.py:43:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py"
	.file	2 "/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 186                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xb3 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 45
.b8 119
.b8 105
.b8 116
.b8 104
.b8 45
.b8 116
.b8 109
.b8 97
.b8 45
.b8 118
.b8 51
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 84
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 45
.b8 77
.b8 76
.b8 45
.b8 82
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 47
.b8 101
.b8 120
.b8 97
.b8 109
.b8 112
.b8 108
.b8 101
.b8 115
.b8 47
.b8 99
.b8 117
.b8 98
.b8 105
.b8 110
.b8 95
.b8 114
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 47
.b8 115
.b8 109
.b8 49
.b8 50
.b8 48
.b8 0
.b8 2                                   // Abbrev [2] 0x69:0x26 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 95
.b8 109
.b8 97
.b8 107
.b8 101
.b8 95
.b8 116
.b8 101
.b8 110
.b8 115
.b8 111
.b8 114
.b8 95
.b8 100
.b8 101
.b8 115
.b8 99
.b8 105
.b8 112
.b8 116
.b8 111
.b8 114
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x8f:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 105                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xa4:0x18 DW_TAG_inlined_subroutine
.b32 105                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 37                                  // DW_AT_call_line
.b8 30                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
