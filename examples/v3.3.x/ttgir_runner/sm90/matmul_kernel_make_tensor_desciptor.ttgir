#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
#loc = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":9:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 64, 32]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 64, transposed = false, elementBitWidth = 8}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared2 = #ttg.nvmma_shared<{swizzlingByteWidth = 64, transposed = true, elementBitWidth = 8}>
#shared3 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel_make_tensor_desciptor(%arg0: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":9:0), %arg1: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":9:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":9:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":9:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":9:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":9:0)) attributes {noinline = false} {
    %c2_i64 = arith.constant 2 : i64 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.extsi %arg4 : i32 to i64 loc(#loc4)
    %3 = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc4)
    tt.experimental_tensormap_create %3, %arg0, [%c64_i32, %c128_i32], [%arg4, %arg3], [%2], [%c1_i32, %c1_i32] {elem_type = 0 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 2 : i32} : (!tt.ptr<i8>, !tt.ptr<f8E5M2>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc4)
    tt.experimental_tensormap_fenceproxy_acquire %3 : !tt.ptr<i8> loc(#loc4)
    %4 = arith.extsi %arg5 : i32 to i64 loc(#loc5)
    %5 = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc5)
    tt.experimental_tensormap_create %5, %arg1, [%c64_i32, %c64_i32], [%arg5, %arg4], [%4], [%c1_i32, %c1_i32] {elem_type = 0 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 2 : i32} : (!tt.ptr<i8>, !tt.ptr<f8E5M2>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc5)
    tt.experimental_tensormap_fenceproxy_acquire %5 : !tt.ptr<i8> loc(#loc5)
    %6 = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc6)
    %7 = arith.muli %4, %c2_i64 : i64 loc(#loc6)
    tt.experimental_tensormap_create %6, %arg2, [%c64_i32, %c128_i32], [%arg5, %arg3], [%7], [%c1_i32, %c1_i32] {elem_type = 1 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 3 : i32} : (!tt.ptr<i8>, !tt.ptr<f16>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc6)
    tt.experimental_tensormap_fenceproxy_acquire %6 : !tt.ptr<i8> loc(#loc6)
    %8 = arith.addi %arg4, %c63_i32 : i32 loc(#loc20)
    %9 = arith.divsi %8, %c64_i32 : i32 loc(#loc21)
    %10 = arith.muli %0, %c128_i32 : i32 loc(#loc10)
    %11 = arith.muli %1, %c64_i32 : i32 loc(#loc11)
    %12 = ttg.local_alloc  : () -> !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> loc(#loc12)
    %13 = ttg.local_alloc  : () -> !ttg.memdesc<3x64x64xf8E5M2, #shared, #smem, mutable> loc(#loc13)
    %14 = ttg.local_alloc  : () -> !ttg.memdesc<3xi64, #shared1, #smem, mutable> loc(#loc14)
    %15 = ttg.memdesc_subview %14[%c0_i32] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
    ttng.init_barrier %15, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
    %16 = ttg.memdesc_subview %14[%c1_i32] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
    ttng.init_barrier %16, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
    %17 = ttg.memdesc_subview %14[%c2_i32] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
    ttng.init_barrier %17, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
    %18 = arith.cmpi sgt, %9, %c0_i32 : i32 loc(#loc14)
    ttng.barrier_expect %15, 12288, %18 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
    %19 = ttg.memdesc_subview %12[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc12)
    ttng.async_tma_copy_global_to_local %3[%10, %c0_i32] %19, %15, %18 : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc12)
    %20 = ttg.memdesc_subview %13[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 3x64x64> loc(#loc13)
    ttng.async_tma_copy_global_to_local %5[%c0_i32, %11] %20, %15, %18 : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 3x64x64> loc(#loc13)
    %21 = arith.cmpi sgt, %9, %c1_i32 : i32 loc(#loc14)
    ttng.barrier_expect %16, 12288, %21 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
    %22 = ttg.memdesc_subview %12[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc12)
    ttng.async_tma_copy_global_to_local %3[%10, %c64_i32] %22, %16, %21 : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc12)
    %23 = ttg.memdesc_subview %13[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 3x64x64> loc(#loc13)
    ttng.async_tma_copy_global_to_local %5[%c64_i32, %11] %23, %16, %21 : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 3x64x64> loc(#loc13)
    %24:4 = scf.for %arg6 = %c0_i32 to %9 step %c1_i32 iter_args(%arg7 = %cst, %arg8 = %c1_i32, %arg9 = %c-1_i32, %arg10 = %c0_i32) -> (tensor<128x64xf32, #mma>, i32, i32, i32)  : i32 {
      %28 = arith.subi %9, %c2_i32 : i32 loc(#loc14)
      %29 = arith.cmpi slt, %arg6, %28 : i32 loc(#loc14)
      %30 = arith.addi %arg9, %c1_i32 : i32 loc(#loc14)
      %31 = arith.cmpi slt, %30, %c3_i32 : i32 loc(#loc14)
      %32 = arith.select %31, %30, %c0_i32 : i32 loc(#loc14)
      %33 = arith.xori %arg10, %c1_i32 : i32 loc(#loc14)
      %34 = arith.select %31, %arg10, %33 : i32 loc(#loc14)
      %35 = ttg.memdesc_subview %14[%32] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
      ttng.wait_barrier %35, %34 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
      %36 = ttg.memdesc_subview %13[%32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 3x64x64> loc(#loc13)
      %37 = ttg.local_load %36 : !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xf8E5M2, #blocked> loc(#loc13)
      %38 = ttg.local_alloc %37 : (tensor<64x64xf8E5M2, #blocked>) -> !ttg.memdesc<64x64xf8E5M2, #shared2, #smem> loc(#loc13)
      %39 = ttg.memdesc_subview %12[%32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc12)
      ttng.fence_async_shared {bCluster = false} loc(#loc15)
      %40 = ttng.warp_group_dot %39, %38, %arg7 {inputPrecision = 0 : i32, isAsync = true, maxNumImpreciseAcc = 1073741824 : i32} : !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> * !ttg.memdesc<64x64xf8E5M2, #shared2, #smem> -> tensor<128x64xf32, #mma> loc(#loc15)
      %41:3 = ttng.warp_group_dot_wait %40, %39, %38 {pendings = 0 : i32} : tensor<128x64xf32, #mma>, !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf8E5M2, #shared2, #smem> loc(#loc15)
      %42 = arith.addi %arg8, %c1_i32 : i32 loc(#loc14)
      %43 = arith.cmpi slt, %42, %c3_i32 : i32 loc(#loc14)
      %44 = arith.select %43, %42, %c0_i32 : i32 loc(#loc14)
      %45 = arith.addi %arg6, %c2_i32 : i32 loc(#loc14)
      %46 = arith.muli %45, %c64_i32 : i32 loc(#loc16)
      %47 = ttg.memdesc_subview %14[%44] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
      ttng.barrier_expect %47, 12288, %29 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
      %48 = ttg.memdesc_subview %12[%44, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc12)
      ttng.async_tma_copy_global_to_local %3[%10, %46] %48, %47, %29 : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc12)
      %49 = ttg.memdesc_subview %13[%44, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 3x64x64> loc(#loc13)
      ttng.async_tma_copy_global_to_local %5[%46, %11] %49, %47, %29 : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 3x64x64> loc(#loc13)
      scf.yield %41#0, %44, %32, %34 : tensor<128x64xf32, #mma>, i32, i32, i32 loc(#loc14)
    } loc(#loc14)
    %25 = ttg.async_wait  {num = 0 : i32} loc(#loc14)
    ttng.inval_barrier %15 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
    ttng.inval_barrier %16 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
    ttng.inval_barrier %17 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc14)
    ttg.local_dealloc %14 : !ttg.memdesc<3xi64, #shared1, #smem, mutable> loc(#loc14)
    ttg.local_dealloc %13 : !ttg.memdesc<3x64x64xf8E5M2, #shared, #smem, mutable> loc(#loc14)
    ttg.local_dealloc %12 : !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> loc(#loc14)
    %26 = arith.truncf %24#0 : tensor<128x64xf32, #mma> to tensor<128x64xf16, #mma> loc(#loc17)
    %27 = ttg.local_alloc %26 : (tensor<128x64xf16, #mma>) -> !ttg.memdesc<128x64xf16, #shared3, #smem, mutable> loc(#loc18)
    ttng.fence_async_shared {bCluster = false} loc(#loc18)
    ttng.async_tma_copy_local_to_global %6[%10, %11] %27 : !tt.ptr<i8>, !ttg.memdesc<128x64xf16, #shared3, #smem, mutable> loc(#loc18)
    ttng.async_tma_store_wait {pendings = 0 : i32} loc(#loc18)
    tt.return loc(#loc19)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":14:26)
#loc3 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":15:26)
#loc4 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":18:8)
#loc5 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":24:8)
#loc6 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":30:8)
#loc7 = loc("/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py":40:22)
#loc8 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":37:30)
#loc9 = loc("/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py":40:28)
#loc10 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":38:33)
#loc11 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":39:51)
#loc12 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":38:24)
#loc13 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":39:24)
#loc14 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":37:19)
#loc15 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":40:32)
#loc16 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":38:51)
#loc17 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":42:33)
#loc18 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":43:63)
#loc19 = loc("/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm120/matmul-with-tma-v3.py":43:4)
#loc20 = loc(callsite(#loc7 at #loc8))
#loc21 = loc(callsite(#loc9 at #loc8))
