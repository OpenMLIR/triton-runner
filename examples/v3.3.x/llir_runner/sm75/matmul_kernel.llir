; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !10
  %13 = shl i32 %12, 4, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 4, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = and i32 %14, 15, !dbg !12
  %18 = or disjoint i32 %16, %13, !dbg !13
  %19 = or disjoint i32 %18, 8, !dbg !13
  %20 = shl i32 %11, 4, !dbg !14
  %21 = or disjoint i32 %20, %17, !dbg !15
  %22 = mul i32 %6, %18, !dbg !16
  %23 = mul i32 %6, %19, !dbg !16
  %24 = sext i32 %22 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = sext i32 %23 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = sext i32 %21 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = icmp sgt i32 %5, 0, !dbg !19
  br i1 %30, label %.lr.ph.preheader, label %._crit_edge, !dbg !19

.lr.ph.preheader:                                 ; preds = %10
  %wide.trip.count = zext nneg i32 %5 to i64, !dbg !19
  br label %.lr.ph, !dbg !19

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph.preheader ], [ %indvars.iv.next, %.lr.ph ]
  %31 = phi float [ 0.000000e+00, %.lr.ph.preheader ], [ %47, %.lr.ph ]
  %32 = phi float [ 0.000000e+00, %.lr.ph.preheader ], [ %48, %.lr.ph ]
  %33 = getelementptr float, ptr addrspace(1) %25, i64 %indvars.iv, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %27, i64 %indvars.iv, !dbg !20
  %35 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !21
  %36 = mul i32 %7, %35, !dbg !21
  %37 = sext i32 %36 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %29, i64 %37, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %33) #2, !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %34) #2, !dbg !23
  %42 = bitcast i32 %41 to float, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %38) #2, !dbg !24
  %44 = bitcast i32 %43 to float, !dbg !24
  %45 = fmul float %40, %44, !dbg !25
  %46 = fmul float %42, %44, !dbg !25
  %47 = fadd float %31, %45, !dbg !26
  %48 = fadd float %32, %46, !dbg !26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !19
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !19
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %.lr.ph, !dbg !19

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %49 = bitcast float %47 to <1 x i32>, !dbg !27
  %50 = bitcast float %48 to <1 x i32>, !dbg !27
  br label %._crit_edge, !dbg !12

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %10
  %51 = phi <1 x i32> [ zeroinitializer, %10 ], [ %49, %._crit_edge.loopexit ], !dbg !28
  %52 = phi <1 x i32> [ zeroinitializer, %10 ], [ %50, %._crit_edge.loopexit ], !dbg !28
  %53 = shl i32 %14, 1, !dbg !12
  %54 = and i32 %53, 14, !dbg !12
  %55 = or disjoint i32 %54, %20, !dbg !15
  %56 = lshr i32 %14, 3, !dbg !12
  %57 = and i32 %56, 15, !dbg !12
  %58 = or disjoint i32 %57, %13, !dbg !13
  %59 = mul i32 %8, %58, !dbg !29
  %60 = sext i32 %59 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !30
  %62 = sext i32 %55 to i64, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %61, i64 %62, !dbg !31
  %64 = icmp slt i32 %58, %3, !dbg !32
  %65 = icmp slt i32 %55, %4, !dbg !33
  %66 = and i1 %64, %65, !dbg !34
  %67 = and i32 %14, 127, !dbg !27
  %68 = and i32 %53, 254, !dbg !27
  %69 = and i32 %56, 14, !dbg !27
  %70 = add nuw nsw i32 %69, %67, !dbg !27
  %71 = zext nneg i32 %70 to i64, !dbg !27
  %72 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %71, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %51, i1 true) #2, !dbg !27
  %73 = or disjoint i32 %67, 128, !dbg !27
  %74 = lshr i32 %73, 3, !dbg !27
  %75 = and i32 %74, 30, !dbg !27
  %76 = add nuw nsw i32 %75, %73, !dbg !27
  %77 = zext nneg i32 %76 to i64, !dbg !27
  %78 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %77, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %78, <1 x i32> %52, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %79 = lshr i32 %53, 3, !dbg !27
  %80 = and i32 %79, 30, !dbg !27
  %81 = add nuw nsw i32 %80, %68, !dbg !27
  %82 = zext nneg i32 %81 to i64, !dbg !27
  %83 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %82, !dbg !27
  %.extract = load i32, ptr addrspace(3) %83, align 8, !dbg !27
  %84 = getelementptr inbounds nuw i8, ptr addrspace(3) %83, i64 4, !dbg !27
  %.extract5 = load i32, ptr addrspace(3) %84, align 4, !dbg !27
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %63, i1 %66) #2, !dbg !27
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "matmul.py", directory: "/home/ubuntu/triton-ml-runner/examples/cubin_runner/sm75")
!4 = !{ptr @matmul_kernel, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !3, file: !3, line: 8, type: !7, scopeLine: 8, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 16, column: 26, scope: !6)
!10 = !DILocation(line: 17, column: 26, scope: !6)
!11 = !DILocation(line: 19, column: 21, scope: !6)
!12 = !DILocation(line: 19, column: 49, scope: !6)
!13 = !DILocation(line: 19, column: 36, scope: !6)
!14 = !DILocation(line: 20, column: 21, scope: !6)
!15 = !DILocation(line: 20, column: 36, scope: !6)
!16 = !DILocation(line: 23, column: 39, scope: !6)
!17 = !DILocation(line: 23, column: 21, scope: !6)
!18 = !DILocation(line: 24, column: 21, scope: !6)
!19 = !DILocation(line: 29, column: 19, scope: !6)
!20 = !DILocation(line: 30, column: 31, scope: !6)
!21 = !DILocation(line: 31, column: 35, scope: !6)
!22 = !DILocation(line: 31, column: 31, scope: !6)
!23 = !DILocation(line: 33, column: 20, scope: !6)
!24 = !DILocation(line: 34, column: 20, scope: !6)
!25 = !DILocation(line: 35, column: 27, scope: !6)
!26 = !DILocation(line: 35, column: 23, scope: !6)
!27 = !DILocation(line: 40, column: 21, scope: !6)
!28 = !DILocation(line: 26, column: 27, scope: !6)
!29 = !DILocation(line: 38, column: 39, scope: !6)
!30 = !DILocation(line: 38, column: 21, scope: !6)
!31 = !DILocation(line: 38, column: 51, scope: !6)
!32 = !DILocation(line: 39, column: 32, scope: !6)
!33 = !DILocation(line: 39, column: 56, scope: !6)
!34 = !DILocation(line: 39, column: 38, scope: !6)
!35 = !DILocation(line: 40, column: 4, scope: !6)
