; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel_make_tensor_desciptor(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, ptr addrspace(1) %6) local_unnamed_addr #0 !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %10 = sext i32 %4 to i64, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y(), !dbg !10
  %14 = mul nuw i32 %11, %13, !dbg !10
  %15 = add nuw i32 %14, %9, !dbg !10
  %16 = mul i32 %15, %12, !dbg !10
  %17 = add i32 %16, %8, !dbg !10
  %18 = mul i32 %17, 384, !dbg !10
  %19 = sext i32 %18 to i64, !dbg !10
  %20 = getelementptr i8, ptr addrspace(1) %6, i64 %19, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %22 = icmp samesign ult i32 %21, 32, !dbg !10
  %23 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %21, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> zeroinitializer, i1 %22) #4, !dbg !10
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !10
  %24 = icmp eq i32 %21, 0, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %0, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 128, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %4, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %3, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %10, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x2;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !10
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %20, ptr addrspace(3) @global_smem, i1 %22) #4, !dbg !10
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %20, i1 %22) #4, !dbg !10
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !10
  %25 = addrspacecast ptr addrspace(1) %20 to ptr, !dbg !10
  %26 = sext i32 %5 to i64, !dbg !11
  %27 = add i32 %18, 128, !dbg !11
  %28 = sext i32 %27 to i64, !dbg !11
  %29 = getelementptr i8, ptr addrspace(1) %6, i64 %28, !dbg !11
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !11
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> zeroinitializer, i1 %22) #4, !dbg !11
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %1, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %5, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %4, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %26, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x2;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !11
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %29, ptr addrspace(3) @global_smem, i1 %22) #4, !dbg !11
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %29, i1 %22) #4, !dbg !11
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !11
  %30 = addrspacecast ptr addrspace(1) %29 to ptr, !dbg !11
  %31 = add i32 %18, 256, !dbg !12
  %32 = sext i32 %31 to i64, !dbg !12
  %33 = getelementptr i8, ptr addrspace(1) %6, i64 %32, !dbg !12
  %34 = shl nsw i64 %26, 1, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !12
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> zeroinitializer, i1 %22) #4, !dbg !12
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %2, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 128, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %5, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %3, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 %34, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x6;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x3;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %24) #4, !dbg !12
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %33, ptr addrspace(3) @global_smem, i1 %22) #4, !dbg !12
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %33, i1 %22) #4, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !12
  %35 = add i32 %4, 63, !dbg !13
  %36 = sdiv i32 %35, 64, !dbg !17
  %37 = shl i32 %8, 7, !dbg !18
  %38 = shl nuw nsw i32 %9, 6, !dbg !19
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36872)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36880)) #4, !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36896)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36904)) #4, !dbg !20
  %39 = icmp sgt i32 %35, 63, !dbg !20
  %40 = and i1 %24, %39, !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 8192;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %41 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !21
  %42 = extractvalue { i32, i1 } %41, 1, !dbg !21
  %43 = and i1 %39, %42, !dbg !21
  %44 = and i1 %22, %43, !dbg !21
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %44, ptr addrspace(3) @global_smem, ptr %25, i32 0, i32 %37, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864)) #4, !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 4096;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36896)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %45 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %46 = extractvalue { i32, i1 } %45, 1, !dbg !22
  %47 = and i1 %39, %46, !dbg !22
  %48 = and i1 %22, %47, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %48, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), ptr %30, i32 %38, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36896)) #4, !dbg !22
  %49 = icmp sgt i32 %35, 127, !dbg !20
  %50 = and i1 %24, %49, !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 8192;", "b,r"(i1 %50, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36872)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %51 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !21
  %52 = extractvalue { i32, i1 } %51, 1, !dbg !21
  %53 = and i1 %49, %52, !dbg !21
  %54 = and i1 %22, %53, !dbg !21
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %54, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), ptr %25, i32 64, i32 %37, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36872)) #4, !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 4096;", "b,r"(i1 %50, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36904)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %55 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %56 = extractvalue { i32, i1 } %55, 1, !dbg !22
  %57 = and i1 %49, %56, !dbg !22
  %58 = and i1 %22, %57, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %58, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 28672), ptr %30, i32 %38, i32 64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36904)) #4, !dbg !22
  br i1 %39, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !20

.._crit_edge_crit_edge:                           ; preds = %7
  %.pre = and i32 %21, 4, !dbg !23
  %.pre10 = shl nuw nsw i32 %21, 6, !dbg !23
  %.pre12 = and i32 %.pre10, 512, !dbg !23
  br label %._crit_edge, !dbg !20

.lr.ph:                                           ; preds = %7
  %59 = add nsw i32 %36, -2
  %60 = lshr i32 %21, 5
  %61 = and i32 %21, 2
  %62 = icmp eq i32 %61, 0
  %63 = and i32 %21, 4
  %64 = icmp eq i32 %63, 0
  %65 = and i32 %21, 16
  %66 = and i32 %21, 32
  %67 = and i32 %21, 64
  %68 = and i32 %21, 127
  %69 = and i32 %21, 15
  %70 = or disjoint i32 %69, 144
  %71 = xor i32 %70, %65
  %72 = and i32 %21, 31
  %73 = or disjoint i32 %72, 288
  %74 = xor i32 %73, %66
  %75 = or disjoint i32 %69, 432
  %and.ra = and i32 %21, 48
  %76 = xor i32 %75, %and.ra
  %77 = or disjoint i32 %69, 656
  %78 = xor i32 %77, %65
  %79 = or disjoint i32 %72, 800
  %80 = xor i32 %79, %66
  %81 = or disjoint i32 %69, 944
  %82 = xor i32 %81, %and.ra
  %83 = or disjoint i32 %69, 1168
  %84 = xor i32 %83, %65
  %85 = or disjoint i32 %72, 1312
  %86 = xor i32 %85, %66
  %87 = or disjoint i32 %69, 1456
  %88 = xor i32 %87, %and.ra
  %89 = or disjoint i32 %69, 1680
  %90 = xor i32 %89, %65
  %91 = or disjoint i32 %72, 1824
  %92 = xor i32 %91, %66
  %93 = or disjoint i32 %69, 1968
  %94 = xor i32 %93, %and.ra
  %95 = or disjoint i32 %69, 2192
  %96 = xor i32 %95, %65
  %97 = or disjoint i32 %72, 2336
  %98 = xor i32 %97, %66
  %99 = or disjoint i32 %69, 2480
  %100 = xor i32 %99, %and.ra
  %101 = or disjoint i32 %69, 2704
  %102 = xor i32 %101, %65
  %103 = or disjoint i32 %72, 2848
  %104 = xor i32 %103, %66
  %105 = or disjoint i32 %69, 2992
  %106 = xor i32 %105, %and.ra
  %107 = or disjoint i32 %69, 3216
  %108 = xor i32 %107, %65
  %109 = or disjoint i32 %72, 3360
  %110 = xor i32 %109, %66
  %111 = or disjoint i32 %69, 3504
  %112 = xor i32 %111, %and.ra
  %113 = or disjoint i32 %69, 3728
  %114 = xor i32 %113, %65
  %115 = or disjoint i32 %72, 3872
  %116 = xor i32 %115, %66
  %117 = or disjoint i32 %69, 4016
  %118 = xor i32 %117, %and.ra
  %119 = shl nuw nsw i32 %21, 6
  %120 = and i32 %119, 64
  %121 = select i1 %62, i32 0, i32 144
  %122 = or disjoint i32 %121, %120
  %123 = select i1 %64, i32 0, i32 288
  %124 = and i32 %119, 512
  %125 = shl nuw nsw i32 %65, 6
  %126 = or disjoint i32 %125, %124
  %127 = or disjoint i32 %126, %123
  %128 = or disjoint i32 %127, %122
  %129 = shl nuw nsw i32 %66, 6
  %.lobit = lshr exact i32 %67, 6
  %130 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %128
  %131 = getelementptr inbounds nuw i8, ptr addrspace(3) %130, i32 %129
  %132 = getelementptr inbounds nuw i8, ptr addrspace(3) %131, i32 %.lobit
  %133 = or disjoint i32 %128, 2
  %134 = or disjoint i32 %.lobit, %129
  %135 = xor i32 %134, %133
  %136 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %135
  %137 = or disjoint i32 %128, 4
  %138 = xor i32 %134, %137
  %139 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %138
  %140 = or disjoint i32 %128, 6
  %141 = xor i32 %134, %140
  %142 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %141
  %143 = or disjoint i32 %128, 8
  %144 = xor i32 %134, %143
  %145 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %144
  %146 = or disjoint i32 %128, 10
  %147 = xor i32 %134, %146
  %148 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %147
  %149 = or disjoint i32 %128, 12
  %150 = xor i32 %134, %149
  %151 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %150
  %152 = or disjoint i32 %128, 14
  %153 = xor i32 %134, %152
  %154 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %153
  %155 = or disjoint i32 %120, 16
  %156 = xor i32 %155, %121
  %157 = or disjoint i32 %124, %156
  %158 = or disjoint i32 %157, %125
  %159 = or disjoint i32 %158, %123
  %160 = xor i32 %134, %159
  %161 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %160
  %162 = or disjoint i32 %120, 18
  %163 = xor i32 %162, %121
  %164 = or disjoint i32 %124, %163
  %165 = or disjoint i32 %164, %125
  %166 = or disjoint i32 %165, %123
  %167 = xor i32 %134, %166
  %168 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %167
  %169 = or disjoint i32 %120, 20
  %170 = xor i32 %169, %121
  %171 = or disjoint i32 %124, %170
  %172 = or disjoint i32 %171, %125
  %173 = or disjoint i32 %172, %123
  %174 = xor i32 %134, %173
  %175 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %174
  %176 = or disjoint i32 %120, 22
  %177 = xor i32 %176, %121
  %178 = or disjoint i32 %124, %177
  %179 = or disjoint i32 %178, %125
  %180 = or disjoint i32 %179, %123
  %181 = xor i32 %134, %180
  %182 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %181
  %183 = or disjoint i32 %120, 24
  %184 = xor i32 %183, %121
  %185 = or disjoint i32 %124, %184
  %186 = or disjoint i32 %185, %125
  %187 = or disjoint i32 %186, %123
  %188 = xor i32 %134, %187
  %189 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %188
  %190 = or disjoint i32 %120, 26
  %191 = xor i32 %190, %121
  %192 = or disjoint i32 %124, %191
  %193 = or disjoint i32 %192, %125
  %194 = or disjoint i32 %193, %123
  %195 = xor i32 %134, %194
  %196 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %195
  %197 = or disjoint i32 %120, 28
  %198 = xor i32 %197, %121
  %199 = or disjoint i32 %124, %198
  %200 = or disjoint i32 %199, %125
  %201 = or disjoint i32 %200, %123
  %202 = xor i32 %134, %201
  %203 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %202
  %204 = or disjoint i32 %120, 30
  %205 = xor i32 %204, %121
  %206 = or disjoint i32 %124, %205
  %207 = or disjoint i32 %206, %125
  %208 = or disjoint i32 %207, %123
  %209 = xor i32 %134, %208
  %210 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %209
  %211 = or disjoint i32 %122, 32
  %212 = xor i32 %211, %123
  %213 = or disjoint i32 %124, %212
  %214 = or disjoint i32 %213, %125
  %215 = xor i32 %134, %214
  %216 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %215
  %217 = or disjoint i32 %122, 34
  %218 = xor i32 %217, %123
  %219 = or disjoint i32 %124, %218
  %220 = or disjoint i32 %219, %125
  %221 = xor i32 %134, %220
  %222 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %221
  %223 = or disjoint i32 %122, 36
  %224 = xor i32 %223, %123
  %225 = or disjoint i32 %124, %224
  %226 = or disjoint i32 %225, %125
  %227 = xor i32 %134, %226
  %228 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %227
  %229 = or disjoint i32 %122, 38
  %230 = xor i32 %229, %123
  %231 = or disjoint i32 %124, %230
  %232 = or disjoint i32 %231, %125
  %233 = xor i32 %134, %232
  %234 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %233
  %235 = or disjoint i32 %122, 40
  %236 = xor i32 %235, %123
  %237 = or disjoint i32 %124, %236
  %238 = or disjoint i32 %237, %125
  %239 = xor i32 %134, %238
  %240 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %239
  %241 = or disjoint i32 %122, 42
  %242 = xor i32 %241, %123
  %243 = or disjoint i32 %124, %242
  %244 = or disjoint i32 %243, %125
  %245 = xor i32 %134, %244
  %246 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %245
  %247 = or disjoint i32 %122, 44
  %248 = xor i32 %247, %123
  %249 = or disjoint i32 %124, %248
  %250 = or disjoint i32 %249, %125
  %251 = xor i32 %134, %250
  %252 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %251
  %253 = or disjoint i32 %122, 46
  %254 = xor i32 %253, %123
  %255 = or disjoint i32 %124, %254
  %256 = or disjoint i32 %255, %125
  %257 = xor i32 %134, %256
  %258 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %257
  %259 = or disjoint i32 %120, 48
  %260 = and i32 %21, 6
  %261 = mul nuw nsw i32 %260, 72
  %262 = xor i32 %261, %259
  %263 = or disjoint i32 %124, %262
  %264 = or disjoint i32 %263, %125
  %265 = or disjoint i32 %129, %264
  %266 = or i32 %265, %.lobit
  %267 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %266
  %268 = or disjoint i32 %120, 50
  %269 = xor i32 %261, %268
  %270 = or disjoint i32 %124, %269
  %271 = or disjoint i32 %270, %125
  %272 = or disjoint i32 %129, %271
  %273 = or i32 %272, %.lobit
  %274 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %273
  %275 = or disjoint i32 %120, 52
  %276 = xor i32 %261, %275
  %277 = or disjoint i32 %124, %276
  %278 = or disjoint i32 %277, %125
  %279 = or disjoint i32 %129, %278
  %280 = or i32 %279, %.lobit
  %281 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %280
  %282 = or disjoint i32 %120, 54
  %283 = xor i32 %261, %282
  %284 = or disjoint i32 %124, %283
  %285 = or disjoint i32 %284, %125
  %286 = or disjoint i32 %129, %285
  %287 = or i32 %286, %.lobit
  %288 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %287
  %289 = or disjoint i32 %120, 56
  %290 = xor i32 %261, %289
  %291 = or disjoint i32 %124, %290
  %292 = or disjoint i32 %291, %125
  %293 = or disjoint i32 %129, %292
  %294 = or i32 %293, %.lobit
  %295 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %294
  %296 = or disjoint i32 %120, 58
  %297 = xor i32 %261, %296
  %298 = or disjoint i32 %124, %297
  %299 = or disjoint i32 %298, %125
  %300 = or disjoint i32 %129, %299
  %301 = or i32 %300, %.lobit
  %302 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %301
  %303 = or disjoint i32 %120, 60
  %304 = xor i32 %261, %303
  %305 = or disjoint i32 %124, %304
  %306 = or disjoint i32 %305, %125
  %307 = or disjoint i32 %129, %306
  %308 = or i32 %307, %.lobit
  %309 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %308
  %310 = or disjoint i32 %120, 62
  %311 = xor i32 %261, %310
  %312 = or disjoint i32 %124, %311
  %313 = or disjoint i32 %312, %125
  %314 = or disjoint i32 %129, %313
  %315 = or i32 %314, %.lobit
  %316 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %315
  %317 = lshr exact i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768) to i32), 4
  %318 = and i32 %317, 16383
  %319 = zext nneg i32 %318 to i64
  %320 = or disjoint i64 %319, -9223371899399045120
  %321 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768) to i32), i32 32), 4
  %322 = and i32 %321, 16383
  %323 = zext nneg i32 %322 to i64
  %324 = or disjoint i64 %323, -9223371899399045120
  br label %325, !dbg !20

325:                                              ; preds = %.lr.ph, %325
  %326 = phi i32 [ 0, %.lr.ph ], [ %399, %325 ]
  %327 = phi i32 [ 0, %.lr.ph ], [ %402, %325 ]
  %328 = phi float [ 0.000000e+00, %.lr.ph ], [ %662, %325 ]
  %329 = phi float [ 0.000000e+00, %.lr.ph ], [ %663, %325 ]
  %330 = phi float [ 0.000000e+00, %.lr.ph ], [ %664, %325 ]
  %331 = phi float [ 0.000000e+00, %.lr.ph ], [ %665, %325 ]
  %332 = phi float [ 0.000000e+00, %.lr.ph ], [ %666, %325 ]
  %333 = phi float [ 0.000000e+00, %.lr.ph ], [ %667, %325 ]
  %334 = phi float [ 0.000000e+00, %.lr.ph ], [ %668, %325 ]
  %335 = phi float [ 0.000000e+00, %.lr.ph ], [ %669, %325 ]
  %336 = phi float [ 0.000000e+00, %.lr.ph ], [ %670, %325 ]
  %337 = phi float [ 0.000000e+00, %.lr.ph ], [ %671, %325 ]
  %338 = phi float [ 0.000000e+00, %.lr.ph ], [ %672, %325 ]
  %339 = phi float [ 0.000000e+00, %.lr.ph ], [ %673, %325 ]
  %340 = phi float [ 0.000000e+00, %.lr.ph ], [ %674, %325 ]
  %341 = phi float [ 0.000000e+00, %.lr.ph ], [ %675, %325 ]
  %342 = phi float [ 0.000000e+00, %.lr.ph ], [ %676, %325 ]
  %343 = phi float [ 0.000000e+00, %.lr.ph ], [ %677, %325 ]
  %344 = phi float [ 0.000000e+00, %.lr.ph ], [ %678, %325 ]
  %345 = phi float [ 0.000000e+00, %.lr.ph ], [ %679, %325 ]
  %346 = phi float [ 0.000000e+00, %.lr.ph ], [ %680, %325 ]
  %347 = phi float [ 0.000000e+00, %.lr.ph ], [ %681, %325 ]
  %348 = phi float [ 0.000000e+00, %.lr.ph ], [ %682, %325 ]
  %349 = phi float [ 0.000000e+00, %.lr.ph ], [ %683, %325 ]
  %350 = phi float [ 0.000000e+00, %.lr.ph ], [ %684, %325 ]
  %351 = phi float [ 0.000000e+00, %.lr.ph ], [ %685, %325 ]
  %352 = phi float [ 0.000000e+00, %.lr.ph ], [ %686, %325 ]
  %353 = phi float [ 0.000000e+00, %.lr.ph ], [ %687, %325 ]
  %354 = phi float [ 0.000000e+00, %.lr.ph ], [ %688, %325 ]
  %355 = phi float [ 0.000000e+00, %.lr.ph ], [ %689, %325 ]
  %356 = phi float [ 0.000000e+00, %.lr.ph ], [ %690, %325 ]
  %357 = phi float [ 0.000000e+00, %.lr.ph ], [ %691, %325 ]
  %358 = phi float [ 0.000000e+00, %.lr.ph ], [ %692, %325 ]
  %359 = phi float [ 0.000000e+00, %.lr.ph ], [ %693, %325 ]
  %360 = phi float [ 0.000000e+00, %.lr.ph ], [ %694, %325 ]
  %361 = phi float [ 0.000000e+00, %.lr.ph ], [ %695, %325 ]
  %362 = phi float [ 0.000000e+00, %.lr.ph ], [ %696, %325 ]
  %363 = phi float [ 0.000000e+00, %.lr.ph ], [ %697, %325 ]
  %364 = phi float [ 0.000000e+00, %.lr.ph ], [ %698, %325 ]
  %365 = phi float [ 0.000000e+00, %.lr.ph ], [ %699, %325 ]
  %366 = phi float [ 0.000000e+00, %.lr.ph ], [ %700, %325 ]
  %367 = phi float [ 0.000000e+00, %.lr.ph ], [ %701, %325 ]
  %368 = phi float [ 0.000000e+00, %.lr.ph ], [ %702, %325 ]
  %369 = phi float [ 0.000000e+00, %.lr.ph ], [ %703, %325 ]
  %370 = phi float [ 0.000000e+00, %.lr.ph ], [ %704, %325 ]
  %371 = phi float [ 0.000000e+00, %.lr.ph ], [ %705, %325 ]
  %372 = phi float [ 0.000000e+00, %.lr.ph ], [ %706, %325 ]
  %373 = phi float [ 0.000000e+00, %.lr.ph ], [ %707, %325 ]
  %374 = phi float [ 0.000000e+00, %.lr.ph ], [ %708, %325 ]
  %375 = phi float [ 0.000000e+00, %.lr.ph ], [ %709, %325 ]
  %376 = phi float [ 0.000000e+00, %.lr.ph ], [ %710, %325 ]
  %377 = phi float [ 0.000000e+00, %.lr.ph ], [ %711, %325 ]
  %378 = phi float [ 0.000000e+00, %.lr.ph ], [ %712, %325 ]
  %379 = phi float [ 0.000000e+00, %.lr.ph ], [ %713, %325 ]
  %380 = phi float [ 0.000000e+00, %.lr.ph ], [ %714, %325 ]
  %381 = phi float [ 0.000000e+00, %.lr.ph ], [ %715, %325 ]
  %382 = phi float [ 0.000000e+00, %.lr.ph ], [ %716, %325 ]
  %383 = phi float [ 0.000000e+00, %.lr.ph ], [ %717, %325 ]
  %384 = phi float [ 0.000000e+00, %.lr.ph ], [ %718, %325 ]
  %385 = phi float [ 0.000000e+00, %.lr.ph ], [ %719, %325 ]
  %386 = phi float [ 0.000000e+00, %.lr.ph ], [ %720, %325 ]
  %387 = phi float [ 0.000000e+00, %.lr.ph ], [ %721, %325 ]
  %388 = phi float [ 0.000000e+00, %.lr.ph ], [ %722, %325 ]
  %389 = phi float [ 0.000000e+00, %.lr.ph ], [ %723, %325 ]
  %390 = phi float [ 0.000000e+00, %.lr.ph ], [ %724, %325 ]
  %391 = phi float [ 0.000000e+00, %.lr.ph ], [ %725, %325 ]
  %392 = phi i32 [ 0, %.lr.ph ], [ %745, %325 ]
  %393 = phi <4 x i32> [ <i32 -1, i32 1, i32 -1, i32 1>, %.lr.ph ], [ %403, %325 ]
  %394 = icmp slt i32 %392, %59, !dbg !20
  %395 = add <4 x i32> %393, splat (i32 1), !dbg !20
  %396 = icmp sgt <4 x i32> %395, <i32 1, i32 1, i32 2, i32 2>, !dbg !20
  %397 = extractelement <4 x i1> %396, i64 0, !dbg !20
  %398 = zext i1 %397 to i32, !dbg !20
  %399 = xor i32 %326, %398, !dbg !20
  %400 = extractelement <4 x i1> %396, i64 2, !dbg !20
  %401 = zext i1 %400 to i32, !dbg !20
  %402 = xor i32 %327, %401, !dbg !20
  %403 = select <4 x i1> %396, <4 x i32> zeroinitializer, <4 x i32> %395, !dbg !20
  %404 = extractelement <4 x i32> %403, i64 2, !dbg !21
  %405 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %404, !dbg !20
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) %405, i32 %402) #4, !dbg !20
  %406 = shl i32 %404, 13, !dbg !21
  %407 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %406, !dbg !21
  %408 = extractelement <4 x i32> %403, i64 0, !dbg !22
  %409 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36896), i32 %408, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) %409, i32 %399) #4, !dbg !20
  %410 = shl i32 %408, 12, !dbg !22
  %411 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %410, !dbg !22
  %412 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %68, !dbg !22
  %413 = load <1 x i8>, ptr addrspace(3) %412, align 1, !dbg !22
  %414 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %71, !dbg !22
  %415 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i32 %66, !dbg !22
  %416 = getelementptr inbounds nuw i8, ptr addrspace(3) %415, i32 %67, !dbg !22
  %417 = load <1 x i8>, ptr addrspace(3) %416, align 1, !dbg !22
  %418 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %74, !dbg !22
  %419 = getelementptr inbounds nuw i8, ptr addrspace(3) %418, i32 %67, !dbg !22
  %420 = load <1 x i8>, ptr addrspace(3) %419, align 1, !dbg !22
  %421 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %76, !dbg !22
  %422 = getelementptr inbounds nuw i8, ptr addrspace(3) %421, i32 %67, !dbg !22
  %423 = load <1 x i8>, ptr addrspace(3) %422, align 1, !dbg !22
  %424 = getelementptr inbounds nuw i8, ptr addrspace(3) %412, i32 512, !dbg !22
  %425 = load <1 x i8>, ptr addrspace(3) %424, align 1, !dbg !22
  %426 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %78, !dbg !22
  %427 = getelementptr inbounds nuw i8, ptr addrspace(3) %426, i32 %66, !dbg !22
  %428 = getelementptr inbounds nuw i8, ptr addrspace(3) %427, i32 %67, !dbg !22
  %429 = load <1 x i8>, ptr addrspace(3) %428, align 1, !dbg !22
  %430 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %80, !dbg !22
  %431 = getelementptr inbounds nuw i8, ptr addrspace(3) %430, i32 %67, !dbg !22
  %432 = load <1 x i8>, ptr addrspace(3) %431, align 1, !dbg !22
  %433 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %82, !dbg !22
  %434 = getelementptr inbounds nuw i8, ptr addrspace(3) %433, i32 %67, !dbg !22
  %435 = load <1 x i8>, ptr addrspace(3) %434, align 1, !dbg !22
  %436 = getelementptr inbounds nuw i8, ptr addrspace(3) %412, i32 1024, !dbg !22
  %437 = load <1 x i8>, ptr addrspace(3) %436, align 1, !dbg !22
  %438 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %84, !dbg !22
  %439 = getelementptr inbounds nuw i8, ptr addrspace(3) %438, i32 %66, !dbg !22
  %440 = getelementptr inbounds nuw i8, ptr addrspace(3) %439, i32 %67, !dbg !22
  %441 = load <1 x i8>, ptr addrspace(3) %440, align 1, !dbg !22
  %442 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %86, !dbg !22
  %443 = getelementptr inbounds nuw i8, ptr addrspace(3) %442, i32 %67, !dbg !22
  %444 = load <1 x i8>, ptr addrspace(3) %443, align 1, !dbg !22
  %445 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %88, !dbg !22
  %446 = getelementptr inbounds nuw i8, ptr addrspace(3) %445, i32 %67, !dbg !22
  %447 = load <1 x i8>, ptr addrspace(3) %446, align 1, !dbg !22
  %448 = getelementptr inbounds nuw i8, ptr addrspace(3) %412, i32 1536, !dbg !22
  %449 = load <1 x i8>, ptr addrspace(3) %448, align 1, !dbg !22
  %450 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %90, !dbg !22
  %451 = getelementptr inbounds nuw i8, ptr addrspace(3) %450, i32 %66, !dbg !22
  %452 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 %67, !dbg !22
  %453 = load <1 x i8>, ptr addrspace(3) %452, align 1, !dbg !22
  %454 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %92, !dbg !22
  %455 = getelementptr inbounds nuw i8, ptr addrspace(3) %454, i32 %67, !dbg !22
  %456 = load <1 x i8>, ptr addrspace(3) %455, align 1, !dbg !22
  %457 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %94, !dbg !22
  %458 = getelementptr inbounds nuw i8, ptr addrspace(3) %457, i32 %67, !dbg !22
  %459 = load <1 x i8>, ptr addrspace(3) %458, align 1, !dbg !22
  %460 = getelementptr inbounds nuw i8, ptr addrspace(3) %412, i32 2048, !dbg !22
  %461 = load <1 x i8>, ptr addrspace(3) %460, align 1, !dbg !22
  %462 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %96, !dbg !22
  %463 = getelementptr inbounds nuw i8, ptr addrspace(3) %462, i32 %66, !dbg !22
  %464 = getelementptr inbounds nuw i8, ptr addrspace(3) %463, i32 %67, !dbg !22
  %465 = load <1 x i8>, ptr addrspace(3) %464, align 1, !dbg !22
  %466 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %98, !dbg !22
  %467 = getelementptr inbounds nuw i8, ptr addrspace(3) %466, i32 %67, !dbg !22
  %468 = load <1 x i8>, ptr addrspace(3) %467, align 1, !dbg !22
  %469 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %100, !dbg !22
  %470 = getelementptr inbounds nuw i8, ptr addrspace(3) %469, i32 %67, !dbg !22
  %471 = load <1 x i8>, ptr addrspace(3) %470, align 1, !dbg !22
  %472 = getelementptr inbounds nuw i8, ptr addrspace(3) %412, i32 2560, !dbg !22
  %473 = load <1 x i8>, ptr addrspace(3) %472, align 1, !dbg !22
  %474 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %102, !dbg !22
  %475 = getelementptr inbounds nuw i8, ptr addrspace(3) %474, i32 %66, !dbg !22
  %476 = getelementptr inbounds nuw i8, ptr addrspace(3) %475, i32 %67, !dbg !22
  %477 = load <1 x i8>, ptr addrspace(3) %476, align 1, !dbg !22
  %478 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %104, !dbg !22
  %479 = getelementptr inbounds nuw i8, ptr addrspace(3) %478, i32 %67, !dbg !22
  %480 = load <1 x i8>, ptr addrspace(3) %479, align 1, !dbg !22
  %481 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %106, !dbg !22
  %482 = getelementptr inbounds nuw i8, ptr addrspace(3) %481, i32 %67, !dbg !22
  %483 = load <1 x i8>, ptr addrspace(3) %482, align 1, !dbg !22
  %484 = getelementptr inbounds nuw i8, ptr addrspace(3) %412, i32 3072, !dbg !22
  %485 = load <1 x i8>, ptr addrspace(3) %484, align 1, !dbg !22
  %486 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %108, !dbg !22
  %487 = getelementptr inbounds nuw i8, ptr addrspace(3) %486, i32 %66, !dbg !22
  %488 = getelementptr inbounds nuw i8, ptr addrspace(3) %487, i32 %67, !dbg !22
  %489 = load <1 x i8>, ptr addrspace(3) %488, align 1, !dbg !22
  %490 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %110, !dbg !22
  %491 = getelementptr inbounds nuw i8, ptr addrspace(3) %490, i32 %67, !dbg !22
  %492 = load <1 x i8>, ptr addrspace(3) %491, align 1, !dbg !22
  %493 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %112, !dbg !22
  %494 = getelementptr inbounds nuw i8, ptr addrspace(3) %493, i32 %67, !dbg !22
  %495 = load <1 x i8>, ptr addrspace(3) %494, align 1, !dbg !22
  %496 = getelementptr inbounds nuw i8, ptr addrspace(3) %412, i32 3584, !dbg !22
  %497 = load <1 x i8>, ptr addrspace(3) %496, align 1, !dbg !22
  %498 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %114, !dbg !22
  %499 = getelementptr inbounds nuw i8, ptr addrspace(3) %498, i32 %66, !dbg !22
  %500 = getelementptr inbounds nuw i8, ptr addrspace(3) %499, i32 %67, !dbg !22
  %501 = load <1 x i8>, ptr addrspace(3) %500, align 1, !dbg !22
  %502 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %116, !dbg !22
  %503 = getelementptr inbounds nuw i8, ptr addrspace(3) %502, i32 %67, !dbg !22
  %504 = load <1 x i8>, ptr addrspace(3) %503, align 1, !dbg !22
  %505 = getelementptr inbounds nuw i8, ptr addrspace(3) %411, i32 %118, !dbg !22
  %506 = getelementptr inbounds nuw i8, ptr addrspace(3) %505, i32 %67, !dbg !22
  %507 = load <1 x i8>, ptr addrspace(3) %506, align 1, !dbg !22
  store <1 x i8> %413, ptr addrspace(3) %132, align 1, !dbg !22
  store <1 x i8> %417, ptr addrspace(3) %136, align 1, !dbg !22
  store <1 x i8> %420, ptr addrspace(3) %139, align 1, !dbg !22
  store <1 x i8> %423, ptr addrspace(3) %142, align 1, !dbg !22
  store <1 x i8> %425, ptr addrspace(3) %145, align 1, !dbg !22
  store <1 x i8> %429, ptr addrspace(3) %148, align 1, !dbg !22
  store <1 x i8> %432, ptr addrspace(3) %151, align 1, !dbg !22
  store <1 x i8> %435, ptr addrspace(3) %154, align 1, !dbg !22
  store <1 x i8> %437, ptr addrspace(3) %161, align 1, !dbg !22
  store <1 x i8> %441, ptr addrspace(3) %168, align 1, !dbg !22
  store <1 x i8> %444, ptr addrspace(3) %175, align 1, !dbg !22
  store <1 x i8> %447, ptr addrspace(3) %182, align 1, !dbg !22
  store <1 x i8> %449, ptr addrspace(3) %189, align 1, !dbg !22
  store <1 x i8> %453, ptr addrspace(3) %196, align 1, !dbg !22
  store <1 x i8> %456, ptr addrspace(3) %203, align 1, !dbg !22
  store <1 x i8> %459, ptr addrspace(3) %210, align 1, !dbg !22
  store <1 x i8> %461, ptr addrspace(3) %216, align 1, !dbg !22
  store <1 x i8> %465, ptr addrspace(3) %222, align 1, !dbg !22
  store <1 x i8> %468, ptr addrspace(3) %228, align 1, !dbg !22
  store <1 x i8> %471, ptr addrspace(3) %234, align 1, !dbg !22
  store <1 x i8> %473, ptr addrspace(3) %240, align 1, !dbg !22
  store <1 x i8> %477, ptr addrspace(3) %246, align 1, !dbg !22
  store <1 x i8> %480, ptr addrspace(3) %252, align 1, !dbg !22
  store <1 x i8> %483, ptr addrspace(3) %258, align 1, !dbg !22
  store <1 x i8> %485, ptr addrspace(3) %267, align 1, !dbg !22
  store <1 x i8> %489, ptr addrspace(3) %274, align 1, !dbg !22
  store <1 x i8> %492, ptr addrspace(3) %281, align 1, !dbg !22
  store <1 x i8> %495, ptr addrspace(3) %288, align 1, !dbg !22
  store <1 x i8> %497, ptr addrspace(3) %295, align 1, !dbg !22
  store <1 x i8> %501, ptr addrspace(3) %302, align 1, !dbg !22
  store <1 x i8> %504, ptr addrspace(3) %309, align 1, !dbg !22
  store <1 x i8> %507, ptr addrspace(3) %316, align 1, !dbg !22
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !24
  %508 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %60, i32 0, i32 31), !dbg !24
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #4, !dbg !24
  %509 = ptrtoint ptr addrspace(3) %407 to i32, !dbg !24
  %510 = lshr exact i32 %509, 4, !dbg !24
  %511 = and i32 %510, 16383, !dbg !24
  %512 = zext nneg i32 %511 to i64, !dbg !24
  %513 = or disjoint i64 %512, -9223371899382267904, !dbg !24
  %514 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %328, float %329, float %330, float %331, float %332, float %333, float %334, float %335, float %336, float %337, float %338, float %339, float %340, float %341, float %342, float %343, float %344, float %345, float %346, float %347, float %348, float %349, float %350, float %351, float %352, float %353, float %354, float %355, float %356, float %357, float %358, float %359, i64 %513, i64 %320, i1 true) #4, !dbg !24
  %515 = add i32 %509, 32, !dbg !24
  %516 = lshr exact i32 %515, 4, !dbg !24
  %517 = and i32 %516, 16383, !dbg !24
  %518 = zext nneg i32 %517 to i64, !dbg !24
  %519 = or disjoint i64 %518, -9223371899382267904, !dbg !24
  %520 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 0, !dbg !24
  %521 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 1, !dbg !24
  %522 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 2, !dbg !24
  %523 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 3, !dbg !24
  %524 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 4, !dbg !24
  %525 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 5, !dbg !24
  %526 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 6, !dbg !24
  %527 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 7, !dbg !24
  %528 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 8, !dbg !24
  %529 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 9, !dbg !24
  %530 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 10, !dbg !24
  %531 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 11, !dbg !24
  %532 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 12, !dbg !24
  %533 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 13, !dbg !24
  %534 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 14, !dbg !24
  %535 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 15, !dbg !24
  %536 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 16, !dbg !24
  %537 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 17, !dbg !24
  %538 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 18, !dbg !24
  %539 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 19, !dbg !24
  %540 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 20, !dbg !24
  %541 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 21, !dbg !24
  %542 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 22, !dbg !24
  %543 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 23, !dbg !24
  %544 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 24, !dbg !24
  %545 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 25, !dbg !24
  %546 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 26, !dbg !24
  %547 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 27, !dbg !24
  %548 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 28, !dbg !24
  %549 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 29, !dbg !24
  %550 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 30, !dbg !24
  %551 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %514, 31, !dbg !24
  %552 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %520, float %521, float %522, float %523, float %524, float %525, float %526, float %527, float %528, float %529, float %530, float %531, float %532, float %533, float %534, float %535, float %536, float %537, float %538, float %539, float %540, float %541, float %542, float %543, float %544, float %545, float %546, float %547, float %548, float %549, float %550, float %551, i64 %519, i64 %324, i1 true) #4, !dbg !24
  %553 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 0, !dbg !24
  %554 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 1, !dbg !24
  %555 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 2, !dbg !24
  %556 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 3, !dbg !24
  %557 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 4, !dbg !24
  %558 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 5, !dbg !24
  %559 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 6, !dbg !24
  %560 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 7, !dbg !24
  %561 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 8, !dbg !24
  %562 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 9, !dbg !24
  %563 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 10, !dbg !24
  %564 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 11, !dbg !24
  %565 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 12, !dbg !24
  %566 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 13, !dbg !24
  %567 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 14, !dbg !24
  %568 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 15, !dbg !24
  %569 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 16, !dbg !24
  %570 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 17, !dbg !24
  %571 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 18, !dbg !24
  %572 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 19, !dbg !24
  %573 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 20, !dbg !24
  %574 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 21, !dbg !24
  %575 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 22, !dbg !24
  %576 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 23, !dbg !24
  %577 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 24, !dbg !24
  %578 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 25, !dbg !24
  %579 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 26, !dbg !24
  %580 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 27, !dbg !24
  %581 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 28, !dbg !24
  %582 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 29, !dbg !24
  %583 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 30, !dbg !24
  %584 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %552, 31, !dbg !24
  %585 = add i32 %509, 4096, !dbg !24
  %586 = lshr exact i32 %585, 4, !dbg !24
  %587 = and i32 %586, 16383, !dbg !24
  %588 = zext nneg i32 %587 to i64, !dbg !24
  %589 = or disjoint i64 %588, -9223371899382267904, !dbg !24
  %590 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %360, float %361, float %362, float %363, float %364, float %365, float %366, float %367, float %368, float %369, float %370, float %371, float %372, float %373, float %374, float %375, float %376, float %377, float %378, float %379, float %380, float %381, float %382, float %383, float %384, float %385, float %386, float %387, float %388, float %389, float %390, float %391, i64 %589, i64 %320, i1 true) #4, !dbg !24
  %591 = add i32 %509, 4128, !dbg !24
  %592 = lshr exact i32 %591, 4, !dbg !24
  %593 = and i32 %592, 16383, !dbg !24
  %594 = zext nneg i32 %593 to i64, !dbg !24
  %595 = or disjoint i64 %594, -9223371899382267904, !dbg !24
  %596 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 0, !dbg !24
  %597 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 1, !dbg !24
  %598 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 2, !dbg !24
  %599 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 3, !dbg !24
  %600 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 4, !dbg !24
  %601 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 5, !dbg !24
  %602 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 6, !dbg !24
  %603 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 7, !dbg !24
  %604 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 8, !dbg !24
  %605 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 9, !dbg !24
  %606 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 10, !dbg !24
  %607 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 11, !dbg !24
  %608 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 12, !dbg !24
  %609 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 13, !dbg !24
  %610 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 14, !dbg !24
  %611 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 15, !dbg !24
  %612 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 16, !dbg !24
  %613 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 17, !dbg !24
  %614 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 18, !dbg !24
  %615 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 19, !dbg !24
  %616 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 20, !dbg !24
  %617 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 21, !dbg !24
  %618 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 22, !dbg !24
  %619 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 23, !dbg !24
  %620 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 24, !dbg !24
  %621 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 25, !dbg !24
  %622 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 26, !dbg !24
  %623 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 27, !dbg !24
  %624 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 28, !dbg !24
  %625 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 29, !dbg !24
  %626 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 30, !dbg !24
  %627 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %590, 31, !dbg !24
  %628 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k32.f32.e5m2.e5m2 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %596, float %597, float %598, float %599, float %600, float %601, float %602, float %603, float %604, float %605, float %606, float %607, float %608, float %609, float %610, float %611, float %612, float %613, float %614, float %615, float %616, float %617, float %618, float %619, float %620, float %621, float %622, float %623, float %624, float %625, float %626, float %627, i64 %595, i64 %324, i1 true) #4, !dbg !24
  %629 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 0, !dbg !24
  %630 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 1, !dbg !24
  %631 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 2, !dbg !24
  %632 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 3, !dbg !24
  %633 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 4, !dbg !24
  %634 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 5, !dbg !24
  %635 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 6, !dbg !24
  %636 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 7, !dbg !24
  %637 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 8, !dbg !24
  %638 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 9, !dbg !24
  %639 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 10, !dbg !24
  %640 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 11, !dbg !24
  %641 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 12, !dbg !24
  %642 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 13, !dbg !24
  %643 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 14, !dbg !24
  %644 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 15, !dbg !24
  %645 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 16, !dbg !24
  %646 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 17, !dbg !24
  %647 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 18, !dbg !24
  %648 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 19, !dbg !24
  %649 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 20, !dbg !24
  %650 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 21, !dbg !24
  %651 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 22, !dbg !24
  %652 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 23, !dbg !24
  %653 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 24, !dbg !24
  %654 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 25, !dbg !24
  %655 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 26, !dbg !24
  %656 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 27, !dbg !24
  %657 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 28, !dbg !24
  %658 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 29, !dbg !24
  %659 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 30, !dbg !24
  %660 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %628, 31, !dbg !24
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #4, !dbg !24
  %661 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69"(float %553, float %554, float %555, float %556, float %557, float %558, float %559, float %560, float %561, float %562, float %563, float %564, float %565, float %566, float %567, float %568, float %569, float %570, float %571, float %572, float %573, float %574, float %575, float %576, float %577, float %578, float %579, float %580, float %581, float %582, float %583, float %584, float %629, float %630, float %631, float %632, float %633, float %634, float %635, float %636, float %637, float %638, float %639, float %640, float %641, float %642, float %643, float %644, float %645, float %646, float %647, float %648, float %649, float %650, float %651, float %652, float %653, float %654, float %655, float %656, float %657, float %658, float %659, float %660, ptr addrspace(3) %407, i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 0, i32 0) #4, !dbg !24
  %662 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 0, !dbg !24
  %663 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 1, !dbg !24
  %664 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 2, !dbg !24
  %665 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 3, !dbg !24
  %666 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 4, !dbg !24
  %667 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 5, !dbg !24
  %668 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 6, !dbg !24
  %669 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 7, !dbg !24
  %670 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 8, !dbg !24
  %671 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 9, !dbg !24
  %672 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 10, !dbg !24
  %673 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 11, !dbg !24
  %674 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 12, !dbg !24
  %675 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 13, !dbg !24
  %676 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 14, !dbg !24
  %677 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 15, !dbg !24
  %678 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 16, !dbg !24
  %679 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 17, !dbg !24
  %680 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 18, !dbg !24
  %681 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 19, !dbg !24
  %682 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 20, !dbg !24
  %683 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 21, !dbg !24
  %684 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 22, !dbg !24
  %685 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 23, !dbg !24
  %686 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 24, !dbg !24
  %687 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 25, !dbg !24
  %688 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 26, !dbg !24
  %689 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 27, !dbg !24
  %690 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 28, !dbg !24
  %691 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 29, !dbg !24
  %692 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 30, !dbg !24
  %693 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 31, !dbg !24
  %694 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 32, !dbg !24
  %695 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 33, !dbg !24
  %696 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 34, !dbg !24
  %697 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 35, !dbg !24
  %698 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 36, !dbg !24
  %699 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 37, !dbg !24
  %700 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 38, !dbg !24
  %701 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 39, !dbg !24
  %702 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 40, !dbg !24
  %703 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 41, !dbg !24
  %704 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 42, !dbg !24
  %705 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 43, !dbg !24
  %706 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 44, !dbg !24
  %707 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 45, !dbg !24
  %708 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 46, !dbg !24
  %709 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 47, !dbg !24
  %710 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 48, !dbg !24
  %711 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 49, !dbg !24
  %712 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 50, !dbg !24
  %713 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 51, !dbg !24
  %714 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 52, !dbg !24
  %715 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 53, !dbg !24
  %716 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 54, !dbg !24
  %717 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 55, !dbg !24
  %718 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 56, !dbg !24
  %719 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 57, !dbg !24
  %720 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 58, !dbg !24
  %721 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 59, !dbg !24
  %722 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 60, !dbg !24
  %723 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 61, !dbg !24
  %724 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 62, !dbg !24
  %725 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %661, 63, !dbg !24
  %726 = shl i32 %392, 6, !dbg !25
  %727 = add nuw i32 %726, 128, !dbg !25
  %728 = extractelement <4 x i32> %403, i64 3, !dbg !21
  %729 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %728, !dbg !20
  %730 = and i1 %24, %394, !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 8192;", "b,r"(i1 %730, ptr addrspace(3) %729) #4, !dbg !20
  %731 = shl i32 %728, 13, !dbg !21
  %732 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %731, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %733 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !21
  %734 = extractvalue { i32, i1 } %733, 1, !dbg !21
  %735 = and i1 %394, %734, !dbg !21
  %736 = and i1 %22, %735, !dbg !21
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %736, ptr addrspace(3) %732, ptr %25, i32 %727, i32 %37, ptr addrspace(3) %729) #4, !dbg !21
  %737 = extractelement <4 x i32> %403, i64 1, !dbg !22
  %738 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36896), i32 %737, !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 4096;", "b,r"(i1 %730, ptr addrspace(3) %738) #4, !dbg !20
  %739 = shl i32 %737, 12, !dbg !22
  %740 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %739, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %741 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !22
  %742 = extractvalue { i32, i1 } %741, 1, !dbg !22
  %743 = and i1 %394, %742, !dbg !22
  %744 = and i1 %22, %743, !dbg !22
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %744, ptr addrspace(3) %740, ptr %30, i32 %38, i32 %727, ptr addrspace(3) %738) #4, !dbg !22
  %745 = add nuw nsw i32 %392, 1, !dbg !20
  %exitcond.not = icmp eq i32 %745, %36, !dbg !20
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %325, !dbg !20

._crit_edge.loopexit:                             ; preds = %325
  %746 = insertelement <64 x float> poison, float %662, i64 0, !dbg !26
  %747 = insertelement <64 x float> %746, float %663, i64 1, !dbg !26
  %748 = insertelement <64 x float> %747, float %664, i64 2, !dbg !26
  %749 = insertelement <64 x float> %748, float %665, i64 3, !dbg !26
  %750 = insertelement <64 x float> %749, float %666, i64 4, !dbg !26
  %751 = insertelement <64 x float> %750, float %667, i64 5, !dbg !26
  %752 = insertelement <64 x float> %751, float %668, i64 6, !dbg !26
  %753 = insertelement <64 x float> %752, float %669, i64 7, !dbg !26
  %754 = insertelement <64 x float> %753, float %670, i64 8, !dbg !26
  %755 = insertelement <64 x float> %754, float %671, i64 9, !dbg !26
  %756 = insertelement <64 x float> %755, float %672, i64 10, !dbg !26
  %757 = insertelement <64 x float> %756, float %673, i64 11, !dbg !26
  %758 = insertelement <64 x float> %757, float %674, i64 12, !dbg !26
  %759 = insertelement <64 x float> %758, float %675, i64 13, !dbg !26
  %760 = insertelement <64 x float> %759, float %676, i64 14, !dbg !26
  %761 = insertelement <64 x float> %760, float %677, i64 15, !dbg !26
  %762 = insertelement <64 x float> %761, float %678, i64 16, !dbg !26
  %763 = insertelement <64 x float> %762, float %679, i64 17, !dbg !26
  %764 = insertelement <64 x float> %763, float %680, i64 18, !dbg !26
  %765 = insertelement <64 x float> %764, float %681, i64 19, !dbg !26
  %766 = insertelement <64 x float> %765, float %682, i64 20, !dbg !26
  %767 = insertelement <64 x float> %766, float %683, i64 21, !dbg !26
  %768 = insertelement <64 x float> %767, float %684, i64 22, !dbg !26
  %769 = insertelement <64 x float> %768, float %685, i64 23, !dbg !26
  %770 = insertelement <64 x float> %769, float %686, i64 24, !dbg !26
  %771 = insertelement <64 x float> %770, float %687, i64 25, !dbg !26
  %772 = insertelement <64 x float> %771, float %688, i64 26, !dbg !26
  %773 = insertelement <64 x float> %772, float %689, i64 27, !dbg !26
  %774 = insertelement <64 x float> %773, float %690, i64 28, !dbg !26
  %775 = insertelement <64 x float> %774, float %691, i64 29, !dbg !26
  %776 = insertelement <64 x float> %775, float %692, i64 30, !dbg !26
  %777 = insertelement <64 x float> %776, float %693, i64 31, !dbg !26
  %778 = insertelement <64 x float> %777, float %694, i64 32, !dbg !26
  %779 = insertelement <64 x float> %778, float %695, i64 33, !dbg !26
  %780 = insertelement <64 x float> %779, float %696, i64 34, !dbg !26
  %781 = insertelement <64 x float> %780, float %697, i64 35, !dbg !26
  %782 = insertelement <64 x float> %781, float %698, i64 36, !dbg !26
  %783 = insertelement <64 x float> %782, float %699, i64 37, !dbg !26
  %784 = insertelement <64 x float> %783, float %700, i64 38, !dbg !26
  %785 = insertelement <64 x float> %784, float %701, i64 39, !dbg !26
  %786 = insertelement <64 x float> %785, float %702, i64 40, !dbg !26
  %787 = insertelement <64 x float> %786, float %703, i64 41, !dbg !26
  %788 = insertelement <64 x float> %787, float %704, i64 42, !dbg !26
  %789 = insertelement <64 x float> %788, float %705, i64 43, !dbg !26
  %790 = insertelement <64 x float> %789, float %706, i64 44, !dbg !26
  %791 = insertelement <64 x float> %790, float %707, i64 45, !dbg !26
  %792 = insertelement <64 x float> %791, float %708, i64 46, !dbg !26
  %793 = insertelement <64 x float> %792, float %709, i64 47, !dbg !26
  %794 = insertelement <64 x float> %793, float %710, i64 48, !dbg !26
  %795 = insertelement <64 x float> %794, float %711, i64 49, !dbg !26
  %796 = insertelement <64 x float> %795, float %712, i64 50, !dbg !26
  %797 = insertelement <64 x float> %796, float %713, i64 51, !dbg !26
  %798 = insertelement <64 x float> %797, float %714, i64 52, !dbg !26
  %799 = insertelement <64 x float> %798, float %715, i64 53, !dbg !26
  %800 = insertelement <64 x float> %799, float %716, i64 54, !dbg !26
  %801 = insertelement <64 x float> %800, float %717, i64 55, !dbg !26
  %802 = insertelement <64 x float> %801, float %718, i64 56, !dbg !26
  %803 = insertelement <64 x float> %802, float %719, i64 57, !dbg !26
  %804 = insertelement <64 x float> %803, float %720, i64 58, !dbg !26
  %805 = insertelement <64 x float> %804, float %721, i64 59, !dbg !26
  %806 = insertelement <64 x float> %805, float %722, i64 60, !dbg !26
  %807 = insertelement <64 x float> %806, float %723, i64 61, !dbg !26
  %808 = insertelement <64 x float> %807, float %724, i64 62, !dbg !26
  %809 = insertelement <64 x float> %808, float %725, i64 63, !dbg !26
  %810 = fptrunc <64 x float> %809 to <64 x half>, !dbg !26
  %811 = bitcast <64 x half> %810 to <32 x i32>, !dbg !23
  br label %._crit_edge, !dbg !12

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi13 = phi i32 [ %.pre12, %.._crit_edge_crit_edge ], [ %124, %._crit_edge.loopexit ], !dbg !23
  %.pre-phi = phi i32 [ %.pre, %.._crit_edge_crit_edge ], [ %63, %._crit_edge.loopexit ], !dbg !23
  %.bc138 = phi <32 x i32> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %811, %._crit_edge.loopexit ]
  %812 = addrspacecast ptr addrspace(1) %33 to ptr, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36896)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36904)) #4, !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36872)) #4, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !20
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %24, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36880)) #4, !dbg !20
  %813 = and i32 %21, 3, !dbg !23
  %814 = mul nuw nsw i32 %813, 72, !dbg !23
  %815 = icmp eq i32 %.pre-phi, 0, !dbg !23
  %816 = select i1 %815, i32 0, i32 288, !dbg !23
  %817 = xor i32 %816, %814, !dbg !23
  %818 = or disjoint i32 %817, %.pre-phi13, !dbg !23
  %819 = lshr i32 %21, 1, !dbg !23
  %820 = and i32 %819, 8, !dbg !23
  %821 = xor i32 %818, %820, !dbg !23
  %822 = shl nuw nsw i32 %21, 5, !dbg !23
  %823 = and i32 %822, 1024, !dbg !23
  %824 = or disjoint i32 %821, %823, !dbg !23
  %825 = and i32 %822, 2048, !dbg !23
  %826 = xor i32 %824, %825, !dbg !23
  %827 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %826, !dbg !23
  %.extract = extractelement <32 x i32> %.bc138, i64 0, !dbg !23
  %.extract79 = extractelement <32 x i32> %.bc138, i64 1, !dbg !23
  %.extract81 = extractelement <32 x i32> %.bc138, i64 2, !dbg !23
  %.extract83 = extractelement <32 x i32> %.bc138, i64 3, !dbg !23
  %828 = ptrtoint ptr addrspace(3) %827 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %828, i32 %.extract, i32 %.extract79, i32 %.extract81, i32 %.extract83) #4, !dbg !23
  %829 = xor i32 %826, 16, !dbg !23
  %830 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %829, !dbg !23
  %.extract85 = extractelement <32 x i32> %.bc138, i64 4, !dbg !23
  %.extract87 = extractelement <32 x i32> %.bc138, i64 5, !dbg !23
  %.extract89 = extractelement <32 x i32> %.bc138, i64 6, !dbg !23
  %.extract91 = extractelement <32 x i32> %.bc138, i64 7, !dbg !23
  %831 = ptrtoint ptr addrspace(3) %830 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %831, i32 %.extract85, i32 %.extract87, i32 %.extract89, i32 %.extract91) #4, !dbg !23
  %832 = xor i32 %826, 32, !dbg !23
  %833 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %832, !dbg !23
  %.extract93 = extractelement <32 x i32> %.bc138, i64 8, !dbg !23
  %.extract95 = extractelement <32 x i32> %.bc138, i64 9, !dbg !23
  %.extract97 = extractelement <32 x i32> %.bc138, i64 10, !dbg !23
  %.extract99 = extractelement <32 x i32> %.bc138, i64 11, !dbg !23
  %834 = ptrtoint ptr addrspace(3) %833 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %834, i32 %.extract93, i32 %.extract95, i32 %.extract97, i32 %.extract99) #4, !dbg !23
  %835 = xor i32 %826, 48, !dbg !23
  %836 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %835, !dbg !23
  %.extract101 = extractelement <32 x i32> %.bc138, i64 12, !dbg !23
  %.extract103 = extractelement <32 x i32> %.bc138, i64 13, !dbg !23
  %.extract105 = extractelement <32 x i32> %.bc138, i64 14, !dbg !23
  %.extract107 = extractelement <32 x i32> %.bc138, i64 15, !dbg !23
  %837 = ptrtoint ptr addrspace(3) %836 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %837, i32 %.extract101, i32 %.extract103, i32 %.extract105, i32 %.extract107) #4, !dbg !23
  %838 = xor i32 %826, 4096, !dbg !23
  %839 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %838, !dbg !23
  %.extract109 = extractelement <32 x i32> %.bc138, i64 16, !dbg !23
  %.extract111 = extractelement <32 x i32> %.bc138, i64 17, !dbg !23
  %.extract113 = extractelement <32 x i32> %.bc138, i64 18, !dbg !23
  %.extract115 = extractelement <32 x i32> %.bc138, i64 19, !dbg !23
  %840 = ptrtoint ptr addrspace(3) %839 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %840, i32 %.extract109, i32 %.extract111, i32 %.extract113, i32 %.extract115) #4, !dbg !23
  %841 = xor i32 %826, 4112, !dbg !23
  %842 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %841, !dbg !23
  %.extract117 = extractelement <32 x i32> %.bc138, i64 20, !dbg !23
  %.extract119 = extractelement <32 x i32> %.bc138, i64 21, !dbg !23
  %.extract121 = extractelement <32 x i32> %.bc138, i64 22, !dbg !23
  %.extract123 = extractelement <32 x i32> %.bc138, i64 23, !dbg !23
  %843 = ptrtoint ptr addrspace(3) %842 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %843, i32 %.extract117, i32 %.extract119, i32 %.extract121, i32 %.extract123) #4, !dbg !23
  %844 = xor i32 %826, 4128, !dbg !23
  %845 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %844, !dbg !23
  %.extract125 = extractelement <32 x i32> %.bc138, i64 24, !dbg !23
  %.extract127 = extractelement <32 x i32> %.bc138, i64 25, !dbg !23
  %.extract129 = extractelement <32 x i32> %.bc138, i64 26, !dbg !23
  %.extract131 = extractelement <32 x i32> %.bc138, i64 27, !dbg !23
  %846 = ptrtoint ptr addrspace(3) %845 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %846, i32 %.extract125, i32 %.extract127, i32 %.extract129, i32 %.extract131) #4, !dbg !23
  %847 = xor i32 %826, 4144, !dbg !23
  %848 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %847, !dbg !23
  %.extract133 = extractelement <32 x i32> %.bc138, i64 28, !dbg !23
  %.extract135 = extractelement <32 x i32> %.bc138, i64 29, !dbg !23
  %.extract137 = extractelement <32 x i32> %.bc138, i64 30, !dbg !23
  %.extract139 = extractelement <32 x i32> %.bc138, i64 31, !dbg !23
  %849 = ptrtoint ptr addrspace(3) %848 to i32, !dbg !23
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %849, i32 %.extract133, i32 %.extract135, i32 %.extract137, i32 %.extract139) #4, !dbg !23
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %850 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !23
  %851 = extractvalue { i32, i1 } %850, 1, !dbg !23
  %852 = and i1 %22, %851, !dbg !23
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %852, ptr %812, i32 %38, i32 %37, ptr addrspace(3) @global_smem) #4, !dbg !23
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !23
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 1, -2147483648) i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 1, 65536) i32 @llvm.nvvm.read.ptx.sreg.nctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.bar.warp.sync(i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare { i32, i1 } @llvm.nvvm.elect.sync(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.commit.group() #4

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 immarg) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "matmul-with-tma-v3.py", directory: "/home/ubuntu/triton_runner/examples/ttgir_runner/sm90")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "matmul_kernel_make_tensor_desciptor", linkageName: "matmul_kernel_make_tensor_desciptor", scope: !1, file: !1, line: 15, type: !6, scopeLine: 15, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 20, column: 26, scope: !5)
!9 = !DILocation(line: 21, column: 26, scope: !5)
!10 = !DILocation(line: 24, column: 8, scope: !5)
!11 = !DILocation(line: 30, column: 8, scope: !5)
!12 = !DILocation(line: 36, column: 8, scope: !5)
!13 = !DILocation(line: 40, column: 22, scope: !14, inlinedAt: !16)
!14 = distinct !DILexicalBlockFile(scope: !5, file: !15, discriminator: 0)
!15 = !DIFile(filename: "standard.py", directory: "/home/ubuntu/triton/python/triton/language")
!16 = !DILocation(line: 43, column: 30, scope: !5)
!17 = !DILocation(line: 40, column: 28, scope: !14, inlinedAt: !16)
!18 = !DILocation(line: 44, column: 33, scope: !5)
!19 = !DILocation(line: 45, column: 51, scope: !5)
!20 = !DILocation(line: 43, column: 19, scope: !5)
!21 = !DILocation(line: 44, column: 24, scope: !5)
!22 = !DILocation(line: 45, column: 24, scope: !5)
!23 = !DILocation(line: 49, column: 63, scope: !5)
!24 = !DILocation(line: 46, column: 32, scope: !5)
!25 = !DILocation(line: 44, column: 51, scope: !5)
!26 = !DILocation(line: 48, column: 33, scope: !5)
!27 = !DILocation(line: 49, column: 4, scope: !5)
