//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u32 matmul_kernel_param_8
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<132>;
	.reg .b32 	%r<436>;
	.reg .f32 	%f<1111>;
	.reg .b64 	%rd<158>;
	.loc	1 8 0                           // matmul-with-dot-v2.py:8:0
$L__func_begin0:
	.loc	1 8 0                           // matmul-with-dot-v2.py:8:0

// %bb.0:
	ld.param.u32 	%r29, [matmul_kernel_param_8];
	ld.param.u32 	%r28, [matmul_kernel_param_7];
	ld.param.u32 	%r27, [matmul_kernel_param_5];
	ld.param.u32 	%r26, [matmul_kernel_param_4];
	ld.param.u32 	%r25, [matmul_kernel_param_3];
	ld.param.u64 	%rd17, [matmul_kernel_param_2];
	ld.param.u64 	%rd42, [matmul_kernel_param_0];
	ld.param.u64 	%rd43, [matmul_kernel_param_1];
$L__tmp0:
	.loc	1 17 26                         // matmul-with-dot-v2.py:17:26
	// begin inline asm
	mov.u32 %r30, %ctaid.x;
	// end inline asm
	.loc	1 18 26                         // matmul-with-dot-v2.py:18:26
	// begin inline asm
	mov.u32 %r31, %ctaid.y;
	// end inline asm
	.loc	1 20 21                         // matmul-with-dot-v2.py:20:21
	shl.b32 	%r1, %r31, 7;
	.loc	1 20 49                         // matmul-with-dot-v2.py:20:49
	mov.u32 	%r2, %tid.x;
	bfe.u32 	%r3, %r2, 3, 4;
	ld.param.u32 	%r80, [matmul_kernel_param_6];
	or.b32  	%r4, %r3, 16;
	or.b32  	%r5, %r3, 32;
	or.b32  	%r6, %r3, 48;
	.loc	1 20 36                         // matmul-with-dot-v2.py:20:36
	or.b32  	%r81, %r1, %r3;
	or.b32  	%r82, %r1, %r4;
	or.b32  	%r83, %r1, %r5;
	or.b32  	%r84, %r1, %r6;
	or.b32  	%r85, %r81, 64;
	or.b32  	%r86, %r81, 80;
	or.b32  	%r87, %r81, 96;
	or.b32  	%r88, %r81, 112;
	.loc	1 21 21                         // matmul-with-dot-v2.py:21:21
	shl.b32 	%r7, %r30, 6;
	.loc	1 21 49                         // matmul-with-dot-v2.py:21:49
	shl.b32 	%r89, %r2, 3;
	and.b32  	%r8, %r89, 56;
	.loc	1 21 36                         // matmul-with-dot-v2.py:21:36
	or.b32  	%r90, %r7, %r8;
	.loc	1 24 39                         // matmul-with-dot-v2.py:24:39
	mul.lo.s32 	%r91, %r81, %r80;
	mul.lo.s32 	%r92, %r82, %r80;
	mul.lo.s32 	%r93, %r83, %r80;
	mul.lo.s32 	%r94, %r84, %r80;
	mul.lo.s32 	%r95, %r85, %r80;
	mul.lo.s32 	%r96, %r86, %r80;
	mul.lo.s32 	%r97, %r87, %r80;
	mul.lo.s32 	%r98, %r88, %r80;
	.loc	1 24 21                         // matmul-with-dot-v2.py:24:21
	mul.wide.s32 	%rd44, %r91, 2;
	add.s64 	%rd45, %rd42, %rd44;
	mul.wide.s32 	%rd46, %r92, 2;
	add.s64 	%rd47, %rd42, %rd46;
	mul.wide.s32 	%rd48, %r93, 2;
	add.s64 	%rd49, %rd42, %rd48;
	mul.wide.s32 	%rd50, %r94, 2;
	add.s64 	%rd51, %rd42, %rd50;
	mul.wide.s32 	%rd52, %r95, 2;
	add.s64 	%rd53, %rd42, %rd52;
	mul.wide.s32 	%rd54, %r96, 2;
	add.s64 	%rd55, %rd42, %rd54;
	mul.wide.s32 	%rd56, %r97, 2;
	add.s64 	%rd57, %rd42, %rd56;
	mul.wide.s32 	%rd58, %r98, 2;
	add.s64 	%rd59, %rd42, %rd58;
	.loc	1 24 51                         // matmul-with-dot-v2.py:24:51
	mul.wide.u32 	%rd60, %r8, 2;
	add.s64 	%rd18, %rd45, %rd60;
	add.s64 	%rd19, %rd47, %rd60;
	add.s64 	%rd20, %rd49, %rd60;
	add.s64 	%rd21, %rd51, %rd60;
	add.s64 	%rd22, %rd53, %rd60;
	add.s64 	%rd23, %rd55, %rd60;
	add.s64 	%rd24, %rd57, %rd60;
	add.s64 	%rd25, %rd59, %rd60;
	.loc	1 25 39                         // matmul-with-dot-v2.py:25:39
	mul.lo.s32 	%r99, %r28, %r3;
	shl.b32 	%r100, %r28, 4;
	add.s32 	%r101, %r99, %r100;
	add.s32 	%r102, %r101, %r100;
	add.s32 	%r103, %r102, %r100;
	.loc	1 25 21                         // matmul-with-dot-v2.py:25:21
	mul.wide.s32 	%rd61, %r99, 2;
	add.s64 	%rd62, %rd43, %rd61;
	mul.wide.s32 	%rd63, %r101, 2;
	add.s64 	%rd64, %rd43, %rd63;
	mul.wide.s32 	%rd65, %r102, 2;
	add.s64 	%rd66, %rd43, %rd65;
	mul.wide.s32 	%rd67, %r103, 2;
	add.s64 	%rd68, %rd43, %rd67;
	.loc	1 25 51                         // matmul-with-dot-v2.py:25:51
	mul.wide.s32 	%rd69, %r90, 2;
	add.s64 	%rd26, %rd62, %rd69;
	add.s64 	%rd27, %rd64, %rd69;
	add.s64 	%rd28, %rd66, %rd69;
	add.s64 	%rd29, %rd68, %rd69;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22
	add.s32 	%r9, %r26, 63;
$L__tmp2:
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	setp.lt.s32 	%p25, %r9, 64;
	setp.gt.s32 	%p26, %r9, 63;
	.loc	1 31 82                         // matmul-with-dot-v2.py:31:82
	setp.lt.s32 	%p27, %r8, %r26;
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	xor.b32  	%r104, %r89, %r2;
	and.b32  	%r105, %r104, 56;
	shl.b32 	%r106, %r3, 6;
	or.b32  	%r10, %r105, %r106;
	shl.b32 	%r107, %r10, 1;
	mov.u32 	%r108, global_smem;
	add.s32 	%r32, %r108, %r107;
	add.s32 	%r34, %r32, 2048;
	add.s32 	%r36, %r32, 4096;
	add.s32 	%r38, %r32, 6144;
	add.s32 	%r40, %r32, 8192;
	add.s32 	%r42, %r32, 10240;
	add.s32 	%r44, %r32, 12288;
	add.s32 	%r46, %r32, 14336;
	selp.b32 	%r109, 16, 0, %p26;
	selp.b32 	%r35, %r109, 0, %p27;
	mov.pred 	%p67, -1;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r32 + 0 ], [ %rd18 + 0 ], 0x10, %r35;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r34 + 0 ], [ %rd19 + 0 ], 0x10, %r35;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r36 + 0 ], [ %rd20 + 0 ], 0x10, %r35;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r38 + 0 ], [ %rd21 + 0 ], 0x10, %r35;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r40 + 0 ], [ %rd22 + 0 ], 0x10, %r35;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r42 + 0 ], [ %rd23 + 0 ], 0x10, %r35;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r44 + 0 ], [ %rd24 + 0 ], 0x10, %r35;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r46 + 0 ], [ %rd25 + 0 ], 0x10, %r35;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 32 82                         // matmul-with-dot-v2.py:32:82
	setp.lt.s32 	%p28, %r3, %r26;
	setp.lt.s32 	%p29, %r4, %r26;
	setp.lt.s32 	%p30, %r5, %r26;
	setp.lt.s32 	%p31, %r6, %r26;
	.loc	1 32 20                         // matmul-with-dot-v2.py:32:20
	add.s32 	%r48, %r32, 49152;
	add.s32 	%r50, %r32, 51200;
	add.s32 	%r52, %r32, 53248;
	add.s32 	%r54, %r32, 55296;
	selp.b32 	%r49, %r109, 0, %p28;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r48 + 0 ], [ %rd26 + 0 ], 0x10, %r49;
	// end inline asm
	selp.b32 	%r51, %r109, 0, %p29;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r50 + 0 ], [ %rd27 + 0 ], 0x10, %r51;
	// end inline asm
	selp.b32 	%r53, %r109, 0, %p30;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r52 + 0 ], [ %rd28 + 0 ], 0x10, %r53;
	// end inline asm
	selp.b32 	%r55, %r109, 0, %p31;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r54 + 0 ], [ %rd29 + 0 ], 0x10, %r55;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	setp.gt.s32 	%p32, %r9, 127;
	.loc	1 30 22                         // matmul-with-dot-v2.py:30:22
	add.s32 	%r110, %r26, -64;
	.loc	1 31 82                         // matmul-with-dot-v2.py:31:82
	setp.lt.s32 	%p33, %r8, %r110;
	.loc	1 31 29                         // matmul-with-dot-v2.py:31:29
	add.s64 	%rd30, %rd18, 128;
	add.s64 	%rd31, %rd19, 128;
	add.s64 	%rd32, %rd20, 128;
	add.s64 	%rd33, %rd21, 128;
	add.s64 	%rd34, %rd22, 128;
	add.s64 	%rd35, %rd23, 128;
	add.s64 	%rd36, %rd24, 128;
	add.s64 	%rd37, %rd25, 128;
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	bar.sync 	0;
	add.s32 	%r56, %r32, 16384;
	add.s32 	%r58, %r32, 18432;
	add.s32 	%r60, %r32, 20480;
	add.s32 	%r62, %r32, 22528;
	add.s32 	%r64, %r32, 24576;
	add.s32 	%r66, %r32, 26624;
	add.s32 	%r68, %r32, 28672;
	add.s32 	%r70, %r32, 30720;
	selp.b32 	%r111, 16, 0, %p33;
	selp.b32 	%r59, %r111, 0, %p32;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r56 + 0 ], [ %rd30 + 0 ], 0x10, %r59;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r58 + 0 ], [ %rd31 + 0 ], 0x10, %r59;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r60 + 0 ], [ %rd32 + 0 ], 0x10, %r59;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r62 + 0 ], [ %rd33 + 0 ], 0x10, %r59;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r64 + 0 ], [ %rd34 + 0 ], 0x10, %r59;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r66 + 0 ], [ %rd35 + 0 ], 0x10, %r59;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r68 + 0 ], [ %rd36 + 0 ], 0x10, %r59;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r70 + 0 ], [ %rd37 + 0 ], 0x10, %r59;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 32 82                         // matmul-with-dot-v2.py:32:82
	setp.lt.s32 	%p34, %r3, %r110;
	setp.lt.s32 	%p35, %r4, %r110;
	setp.lt.s32 	%p36, %r5, %r110;
	setp.lt.s32 	%p37, %r6, %r110;
	.loc	1 32 48                         // matmul-with-dot-v2.py:32:48
	shl.b32 	%r11, %r28, 6;
	.loc	1 32 29                         // matmul-with-dot-v2.py:32:29
	mul.wide.s32 	%rd70, %r11, 2;
	add.s64 	%rd38, %rd26, %rd70;
	add.s64 	%rd39, %rd27, %rd70;
	add.s64 	%rd40, %rd28, %rd70;
	add.s64 	%rd41, %rd29, %rd70;
	.loc	1 32 20                         // matmul-with-dot-v2.py:32:20
	add.s32 	%r72, %r32, 57344;
	add.s32 	%r74, %r32, 59392;
	add.s32 	%r76, %r32, 61440;
	add.s32 	%r78, %r32, 63488;
	selp.b32 	%r112, 16, 0, %p34;
	selp.b32 	%r73, %r112, 0, %p32;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r72 + 0 ], [ %rd38 + 0 ], 0x10, %r73;
	// end inline asm
	selp.b32 	%r113, 16, 0, %p35;
	selp.b32 	%r75, %r113, 0, %p32;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r74 + 0 ], [ %rd39 + 0 ], 0x10, %r75;
	// end inline asm
	selp.b32 	%r114, 16, 0, %p36;
	selp.b32 	%r77, %r114, 0, %p32;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r76 + 0 ], [ %rd40 + 0 ], 0x10, %r77;
	// end inline asm
	selp.b32 	%r115, 16, 0, %p37;
	selp.b32 	%r79, %r115, 0, %p32;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r78 + 0 ], [ %rd41 + 0 ], 0x10, %r79;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	mov.f32 	%f983, 0f00000000;
	mov.f32 	%f984, %f983;
	mov.f32 	%f985, %f983;
	mov.f32 	%f986, %f983;
	mov.f32 	%f987, %f983;
	mov.f32 	%f988, %f983;
	mov.f32 	%f989, %f983;
	mov.f32 	%f990, %f983;
	mov.f32 	%f991, %f983;
	mov.f32 	%f992, %f983;
	mov.f32 	%f993, %f983;
	mov.f32 	%f994, %f983;
	mov.f32 	%f995, %f983;
	mov.f32 	%f996, %f983;
	mov.f32 	%f997, %f983;
	mov.f32 	%f998, %f983;
	mov.f32 	%f999, %f983;
	mov.f32 	%f1000, %f983;
	mov.f32 	%f1001, %f983;
	mov.f32 	%f1002, %f983;
	mov.f32 	%f1003, %f983;
	mov.f32 	%f1004, %f983;
	mov.f32 	%f1005, %f983;
	mov.f32 	%f1006, %f983;
	mov.f32 	%f1007, %f983;
	mov.f32 	%f1008, %f983;
	mov.f32 	%f1009, %f983;
	mov.f32 	%f1010, %f983;
	mov.f32 	%f1011, %f983;
	mov.f32 	%f1012, %f983;
	mov.f32 	%f1013, %f983;
	mov.f32 	%f1014, %f983;
	mov.f32 	%f1015, %f983;
	mov.f32 	%f1016, %f983;
	mov.f32 	%f1017, %f983;
	mov.f32 	%f1018, %f983;
	mov.f32 	%f1019, %f983;
	mov.f32 	%f1020, %f983;
	mov.f32 	%f1021, %f983;
	mov.f32 	%f1022, %f983;
	mov.f32 	%f1023, %f983;
	mov.f32 	%f1024, %f983;
	mov.f32 	%f1025, %f983;
	mov.f32 	%f1026, %f983;
	mov.f32 	%f1027, %f983;
	mov.f32 	%f1028, %f983;
	mov.f32 	%f1029, %f983;
	mov.f32 	%f1030, %f983;
	mov.f32 	%f1031, %f983;
	mov.f32 	%f1032, %f983;
	mov.f32 	%f1033, %f983;
	mov.f32 	%f1034, %f983;
	mov.f32 	%f1035, %f983;
	mov.f32 	%f1036, %f983;
	mov.f32 	%f1037, %f983;
	mov.f32 	%f1038, %f983;
	mov.f32 	%f1039, %f983;
	mov.f32 	%f1040, %f983;
	mov.f32 	%f1041, %f983;
	mov.f32 	%f1042, %f983;
	mov.f32 	%f1043, %f983;
	mov.f32 	%f1044, %f983;
	mov.f32 	%f1045, %f983;
	mov.f32 	%f1046, %f983;
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	@%p25 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
$L__tmp3:
	.loc	2 40 28                         // standard.py:40:28
	shr.u32 	%r119, %r9, 6;
$L__tmp4:
	.loc	1 20 49                         // matmul-with-dot-v2.py:20:49
	shr.u32 	%r120, %r2, 5;
	add.s32 	%r121, %r119, -2;
	and.b32  	%r12, %r120, 134217724;
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	cvt.s64.s32 	%rd13, %r121;
	cvt.u64.u32 	%rd14, %r119;
	shl.b32 	%r433, %r28, 7;
	add.s32 	%r431, %r26, -128;
	mov.f32 	%f848, 0f00000000;
	mov.b32 	%r435, 1;
	mov.b32 	%r434, -1;
	mov.u64 	%rd157, 0;
	mov.b32 	%r432, 128;
	mov.f32 	%f846, 0f00000040;
	mov.f32 	%f847, 0f00000001;
	mov.f32 	%f983, %f848;
	mov.f32 	%f984, %f848;
	mov.f32 	%f985, %f848;
	mov.f32 	%f986, %f848;
	mov.f32 	%f987, %f848;
	mov.f32 	%f988, %f848;
	mov.f32 	%f989, %f848;
	mov.f32 	%f990, %f848;
	mov.f32 	%f991, %f848;
	mov.f32 	%f992, %f848;
	mov.f32 	%f993, %f848;
	mov.f32 	%f994, %f848;
	mov.f32 	%f995, %f848;
	mov.f32 	%f996, %f848;
	mov.f32 	%f997, %f848;
	mov.f32 	%f998, %f848;
	mov.f32 	%f999, %f848;
	mov.f32 	%f1000, %f848;
	mov.f32 	%f1001, %f848;
	mov.f32 	%f1002, %f848;
	mov.f32 	%f1003, %f848;
	mov.f32 	%f1004, %f848;
	mov.f32 	%f1005, %f848;
	mov.f32 	%f1006, %f848;
	mov.f32 	%f1007, %f848;
	mov.f32 	%f1008, %f848;
	mov.f32 	%f1009, %f848;
	mov.f32 	%f1010, %f848;
	mov.f32 	%f1011, %f848;
	mov.f32 	%f1012, %f848;
	mov.f32 	%f1013, %f848;
	mov.f32 	%f1014, %f848;
	mov.f32 	%f1015, %f848;
	mov.f32 	%f1016, %f848;
	mov.f32 	%f1017, %f848;
	mov.f32 	%f1018, %f848;
	mov.f32 	%f1019, %f848;
	mov.f32 	%f1020, %f848;
	mov.f32 	%f1021, %f848;
	mov.f32 	%f1022, %f848;
	mov.f32 	%f1023, %f848;
	mov.f32 	%f1024, %f848;
	mov.f32 	%f1025, %f848;
	mov.f32 	%f1026, %f848;
	mov.f32 	%f1027, %f848;
	mov.f32 	%f1028, %f848;
	mov.f32 	%f1029, %f848;
	mov.f32 	%f1030, %f848;
	mov.f32 	%f1031, %f848;
	mov.f32 	%f1032, %f848;
	mov.f32 	%f1033, %f848;
	mov.f32 	%f1034, %f848;
	mov.f32 	%f1035, %f848;
	mov.f32 	%f1036, %f848;
	mov.f32 	%f1037, %f848;
	mov.f32 	%f1038, %f848;
	mov.f32 	%f1039, %f848;
	mov.f32 	%f1040, %f848;
	mov.f32 	%f1041, %f848;
	mov.f32 	%f1042, %f848;
	mov.f32 	%f1043, %f848;
	mov.f32 	%f1044, %f848;
	mov.f32 	%f1045, %f848;
	mov.f32 	%f1046, %f848;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s64 	%p58, %rd157, %rd13;
	add.s32 	%r146, %r434, 1;
	setp.lt.s32 	%p59, %r146, 3;
	selp.b32 	%r434, %r146, 0, %p59;
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	shl.b32 	%r147, %r434, 13;
	shl.b32 	%r148, %r434, 14;
	add.s32 	%r150, %r108, %r148;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	.loc	1 32 20                         // matmul-with-dot-v2.py:32:20
	add.s32 	%r151, %r108, 49152;
	add.s32 	%r152, %r151, %r147;
	.loc	1 33 32                         // matmul-with-dot-v2.py:33:32
	shfl.sync.idx.b32	%r153, %r12, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r154, %r153, 7;
	and.b32  	%r155, %r154, 384;
	cvt.u64.u32 	%rd100, %r155;
	shr.u32 	%r156, %r150, 4;
	cvt.u64.u32 	%rd101, %r156;
	and.b64  	%rd102, %rd101, 16383;
	add.s64 	%rd103, %rd102, %rd100;
	or.b64  	%rd72, %rd103, 4611686293372403712;
	shr.u32 	%r157, %r152, 4;
	cvt.u64.u32 	%rd104, %r157;
	and.b64  	%rd105, %rd104, 16383;
	or.b64  	%rd73, %rd105, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f983,%f984,%f985,%f986,%f987,%f988,%f989,%f990,%f991,%f992,%f993,%f994,%f995,%f996,%f997,%f998,%f999,%f1000,%f1001,%f1002,%f1003,%f1004,%f1005,%f1006,%f1007,%f1008,%f1009,%f1010,%f1011,%f1012,%f1013,%f1014}, %rd72, %rd73, %p67, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd74, %rd103, 4611686293372403714;
	add.s64 	%rd75, %rd105, 4611686293338849408;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f983,%f984,%f985,%f986,%f987,%f988,%f989,%f990,%f991,%f992,%f993,%f994,%f995,%f996,%f997,%f998,%f999,%f1000,%f1001,%f1002,%f1003,%f1004,%f1005,%f1006,%f1007,%f1008,%f1009,%f1010,%f1011,%f1012,%f1013,%f1014}, %rd74, %rd75, %p67, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd76, %rd103, 4611686293372403716;
	add.s64 	%rd77, %rd105, 4611686293338849536;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f983,%f984,%f985,%f986,%f987,%f988,%f989,%f990,%f991,%f992,%f993,%f994,%f995,%f996,%f997,%f998,%f999,%f1000,%f1001,%f1002,%f1003,%f1004,%f1005,%f1006,%f1007,%f1008,%f1009,%f1010,%f1011,%f1012,%f1013,%f1014}, %rd76, %rd77, %p67, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd78, %rd103, 4611686293372403718;
	add.s64 	%rd79, %rd105, 4611686293338849664;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f983,%f984,%f985,%f986,%f987,%f988,%f989,%f990,%f991,%f992,%f993,%f994,%f995,%f996,%f997,%f998,%f999,%f1000,%f1001,%f1002,%f1003,%f1004,%f1005,%f1006,%f1007,%f1008,%f1009,%f1010,%f1011,%f1012,%f1013,%f1014}, %rd78, %rd79, %p67, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd80, %rd103, 4611686293372404224;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f1015,%f1016,%f1017,%f1018,%f1019,%f1020,%f1021,%f1022,%f1023,%f1024,%f1025,%f1026,%f1027,%f1028,%f1029,%f1030,%f1031,%f1032,%f1033,%f1034,%f1035,%f1036,%f1037,%f1038,%f1039,%f1040,%f1041,%f1042,%f1043,%f1044,%f1045,%f1046}, %rd80, %rd73, %p67, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd82, %rd103, 4611686293372404226;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f1015,%f1016,%f1017,%f1018,%f1019,%f1020,%f1021,%f1022,%f1023,%f1024,%f1025,%f1026,%f1027,%f1028,%f1029,%f1030,%f1031,%f1032,%f1033,%f1034,%f1035,%f1036,%f1037,%f1038,%f1039,%f1040,%f1041,%f1042,%f1043,%f1044,%f1045,%f1046}, %rd82, %rd75, %p67, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd84, %rd103, 4611686293372404228;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f1015,%f1016,%f1017,%f1018,%f1019,%f1020,%f1021,%f1022,%f1023,%f1024,%f1025,%f1026,%f1027,%f1028,%f1029,%f1030,%f1031,%f1032,%f1033,%f1034,%f1035,%f1036,%f1037,%f1038,%f1039,%f1040,%f1041,%f1042,%f1043,%f1044,%f1045,%f1046}, %rd84, %rd77, %p67, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd86, %rd103, 4611686293372404230;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f1015,%f1016,%f1017,%f1018,%f1019,%f1020,%f1021,%f1022,%f1023,%f1024,%f1025,%f1026,%f1027,%f1028,%f1029,%f1030,%f1031,%f1032,%f1033,%f1034,%f1035,%f1036,%f1037,%f1038,%f1039,%f1040,%f1041,%f1042,%f1043,%f1044,%f1045,%f1046}, %rd86, %rd79, %p67, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%f771, %r150;
	mov.b32 	%f776, %r152;
	mov.f32 	%f780, %f848;
	mov.f32 	%f778, %f847;
	mov.f32 	%f772, %f846;
	mov.f32 	%f773, %f847;
	mov.f32 	%f777, %f846;
	mov.f32 	%f774, %f848;
	mov.f32 	%f775, %f848;
	mov.f32 	%f779, %f848;
	// begin inline asm
	// wait for regs: %f983,%f984,%f985,%f986,%f987,%f988,%f989,%f990,%f991,%f992,%f993,%f994,%f995,%f996,%f997,%f998,%f999,%f1000,%f1001,%f1002,%f1003,%f1004,%f1005,%f1006,%f1007,%f1008,%f1009,%f1010,%f1011,%f1012,%f1013,%f1014,%f1015,%f1016,%f1017,%f1018,%f1019,%f1020,%f1021,%f1022,%f1023,%f1024,%f1025,%f1026,%f1027,%f1028,%f1029,%f1030,%f1031,%f1032,%f1033,%f1034,%f1035,%f1036,%f1037,%f1038,%f1039,%f1040,%f1041,%f1042,%f1043,%f1044,%f1045,%f1046,%f771,%f772,%f773,%f774,%f775,%f776,%f777,%f778,%f779,%f780
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	add.s32 	%r158, %r435, 1;
	setp.lt.s32 	%p60, %r158, 3;
	selp.b32 	%r435, %r158, 0, %p60;
	.loc	1 31 82                         // matmul-with-dot-v2.py:31:82
	setp.lt.s32 	%p61, %r8, %r431;
	.loc	1 31 29                         // matmul-with-dot-v2.py:31:29
	mul.wide.s32 	%rd106, %r432, 2;
	add.s64 	%rd88, %rd18, %rd106;
	add.s64 	%rd89, %rd19, %rd106;
	add.s64 	%rd90, %rd20, %rd106;
	add.s64 	%rd91, %rd21, %rd106;
	add.s64 	%rd92, %rd22, %rd106;
	add.s64 	%rd93, %rd23, %rd106;
	add.s64 	%rd94, %rd24, %rd106;
	add.s64 	%rd95, %rd25, %rd106;
	.loc	1 31 20                         // matmul-with-dot-v2.py:31:20
	shl.b32 	%r159, %r435, 13;
	shl.b32 	%r160, %r435, 14;
	add.s32 	%r161, %r108, %r160;
	bar.sync 	0;
	add.s32 	%r122, %r161, %r107;
	add.s32 	%r124, %r122, 2048;
	add.s32 	%r126, %r122, 4096;
	add.s32 	%r128, %r122, 6144;
	add.s32 	%r130, %r122, 8192;
	add.s32 	%r132, %r122, 10240;
	add.s32 	%r134, %r122, 12288;
	add.s32 	%r136, %r122, 14336;
	selp.b32 	%r163, 16, 0, %p61;
	selp.b32 	%r125, %r163, 0, %p58;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r122 + 0 ], [ %rd88 + 0 ], 0x10, %r125;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r124 + 0 ], [ %rd89 + 0 ], 0x10, %r125;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r126 + 0 ], [ %rd90 + 0 ], 0x10, %r125;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r128 + 0 ], [ %rd91 + 0 ], 0x10, %r125;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r130 + 0 ], [ %rd92 + 0 ], 0x10, %r125;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r132 + 0 ], [ %rd93 + 0 ], 0x10, %r125;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r134 + 0 ], [ %rd94 + 0 ], 0x10, %r125;
	// end inline asm
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r136 + 0 ], [ %rd95 + 0 ], 0x10, %r125;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 32 82                         // matmul-with-dot-v2.py:32:82
	setp.lt.s32 	%p62, %r3, %r431;
	setp.lt.s32 	%p63, %r4, %r431;
	setp.lt.s32 	%p64, %r5, %r431;
	setp.lt.s32 	%p65, %r6, %r431;
	.loc	1 32 29                         // matmul-with-dot-v2.py:32:29
	mul.wide.s32 	%rd107, %r433, 2;
	add.s64 	%rd96, %rd26, %rd107;
	add.s64 	%rd97, %rd27, %rd107;
	add.s64 	%rd98, %rd28, %rd107;
	add.s64 	%rd99, %rd29, %rd107;
	.loc	1 32 20                         // matmul-with-dot-v2.py:32:20
	add.s32 	%r164, %r151, %r159;
	add.s32 	%r138, %r164, %r107;
	add.s32 	%r140, %r138, 2048;
	add.s32 	%r142, %r138, 4096;
	add.s32 	%r144, %r138, 6144;
	selp.b32 	%r165, 16, 0, %p62;
	selp.b32 	%r139, %r165, 0, %p58;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r138 + 0 ], [ %rd96 + 0 ], 0x10, %r139;
	// end inline asm
	selp.b32 	%r166, 16, 0, %p63;
	selp.b32 	%r141, %r166, 0, %p58;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r140 + 0 ], [ %rd97 + 0 ], 0x10, %r141;
	// end inline asm
	selp.b32 	%r167, 16, 0, %p64;
	selp.b32 	%r143, %r167, 0, %p58;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r142 + 0 ], [ %rd98 + 0 ], 0x10, %r143;
	// end inline asm
	selp.b32 	%r168, 16, 0, %p65;
	selp.b32 	%r145, %r168, 0, %p58;
	// begin inline asm
	@%p67 cp.async.cg.shared.global [ %r144 + 0 ], [ %rd99 + 0 ], 0x10, %r145;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	add.s64 	%rd157, %rd157, 1;
	add.s32 	%r433, %r433, %r11;
	add.s32 	%r432, %r432, 64;
	add.s32 	%r431, %r431, -64;
	setp.ne.s64 	%p66, %rd14, %rd157;
	@%p66 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 21 49                         // matmul-with-dot-v2.py:21:49
	shl.b32 	%r329, %r2, 2;
	and.b32  	%r330, %r329, 60;
	.loc	1 21 36                         // matmul-with-dot-v2.py:21:36
	or.b32  	%r331, %r7, %r330;
	.loc	1 20 49                         // matmul-with-dot-v2.py:20:49
	bfe.u32 	%r332, %r2, 4, 3;
	.loc	1 20 36                         // matmul-with-dot-v2.py:20:36
	or.b32  	%r333, %r332, %r1;
	or.b32  	%r334, %r333, 120;
	or.b32  	%r335, %r333, 112;
	or.b32  	%r336, %r333, 104;
	or.b32  	%r337, %r333, 96;
	or.b32  	%r338, %r333, 88;
	or.b32  	%r339, %r333, 80;
	or.b32  	%r340, %r333, 72;
	or.b32  	%r341, %r333, 64;
	or.b32  	%r342, %r333, 56;
	or.b32  	%r343, %r333, 48;
	or.b32  	%r344, %r333, 40;
	or.b32  	%r345, %r333, 32;
	or.b32  	%r346, %r333, 24;
	or.b32  	%r347, %r333, 16;
	or.b32  	%r348, %r333, 8;
	.loc	1 29 22                         // matmul-with-dot-v2.py:29:22
	// begin inline asm
	// wait for regs: %f983,%f984,%f985,%f986,%f987,%f988,%f989,%f990,%f991,%f992,%f993,%f994,%f995,%f996,%f997,%f998,%f999,%f1000,%f1001,%f1002,%f1003,%f1004,%f1005,%f1006,%f1007,%f1008,%f1009,%f1010,%f1011,%f1012,%f1013,%f1014,%f1015,%f1016,%f1017,%f1018,%f1019,%f1020,%f1021,%f1022,%f1023,%f1024,%f1025,%f1026,%f1027,%f1028,%f1029,%f1030,%f1031,%f1032,%f1033,%f1034,%f1035,%f1036,%f1037,%f1038,%f1039,%f1040,%f1041,%f1042,%f1043,%f1044,%f1045,%f1046
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	.loc	1 35 39                         // matmul-with-dot-v2.py:35:39
	mul.lo.s32 	%r349, %r333, %r29;
	shl.b32 	%r350, %r29, 3;
	add.s32 	%r351, %r349, %r350;
	add.s32 	%r352, %r351, %r350;
	add.s32 	%r353, %r352, %r350;
	add.s32 	%r354, %r353, %r350;
	add.s32 	%r355, %r354, %r350;
	add.s32 	%r356, %r355, %r350;
	add.s32 	%r357, %r356, %r350;
	add.s32 	%r358, %r357, %r350;
	add.s32 	%r359, %r358, %r350;
	add.s32 	%r360, %r359, %r350;
	add.s32 	%r361, %r360, %r350;
	add.s32 	%r362, %r361, %r350;
	add.s32 	%r363, %r362, %r350;
	add.s32 	%r364, %r363, %r350;
	add.s32 	%r365, %r364, %r350;
	.loc	1 35 21                         // matmul-with-dot-v2.py:35:21
	mul.wide.s32 	%rd124, %r349, 4;
	add.s64 	%rd125, %rd17, %rd124;
	mul.wide.s32 	%rd126, %r351, 4;
	add.s64 	%rd127, %rd17, %rd126;
	mul.wide.s32 	%rd128, %r352, 4;
	add.s64 	%rd129, %rd17, %rd128;
	mul.wide.s32 	%rd130, %r353, 4;
	add.s64 	%rd131, %rd17, %rd130;
	mul.wide.s32 	%rd132, %r354, 4;
	add.s64 	%rd133, %rd17, %rd132;
	mul.wide.s32 	%rd134, %r355, 4;
	add.s64 	%rd135, %rd17, %rd134;
	mul.wide.s32 	%rd136, %r356, 4;
	add.s64 	%rd137, %rd17, %rd136;
	mul.wide.s32 	%rd138, %r357, 4;
	add.s64 	%rd139, %rd17, %rd138;
	mul.wide.s32 	%rd140, %r358, 4;
	add.s64 	%rd141, %rd17, %rd140;
	mul.wide.s32 	%rd142, %r359, 4;
	add.s64 	%rd143, %rd17, %rd142;
	mul.wide.s32 	%rd144, %r360, 4;
	add.s64 	%rd145, %rd17, %rd144;
	mul.wide.s32 	%rd146, %r361, 4;
	add.s64 	%rd147, %rd17, %rd146;
	mul.wide.s32 	%rd148, %r362, 4;
	add.s64 	%rd149, %rd17, %rd148;
	mul.wide.s32 	%rd150, %r363, 4;
	add.s64 	%rd151, %rd17, %rd150;
	mul.wide.s32 	%rd152, %r364, 4;
	add.s64 	%rd153, %rd17, %rd152;
	mul.wide.s32 	%rd154, %r365, 4;
	add.s64 	%rd155, %rd17, %rd154;
	.loc	1 35 51                         // matmul-with-dot-v2.py:35:51
	mul.wide.s32 	%rd156, %r331, 4;
	add.s64 	%rd108, %rd125, %rd156;
	add.s64 	%rd109, %rd127, %rd156;
	add.s64 	%rd110, %rd129, %rd156;
	add.s64 	%rd111, %rd131, %rd156;
	add.s64 	%rd112, %rd133, %rd156;
	add.s64 	%rd113, %rd135, %rd156;
	add.s64 	%rd114, %rd137, %rd156;
	add.s64 	%rd115, %rd139, %rd156;
	add.s64 	%rd116, %rd141, %rd156;
	add.s64 	%rd117, %rd143, %rd156;
	add.s64 	%rd118, %rd145, %rd156;
	add.s64 	%rd119, %rd147, %rd156;
	add.s64 	%rd120, %rd149, %rd156;
	add.s64 	%rd121, %rd151, %rd156;
	add.s64 	%rd122, %rd153, %rd156;
	add.s64 	%rd123, %rd155, %rd156;
	.loc	1 38 33                         // matmul-with-dot-v2.py:38:33
	setp.lt.s32 	%p115, %r333, %r25;
	setp.lt.s32 	%p116, %r348, %r25;
	setp.lt.s32 	%p117, %r347, %r25;
	setp.lt.s32 	%p118, %r346, %r25;
	setp.lt.s32 	%p119, %r345, %r25;
	setp.lt.s32 	%p120, %r344, %r25;
	setp.lt.s32 	%p121, %r343, %r25;
	setp.lt.s32 	%p122, %r342, %r25;
	setp.lt.s32 	%p123, %r341, %r25;
	setp.lt.s32 	%p124, %r340, %r25;
	setp.lt.s32 	%p125, %r339, %r25;
	setp.lt.s32 	%p126, %r338, %r25;
	setp.lt.s32 	%p127, %r337, %r25;
	setp.lt.s32 	%p128, %r336, %r25;
	setp.lt.s32 	%p129, %r335, %r25;
	setp.lt.s32 	%p130, %r334, %r25;
	.loc	1 38 58                         // matmul-with-dot-v2.py:38:58
	setp.lt.s32 	%p131, %r331, %r27;
	.loc	1 38 39                         // matmul-with-dot-v2.py:38:39
	and.pred  	%p99, %p131, %p115;
	and.pred  	%p100, %p131, %p116;
	and.pred  	%p101, %p131, %p117;
	and.pred  	%p102, %p131, %p118;
	and.pred  	%p103, %p131, %p119;
	and.pred  	%p104, %p131, %p120;
	and.pred  	%p105, %p131, %p121;
	and.pred  	%p106, %p131, %p122;
	and.pred  	%p107, %p131, %p123;
	and.pred  	%p108, %p131, %p124;
	and.pred  	%p109, %p131, %p125;
	and.pred  	%p110, %p131, %p126;
	and.pred  	%p111, %p131, %p127;
	and.pred  	%p112, %p131, %p128;
	and.pred  	%p113, %p131, %p129;
	and.pred  	%p114, %p131, %p130;
	.loc	1 39 21                         // matmul-with-dot-v2.py:39:21
	shl.b32 	%r366, %r2, 1;
	and.b32  	%r367, %r366, 6;
	shl.b32 	%r368, %r2, 4;
	and.b32  	%r369, %r368, 448;
	or.b32  	%r370, %r367, %r369;
	shl.b32 	%r371, %r2, 5;
	and.b32  	%r372, %r371, 3072;
	or.b32  	%r373, %r370, %r372;
	and.b32  	%r374, %r329, 508;
	shr.u32 	%r375, %r373, 4;
	add.s32 	%r376, %r375, %r373;
	shl.b32 	%r377, %r376, 2;
	add.s32 	%r169, %r108, %r377;
	mov.b32 	%r170, %f983;
	mov.b32 	%r171, %f984;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r169 + 0 ], { %r170, %r171 };
	// end inline asm
	or.b32  	%r379, %r373, 512;
	shr.u32 	%r380, %r379, 4;
	add.s32 	%r381, %r380, %r373;
	shl.b32 	%r382, %r381, 2;
	add.s32 	%r383, %r108, %r382;
	add.s32 	%r172, %r383, 2048;
	mov.b32 	%r173, %f985;
	mov.b32 	%r174, %f986;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r172 + 0 ], { %r173, %r174 };
	// end inline asm
	add.s32 	%r175, %r169, 32;
	mov.b32 	%r176, %f987;
	mov.b32 	%r177, %f988;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r175 + 0 ], { %r176, %r177 };
	// end inline asm
	add.s32 	%r178, %r383, 2080;
	mov.b32 	%r179, %f989;
	mov.b32 	%r180, %f990;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r178 + 0 ], { %r179, %r180 };
	// end inline asm
	add.s32 	%r181, %r169, 64;
	mov.b32 	%r182, %f991;
	mov.b32 	%r183, %f992;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r181 + 0 ], { %r182, %r183 };
	// end inline asm
	add.s32 	%r184, %r383, 2112;
	mov.b32 	%r185, %f993;
	mov.b32 	%r186, %f994;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r184 + 0 ], { %r185, %r186 };
	// end inline asm
	add.s32 	%r187, %r169, 96;
	mov.b32 	%r188, %f995;
	mov.b32 	%r189, %f996;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r187 + 0 ], { %r188, %r189 };
	// end inline asm
	add.s32 	%r190, %r383, 2144;
	mov.b32 	%r191, %f997;
	mov.b32 	%r192, %f998;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r190 + 0 ], { %r191, %r192 };
	// end inline asm
	add.s32 	%r193, %r169, 128;
	mov.b32 	%r194, %f999;
	mov.b32 	%r195, %f1000;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r193 + 0 ], { %r194, %r195 };
	// end inline asm
	add.s32 	%r196, %r383, 2176;
	mov.b32 	%r197, %f1001;
	mov.b32 	%r198, %f1002;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r196 + 0 ], { %r197, %r198 };
	// end inline asm
	add.s32 	%r199, %r169, 160;
	mov.b32 	%r200, %f1003;
	mov.b32 	%r201, %f1004;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r199 + 0 ], { %r200, %r201 };
	// end inline asm
	add.s32 	%r202, %r383, 2208;
	mov.b32 	%r203, %f1005;
	mov.b32 	%r204, %f1006;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r202 + 0 ], { %r203, %r204 };
	// end inline asm
	add.s32 	%r205, %r169, 192;
	mov.b32 	%r206, %f1007;
	mov.b32 	%r207, %f1008;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r205 + 0 ], { %r206, %r207 };
	// end inline asm
	add.s32 	%r208, %r383, 2240;
	mov.b32 	%r209, %f1009;
	mov.b32 	%r210, %f1010;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r208 + 0 ], { %r209, %r210 };
	// end inline asm
	add.s32 	%r211, %r169, 224;
	mov.b32 	%r212, %f1011;
	mov.b32 	%r213, %f1012;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r211 + 0 ], { %r212, %r213 };
	// end inline asm
	add.s32 	%r214, %r383, 2272;
	mov.b32 	%r215, %f1013;
	mov.b32 	%r216, %f1014;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r214 + 0 ], { %r215, %r216 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r384, %r2, 2;
	and.b32  	%r385, %r384, 28;
	add.s32 	%r386, %r385, %r374;
	shl.b32 	%r387, %r386, 2;
	add.s32 	%r388, %r108, %r387;
	ld.shared.v4.u32 	{%r265, %r266, %r267, %r268}, [%r388];
	or.b32  	%r389, %r374, 512;
	shr.u32 	%r390, %r389, 4;
	and.b32  	%r391, %r390, 60;
	add.s32 	%r392, %r391, %r374;
	shl.b32 	%r393, %r392, 2;
	add.s32 	%r394, %r108, %r393;
	ld.shared.v4.u32 	{%r269, %r270, %r271, %r272}, [%r394+2048];
	or.b32  	%r395, %r374, 1024;
	shr.u32 	%r396, %r395, 4;
	and.b32  	%r397, %r396, 92;
	add.s32 	%r398, %r397, %r374;
	shl.b32 	%r399, %r398, 2;
	add.s32 	%r400, %r108, %r399;
	ld.shared.v4.u32 	{%r273, %r274, %r275, %r276}, [%r400+4096];
	or.b32  	%r401, %r374, 1536;
	shr.u32 	%r402, %r401, 4;
	and.b32  	%r403, %r402, 124;
	add.s32 	%r404, %r403, %r374;
	shl.b32 	%r405, %r404, 2;
	add.s32 	%r406, %r108, %r405;
	ld.shared.v4.u32 	{%r277, %r278, %r279, %r280}, [%r406+6144];
	or.b32  	%r407, %r374, 2048;
	shr.u32 	%r408, %r407, 4;
	and.b32  	%r409, %r408, 156;
	add.s32 	%r410, %r409, %r374;
	shl.b32 	%r411, %r410, 2;
	add.s32 	%r412, %r108, %r411;
	ld.shared.v4.u32 	{%r281, %r282, %r283, %r284}, [%r412+8192];
	or.b32  	%r413, %r374, 2560;
	shr.u32 	%r414, %r413, 4;
	and.b32  	%r415, %r414, 188;
	add.s32 	%r416, %r415, %r374;
	shl.b32 	%r417, %r416, 2;
	add.s32 	%r418, %r108, %r417;
	ld.shared.v4.u32 	{%r285, %r286, %r287, %r288}, [%r418+10240];
	or.b32  	%r419, %r374, 3072;
	shr.u32 	%r420, %r419, 4;
	and.b32  	%r421, %r420, 220;
	add.s32 	%r422, %r421, %r374;
	shl.b32 	%r423, %r422, 2;
	add.s32 	%r424, %r108, %r423;
	ld.shared.v4.u32 	{%r289, %r290, %r291, %r292}, [%r424+12288];
	or.b32  	%r425, %r374, 3584;
	shr.u32 	%r426, %r425, 4;
	and.b32  	%r427, %r426, 252;
	add.s32 	%r428, %r427, %r374;
	shl.b32 	%r429, %r428, 2;
	add.s32 	%r430, %r108, %r429;
	ld.shared.v4.u32 	{%r293, %r294, %r295, %r296}, [%r430+14336];
	bar.sync 	0;
	mov.b32 	%r218, %f1015;
	mov.b32 	%r219, %f1016;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r169 + 0 ], { %r218, %r219 };
	// end inline asm
	mov.b32 	%r221, %f1017;
	mov.b32 	%r222, %f1018;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r172 + 0 ], { %r221, %r222 };
	// end inline asm
	mov.b32 	%r224, %f1019;
	mov.b32 	%r225, %f1020;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r175 + 0 ], { %r224, %r225 };
	// end inline asm
	mov.b32 	%r227, %f1021;
	mov.b32 	%r228, %f1022;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r178 + 0 ], { %r227, %r228 };
	// end inline asm
	mov.b32 	%r230, %f1023;
	mov.b32 	%r231, %f1024;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r181 + 0 ], { %r230, %r231 };
	// end inline asm
	mov.b32 	%r233, %f1025;
	mov.b32 	%r234, %f1026;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r184 + 0 ], { %r233, %r234 };
	// end inline asm
	mov.b32 	%r236, %f1027;
	mov.b32 	%r237, %f1028;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r187 + 0 ], { %r236, %r237 };
	// end inline asm
	mov.b32 	%r239, %f1029;
	mov.b32 	%r240, %f1030;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r190 + 0 ], { %r239, %r240 };
	// end inline asm
	mov.b32 	%r242, %f1031;
	mov.b32 	%r243, %f1032;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r193 + 0 ], { %r242, %r243 };
	// end inline asm
	mov.b32 	%r245, %f1033;
	mov.b32 	%r246, %f1034;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r196 + 0 ], { %r245, %r246 };
	// end inline asm
	mov.b32 	%r248, %f1035;
	mov.b32 	%r249, %f1036;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r199 + 0 ], { %r248, %r249 };
	// end inline asm
	mov.b32 	%r251, %f1037;
	mov.b32 	%r252, %f1038;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r202 + 0 ], { %r251, %r252 };
	// end inline asm
	mov.b32 	%r254, %f1039;
	mov.b32 	%r255, %f1040;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r205 + 0 ], { %r254, %r255 };
	// end inline asm
	mov.b32 	%r257, %f1041;
	mov.b32 	%r258, %f1042;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r208 + 0 ], { %r257, %r258 };
	// end inline asm
	mov.b32 	%r260, %f1043;
	mov.b32 	%r261, %f1044;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r211 + 0 ], { %r260, %r261 };
	// end inline asm
	mov.b32 	%r263, %f1045;
	mov.b32 	%r264, %f1046;
	// begin inline asm
	@%p67 st.shared.v2.b32 [ %r214 + 0 ], { %r263, %r264 };
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r297, %r298, %r299, %r300}, [%r388];
	ld.shared.v4.u32 	{%r301, %r302, %r303, %r304}, [%r394+2048];
	ld.shared.v4.u32 	{%r305, %r306, %r307, %r308}, [%r400+4096];
	ld.shared.v4.u32 	{%r309, %r310, %r311, %r312}, [%r406+6144];
	ld.shared.v4.u32 	{%r313, %r314, %r315, %r316}, [%r412+8192];
	ld.shared.v4.u32 	{%r317, %r318, %r319, %r320}, [%r418+10240];
	ld.shared.v4.u32 	{%r321, %r322, %r323, %r324}, [%r424+12288];
	ld.shared.v4.u32 	{%r325, %r326, %r327, %r328}, [%r430+14336];
	// begin inline asm
	@%p99 st.global.v4.b32 [ %rd108 + 0 ], { %r265, %r266, %r267, %r268 };
	// end inline asm
	// begin inline asm
	@%p100 st.global.v4.b32 [ %rd109 + 0 ], { %r269, %r270, %r271, %r272 };
	// end inline asm
	// begin inline asm
	@%p101 st.global.v4.b32 [ %rd110 + 0 ], { %r273, %r274, %r275, %r276 };
	// end inline asm
	// begin inline asm
	@%p102 st.global.v4.b32 [ %rd111 + 0 ], { %r277, %r278, %r279, %r280 };
	// end inline asm
	// begin inline asm
	@%p103 st.global.v4.b32 [ %rd112 + 0 ], { %r281, %r282, %r283, %r284 };
	// end inline asm
	// begin inline asm
	@%p104 st.global.v4.b32 [ %rd113 + 0 ], { %r285, %r286, %r287, %r288 };
	// end inline asm
	// begin inline asm
	@%p105 st.global.v4.b32 [ %rd114 + 0 ], { %r289, %r290, %r291, %r292 };
	// end inline asm
	// begin inline asm
	@%p106 st.global.v4.b32 [ %rd115 + 0 ], { %r293, %r294, %r295, %r296 };
	// end inline asm
	// begin inline asm
	@%p107 st.global.v4.b32 [ %rd116 + 0 ], { %r297, %r298, %r299, %r300 };
	// end inline asm
	// begin inline asm
	@%p108 st.global.v4.b32 [ %rd117 + 0 ], { %r301, %r302, %r303, %r304 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd118 + 0 ], { %r305, %r306, %r307, %r308 };
	// end inline asm
	// begin inline asm
	@%p110 st.global.v4.b32 [ %rd119 + 0 ], { %r309, %r310, %r311, %r312 };
	// end inline asm
	// begin inline asm
	@%p111 st.global.v4.b32 [ %rd120 + 0 ], { %r313, %r314, %r315, %r316 };
	// end inline asm
	// begin inline asm
	@%p112 st.global.v4.b32 [ %rd121 + 0 ], { %r317, %r318, %r319, %r320 };
	// end inline asm
	// begin inline asm
	@%p113 st.global.v4.b32 [ %rd122 + 0 ], { %r321, %r322, %r323, %r324 };
	// end inline asm
	// begin inline asm
	@%p114 st.global.v4.b32 [ %rd123 + 0 ], { %r325, %r326, %r327, %r328 };
	// end inline asm
	.loc	1 39 4                          // matmul-with-dot-v2.py:39:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/triton_runner/examples/v3.2.0/python_runner/matmul-with-dot-v2.py"
	.file	2 "/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 163                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x9c DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 45
.b8 119
.b8 105
.b8 116
.b8 104
.b8 45
.b8 100
.b8 111
.b8 116
.b8 45
.b8 118
.b8 50
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 114
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 47
.b8 101
.b8 120
.b8 97
.b8 109
.b8 112
.b8 108
.b8 101
.b8 115
.b8 47
.b8 118
.b8 51
.b8 46
.b8 50
.b8 46
.b8 48
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 95
.b8 114
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 0
.b8 2                                   // Abbrev [2] 0x68:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x78:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 104                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x8d:0x18 DW_TAG_inlined_subroutine
.b32 104                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 29                                  // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
