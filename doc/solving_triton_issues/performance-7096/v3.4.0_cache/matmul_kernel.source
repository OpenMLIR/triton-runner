#loc = loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0)
#loc73 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":31:0)
module {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.call @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%arg3) : (i32) -> i32 loc(#loc2)
    %2 = tt.call @"triton.language.standard.cdiv__i32__(1,)cconstexpr_128_"(%arg4) : (i32) -> i32 loc(#loc3)
    %c8_i32 = arith.constant 8 : i32 loc(#loc4)
    %c8_i32_0 = arith.constant 8 : i32 loc(#loc4)
    %3 = arith.extsi %c8_i32_0 : i32 to i64 loc(#loc4)
    %4 = arith.extsi %2 : i32 to i64 loc(#loc4)
    %5 = arith.muli %3, %4 : i64 loc(#loc4)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc4)
    %6 = arith.cmpi sle, %5, %c2147483647_i64 : i64 loc(#loc4)
    %7 = arith.cmpi sge, %5, %c-2147483648_i64 : i64 loc(#loc4)
    %8 = arith.andi %6, %7 : i1 loc(#loc4)
    %9 = arith.muli %c8_i32_0, %2 : i32 loc(#loc4)
    %10 = arith.divsi %0, %9 : i32 loc(#loc5)
    %c8_i32_1 = arith.constant 8 : i32 loc(#loc6)
    %c8_i32_2 = arith.constant 8 : i32 loc(#loc6)
    %11 = arith.extsi %10 : i32 to i64 loc(#loc6)
    %12 = arith.extsi %c8_i32_2 : i32 to i64 loc(#loc6)
    %13 = arith.muli %11, %12 : i64 loc(#loc6)
    %c2147483647_i64_3 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_4 = arith.constant -2147483648 : i64 loc(#loc6)
    %14 = arith.cmpi sle, %13, %c2147483647_i64_3 : i64 loc(#loc6)
    %15 = arith.cmpi sge, %13, %c-2147483648_i64_4 : i64 loc(#loc6)
    %16 = arith.andi %14, %15 : i1 loc(#loc6)
    %17 = arith.muli %10, %c8_i32_2 : i32 loc(#loc6)
    %18 = arith.extsi %1 : i32 to i64 loc(#loc7)
    %19 = arith.extsi %17 : i32 to i64 loc(#loc7)
    %20 = arith.subi %18, %19 : i64 loc(#loc7)
    %c2147483647_i64_5 = arith.constant 2147483647 : i64 loc(#loc7)
    %c-2147483648_i64_6 = arith.constant -2147483648 : i64 loc(#loc7)
    %21 = arith.cmpi sle, %20, %c2147483647_i64_5 : i64 loc(#loc7)
    %22 = arith.cmpi sge, %20, %c-2147483648_i64_6 : i64 loc(#loc7)
    %23 = arith.andi %21, %22 : i1 loc(#loc7)
    %24 = arith.subi %1, %17 : i32 loc(#loc7)
    %c8_i32_7 = arith.constant 8 : i32 loc(#loc8)
    %25 = arith.minsi %24, %c8_i32_7 : i32 loc(#loc8)
    %26 = arith.remsi %0, %9 : i32 loc(#loc9)
    %27 = arith.remsi %26, %25 : i32 loc(#loc10)
    %28 = arith.extsi %17 : i32 to i64 loc(#loc11)
    %29 = arith.extsi %27 : i32 to i64 loc(#loc11)
    %30 = arith.addi %28, %29 : i64 loc(#loc11)
    %c2147483647_i64_8 = arith.constant 2147483647 : i64 loc(#loc11)
    %c-2147483648_i64_9 = arith.constant -2147483648 : i64 loc(#loc11)
    %31 = arith.cmpi sle, %30, %c2147483647_i64_8 : i64 loc(#loc11)
    %32 = arith.cmpi sge, %30, %c-2147483648_i64_9 : i64 loc(#loc11)
    %33 = arith.andi %31, %32 : i1 loc(#loc11)
    %34 = arith.addi %17, %27 : i32 loc(#loc11)
    %35 = arith.remsi %0, %9 : i32 loc(#loc12)
    %36 = arith.divsi %35, %25 : i32 loc(#loc13)
    %c64_i32 = arith.constant 64 : i32 loc(#loc14)
    %c64_i32_10 = arith.constant 64 : i32 loc(#loc14)
    %37 = arith.extsi %34 : i32 to i64 loc(#loc14)
    %38 = arith.extsi %c64_i32_10 : i32 to i64 loc(#loc14)
    %39 = arith.muli %37, %38 : i64 loc(#loc14)
    %c2147483647_i64_11 = arith.constant 2147483647 : i64 loc(#loc14)
    %c-2147483648_i64_12 = arith.constant -2147483648 : i64 loc(#loc14)
    %40 = arith.cmpi sle, %39, %c2147483647_i64_11 : i64 loc(#loc14)
    %41 = arith.cmpi sge, %39, %c-2147483648_i64_12 : i64 loc(#loc14)
    %42 = arith.andi %40, %41 : i1 loc(#loc14)
    %43 = arith.muli %34, %c64_i32_10 : i32 loc(#loc14)
    %44 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc15)
    %45 = tt.splat %43 : i32 -> tensor<64xi32> loc(#loc16)
    %46 = arith.extsi %45 : tensor<64xi32> to tensor<64xi64> loc(#loc16)
    %47 = arith.extsi %44 : tensor<64xi32> to tensor<64xi64> loc(#loc16)
    %48 = arith.addi %46, %47 : tensor<64xi64> loc(#loc16)
    %c2147483647_i64_13 = arith.constant 2147483647 : i64 loc(#loc16)
    %c-2147483648_i64_14 = arith.constant -2147483648 : i64 loc(#loc16)
    %cst = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc16)
    %49 = arith.cmpi sle, %48, %cst : tensor<64xi64> loc(#loc16)
    %cst_15 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc16)
    %50 = arith.cmpi sge, %48, %cst_15 : tensor<64xi64> loc(#loc16)
    %51 = arith.andi %49, %50 : tensor<64xi1> loc(#loc16)
    %52 = arith.addi %45, %44 : tensor<64xi32> loc(#loc16)
    %53 = tt.splat %arg3 : i32 -> tensor<64xi32> loc(#loc17)
    %54 = arith.remsi %52, %53 : tensor<64xi32> loc(#loc17)
    %c128_i32 = arith.constant 128 : i32 loc(#loc18)
    %c128_i32_16 = arith.constant 128 : i32 loc(#loc18)
    %55 = arith.extsi %36 : i32 to i64 loc(#loc18)
    %56 = arith.extsi %c128_i32_16 : i32 to i64 loc(#loc18)
    %57 = arith.muli %55, %56 : i64 loc(#loc18)
    %c2147483647_i64_17 = arith.constant 2147483647 : i64 loc(#loc18)
    %c-2147483648_i64_18 = arith.constant -2147483648 : i64 loc(#loc18)
    %58 = arith.cmpi sle, %57, %c2147483647_i64_17 : i64 loc(#loc18)
    %59 = arith.cmpi sge, %57, %c-2147483648_i64_18 : i64 loc(#loc18)
    %60 = arith.andi %58, %59 : i1 loc(#loc18)
    %61 = arith.muli %36, %c128_i32_16 : i32 loc(#loc18)
    %62 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc19)
    %63 = tt.splat %61 : i32 -> tensor<128xi32> loc(#loc20)
    %64 = arith.extsi %63 : tensor<128xi32> to tensor<128xi64> loc(#loc20)
    %65 = arith.extsi %62 : tensor<128xi32> to tensor<128xi64> loc(#loc20)
    %66 = arith.addi %64, %65 : tensor<128xi64> loc(#loc20)
    %c2147483647_i64_19 = arith.constant 2147483647 : i64 loc(#loc20)
    %c-2147483648_i64_20 = arith.constant -2147483648 : i64 loc(#loc20)
    %cst_21 = arith.constant dense<2147483647> : tensor<128xi64> loc(#loc20)
    %67 = arith.cmpi sle, %66, %cst_21 : tensor<128xi64> loc(#loc20)
    %cst_22 = arith.constant dense<-2147483648> : tensor<128xi64> loc(#loc20)
    %68 = arith.cmpi sge, %66, %cst_22 : tensor<128xi64> loc(#loc20)
    %69 = arith.andi %67, %68 : tensor<128xi1> loc(#loc20)
    %70 = arith.addi %63, %62 : tensor<128xi32> loc(#loc20)
    %71 = tt.splat %arg4 : i32 -> tensor<128xi32> loc(#loc21)
    %72 = arith.remsi %70, %71 : tensor<128xi32> loc(#loc21)
    %73 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc22)
    %74 = tt.expand_dims %54 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc23)
    %75 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc24)
    %76 = arith.extsi %74 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc24)
    %77 = arith.extsi %75 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc24)
    %78 = arith.muli %76, %77 : tensor<64x1xi64> loc(#loc24)
    %c2147483647_i64_23 = arith.constant 2147483647 : i64 loc(#loc24)
    %c-2147483648_i64_24 = arith.constant -2147483648 : i64 loc(#loc24)
    %cst_25 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc24)
    %79 = arith.cmpi sle, %78, %cst_25 : tensor<64x1xi64> loc(#loc24)
    %cst_26 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc24)
    %80 = arith.cmpi sge, %78, %cst_26 : tensor<64x1xi64> loc(#loc24)
    %81 = arith.andi %79, %80 : tensor<64x1xi1> loc(#loc24)
    %82 = arith.muli %74, %75 : tensor<64x1xi32> loc(#loc24)
    %83 = tt.expand_dims %73 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc25)
    %c1_i32 = arith.constant 1 : i32 loc(#loc26)
    %c1_i32_27 = arith.constant 1 : i32 loc(#loc26)
    %cst_28 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc26)
    %84 = arith.extsi %83 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc26)
    %85 = arith.extsi %cst_28 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc26)
    %86 = arith.muli %84, %85 : tensor<1x64xi64> loc(#loc26)
    %c2147483647_i64_29 = arith.constant 2147483647 : i64 loc(#loc26)
    %c-2147483648_i64_30 = arith.constant -2147483648 : i64 loc(#loc26)
    %cst_31 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc26)
    %87 = arith.cmpi sle, %86, %cst_31 : tensor<1x64xi64> loc(#loc26)
    %cst_32 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc26)
    %88 = arith.cmpi sge, %86, %cst_32 : tensor<1x64xi64> loc(#loc26)
    %89 = arith.andi %87, %88 : tensor<1x64xi1> loc(#loc26)
    %90 = arith.muli %83, %cst_28 : tensor<1x64xi32> loc(#loc26)
    %91 = tt.broadcast %82 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc27)
    %92 = tt.broadcast %90 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc27)
    %93 = arith.extsi %91 : tensor<64x64xi32> to tensor<64x64xi64> loc(#loc27)
    %94 = arith.extsi %92 : tensor<64x64xi32> to tensor<64x64xi64> loc(#loc27)
    %95 = arith.addi %93, %94 : tensor<64x64xi64> loc(#loc27)
    %c2147483647_i64_33 = arith.constant 2147483647 : i64 loc(#loc27)
    %c-2147483648_i64_34 = arith.constant -2147483648 : i64 loc(#loc27)
    %cst_35 = arith.constant dense<2147483647> : tensor<64x64xi64> loc(#loc27)
    %96 = arith.cmpi sle, %95, %cst_35 : tensor<64x64xi64> loc(#loc27)
    %cst_36 = arith.constant dense<-2147483648> : tensor<64x64xi64> loc(#loc27)
    %97 = arith.cmpi sge, %95, %cst_36 : tensor<64x64xi64> loc(#loc27)
    %98 = arith.andi %96, %97 : tensor<64x64xi1> loc(#loc27)
    %99 = arith.addi %91, %92 : tensor<64x64xi32> loc(#loc27)
    %100 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>> loc(#loc28)
    %101 = tt.addptr %100, %99 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi32> loc(#loc28)
    %102 = tt.expand_dims %73 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc29)
    %103 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc30)
    %104 = arith.extsi %102 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc30)
    %105 = arith.extsi %103 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc30)
    %106 = arith.muli %104, %105 : tensor<64x1xi64> loc(#loc30)
    %c2147483647_i64_37 = arith.constant 2147483647 : i64 loc(#loc30)
    %c-2147483648_i64_38 = arith.constant -2147483648 : i64 loc(#loc30)
    %cst_39 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc30)
    %107 = arith.cmpi sle, %106, %cst_39 : tensor<64x1xi64> loc(#loc30)
    %cst_40 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc30)
    %108 = arith.cmpi sge, %106, %cst_40 : tensor<64x1xi64> loc(#loc30)
    %109 = arith.andi %107, %108 : tensor<64x1xi1> loc(#loc30)
    %110 = arith.muli %102, %103 : tensor<64x1xi32> loc(#loc30)
    %111 = tt.expand_dims %72 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc31)
    %c1_i32_41 = arith.constant 1 : i32 loc(#loc32)
    %c1_i32_42 = arith.constant 1 : i32 loc(#loc32)
    %cst_43 = arith.constant dense<1> : tensor<1x128xi32> loc(#loc32)
    %112 = arith.extsi %111 : tensor<1x128xi32> to tensor<1x128xi64> loc(#loc32)
    %113 = arith.extsi %cst_43 : tensor<1x128xi32> to tensor<1x128xi64> loc(#loc32)
    %114 = arith.muli %112, %113 : tensor<1x128xi64> loc(#loc32)
    %c2147483647_i64_44 = arith.constant 2147483647 : i64 loc(#loc32)
    %c-2147483648_i64_45 = arith.constant -2147483648 : i64 loc(#loc32)
    %cst_46 = arith.constant dense<2147483647> : tensor<1x128xi64> loc(#loc32)
    %115 = arith.cmpi sle, %114, %cst_46 : tensor<1x128xi64> loc(#loc32)
    %cst_47 = arith.constant dense<-2147483648> : tensor<1x128xi64> loc(#loc32)
    %116 = arith.cmpi sge, %114, %cst_47 : tensor<1x128xi64> loc(#loc32)
    %117 = arith.andi %115, %116 : tensor<1x128xi1> loc(#loc32)
    %118 = arith.muli %111, %cst_43 : tensor<1x128xi32> loc(#loc32)
    %119 = tt.broadcast %110 : tensor<64x1xi32> -> tensor<64x128xi32> loc(#loc33)
    %120 = tt.broadcast %118 : tensor<1x128xi32> -> tensor<64x128xi32> loc(#loc33)
    %121 = arith.extsi %119 : tensor<64x128xi32> to tensor<64x128xi64> loc(#loc33)
    %122 = arith.extsi %120 : tensor<64x128xi32> to tensor<64x128xi64> loc(#loc33)
    %123 = arith.addi %121, %122 : tensor<64x128xi64> loc(#loc33)
    %c2147483647_i64_48 = arith.constant 2147483647 : i64 loc(#loc33)
    %c-2147483648_i64_49 = arith.constant -2147483648 : i64 loc(#loc33)
    %cst_50 = arith.constant dense<2147483647> : tensor<64x128xi64> loc(#loc33)
    %124 = arith.cmpi sle, %123, %cst_50 : tensor<64x128xi64> loc(#loc33)
    %cst_51 = arith.constant dense<-2147483648> : tensor<64x128xi64> loc(#loc33)
    %125 = arith.cmpi sge, %123, %cst_51 : tensor<64x128xi64> loc(#loc33)
    %126 = arith.andi %124, %125 : tensor<64x128xi1> loc(#loc33)
    %127 = arith.addi %119, %120 : tensor<64x128xi32> loc(#loc33)
    %128 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x128x!tt.ptr<f16>> loc(#loc34)
    %129 = tt.addptr %128, %127 : tensor<64x128x!tt.ptr<f16>>, tensor<64x128xi32> loc(#loc34)
    %130 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_128__(1,)cconstexpr_fp32_"() : () -> tensor<64x128xf32> loc(#loc35)
    %131 = tt.call @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%arg5) : (i32) -> i32 loc(#loc36)
    %c0_i32 = arith.constant 0 : i32 loc(#loc37)
    %c1_i32_52 = arith.constant 1 : i32 loc(#loc37)
    %132 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc37)
    %133 = arith.bitcast %131 : i32 to i32 loc(#loc37)
    %134 = arith.bitcast %c1_i32_52 : i32 to i32 loc(#loc37)
    %135 = ub.poison : i32 loc(#loc37)
    %136:3 = scf.for %arg9 = %132 to %133 step %134 iter_args(%arg10 = %130, %arg11 = %101, %arg12 = %129) -> (tensor<64x128xf32>, tensor<64x64x!tt.ptr<f16>>, tensor<64x128x!tt.ptr<f16>>)  : i32 {
      %201 = tt.expand_dims %73 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc38)
      %c64_i32_80 = arith.constant 64 : i32 loc(#loc39)
      %c64_i32_81 = arith.constant 64 : i32 loc(#loc39)
      %202 = arith.extsi %arg9 : i32 to i64 loc(#loc39)
      %203 = arith.extsi %c64_i32_81 : i32 to i64 loc(#loc39)
      %204 = arith.muli %202, %203 : i64 loc(#loc39)
      %c2147483647_i64_82 = arith.constant 2147483647 : i64 loc(#loc39)
      %c-2147483648_i64_83 = arith.constant -2147483648 : i64 loc(#loc39)
      %205 = arith.cmpi sle, %204, %c2147483647_i64_82 : i64 loc(#loc39)
      %206 = arith.cmpi sge, %204, %c-2147483648_i64_83 : i64 loc(#loc39)
      %207 = arith.andi %205, %206 : i1 loc(#loc39)
      %208 = arith.muli %arg9, %c64_i32_81 : i32 loc(#loc39)
      %209 = arith.extsi %arg5 : i32 to i64 loc(#loc40)
      %210 = arith.extsi %208 : i32 to i64 loc(#loc40)
      %211 = arith.subi %209, %210 : i64 loc(#loc40)
      %c2147483647_i64_84 = arith.constant 2147483647 : i64 loc(#loc40)
      %c-2147483648_i64_85 = arith.constant -2147483648 : i64 loc(#loc40)
      %212 = arith.cmpi sle, %211, %c2147483647_i64_84 : i64 loc(#loc40)
      %213 = arith.cmpi sge, %211, %c-2147483648_i64_85 : i64 loc(#loc40)
      %214 = arith.andi %212, %213 : i1 loc(#loc40)
      %215 = arith.subi %arg5, %208 : i32 loc(#loc40)
      %216 = tt.splat %215 : i32 -> tensor<1x64xi32> loc(#loc41)
      %217 = arith.cmpi slt, %201, %216 : tensor<1x64xi32> loc(#loc41)
      %cst_86 = arith.constant 0.000000e+00 : f32 loc(#loc42)
      %218 = tt.broadcast %217 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc42)
      %cst_87 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc42)
      %219 = arith.truncf %cst_87 : tensor<64x64xf32> to tensor<64x64xf16> loc(#loc42)
      %220 = tt.load %arg11, %218, %219 : tensor<64x64x!tt.ptr<f16>> loc(#loc42)
      %221 = tt.expand_dims %73 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc43)
      %c64_i32_88 = arith.constant 64 : i32 loc(#loc44)
      %c64_i32_89 = arith.constant 64 : i32 loc(#loc44)
      %222 = arith.extsi %arg9 : i32 to i64 loc(#loc44)
      %223 = arith.extsi %c64_i32_89 : i32 to i64 loc(#loc44)
      %224 = arith.muli %222, %223 : i64 loc(#loc44)
      %c2147483647_i64_90 = arith.constant 2147483647 : i64 loc(#loc44)
      %c-2147483648_i64_91 = arith.constant -2147483648 : i64 loc(#loc44)
      %225 = arith.cmpi sle, %224, %c2147483647_i64_90 : i64 loc(#loc44)
      %226 = arith.cmpi sge, %224, %c-2147483648_i64_91 : i64 loc(#loc44)
      %227 = arith.andi %225, %226 : i1 loc(#loc44)
      %228 = arith.muli %arg9, %c64_i32_89 : i32 loc(#loc44)
      %229 = arith.extsi %arg5 : i32 to i64 loc(#loc45)
      %230 = arith.extsi %228 : i32 to i64 loc(#loc45)
      %231 = arith.subi %229, %230 : i64 loc(#loc45)
      %c2147483647_i64_92 = arith.constant 2147483647 : i64 loc(#loc45)
      %c-2147483648_i64_93 = arith.constant -2147483648 : i64 loc(#loc45)
      %232 = arith.cmpi sle, %231, %c2147483647_i64_92 : i64 loc(#loc45)
      %233 = arith.cmpi sge, %231, %c-2147483648_i64_93 : i64 loc(#loc45)
      %234 = arith.andi %232, %233 : i1 loc(#loc45)
      %235 = arith.subi %arg5, %228 : i32 loc(#loc45)
      %236 = tt.splat %235 : i32 -> tensor<64x1xi32> loc(#loc46)
      %237 = arith.cmpi slt, %221, %236 : tensor<64x1xi32> loc(#loc46)
      %cst_94 = arith.constant 0.000000e+00 : f32 loc(#loc47)
      %238 = tt.broadcast %237 : tensor<64x1xi1> -> tensor<64x128xi1> loc(#loc47)
      %cst_95 = arith.constant dense<0.000000e+00> : tensor<64x128xf32> loc(#loc47)
      %239 = arith.truncf %cst_95 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc47)
      %240 = tt.load %arg12, %238, %239 : tensor<64x128x!tt.ptr<f16>> loc(#loc47)
      %cst_96 = arith.constant 0.000000e+00 : f32 loc(#loc48)
      %241 = tt.dot %220, %240, %arg10, inputPrecision = tf32 : tensor<64x64xf16> * tensor<64x128xf16> -> tensor<64x128xf32> loc(#loc48)
      %c64_i32_97 = arith.constant 64 : i32 loc(#loc49)
      %cst_98 = arith.constant dense<64> : tensor<64x64xi32> loc(#loc49)
      %242 = tt.addptr %arg11, %cst_98 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi32> loc(#loc49)
      %c64_i32_99 = arith.constant 64 : i32 loc(#loc50)
      %c64_i32_100 = arith.constant 64 : i32 loc(#loc50)
      %243 = arith.extsi %c64_i32_100 : i32 to i64 loc(#loc50)
      %244 = arith.extsi %arg7 : i32 to i64 loc(#loc50)
      %245 = arith.muli %243, %244 : i64 loc(#loc50)
      %c2147483647_i64_101 = arith.constant 2147483647 : i64 loc(#loc50)
      %c-2147483648_i64_102 = arith.constant -2147483648 : i64 loc(#loc50)
      %246 = arith.cmpi sle, %245, %c2147483647_i64_101 : i64 loc(#loc50)
      %247 = arith.cmpi sge, %245, %c-2147483648_i64_102 : i64 loc(#loc50)
      %248 = arith.andi %246, %247 : i1 loc(#loc50)
      %249 = arith.muli %c64_i32_100, %arg7 : i32 loc(#loc50)
      %250 = tt.splat %249 : i32 -> tensor<64x128xi32> loc(#loc51)
      %251 = tt.addptr %arg12, %250 : tensor<64x128x!tt.ptr<f16>>, tensor<64x128xi32> loc(#loc51)
      scf.yield %241, %242, %251 : tensor<64x128xf32>, tensor<64x64x!tt.ptr<f16>>, tensor<64x128x!tt.ptr<f16>> loc(#loc52)
    } loc(#loc37)
    %137 = arith.truncf %136#0 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc53)
    %c64_i32_53 = arith.constant 64 : i32 loc(#loc54)
    %c64_i32_54 = arith.constant 64 : i32 loc(#loc54)
    %138 = arith.extsi %34 : i32 to i64 loc(#loc54)
    %139 = arith.extsi %c64_i32_54 : i32 to i64 loc(#loc54)
    %140 = arith.muli %138, %139 : i64 loc(#loc54)
    %c2147483647_i64_55 = arith.constant 2147483647 : i64 loc(#loc54)
    %c-2147483648_i64_56 = arith.constant -2147483648 : i64 loc(#loc54)
    %141 = arith.cmpi sle, %140, %c2147483647_i64_55 : i64 loc(#loc54)
    %142 = arith.cmpi sge, %140, %c-2147483648_i64_56 : i64 loc(#loc54)
    %143 = arith.andi %141, %142 : i1 loc(#loc54)
    %144 = arith.muli %34, %c64_i32_54 : i32 loc(#loc54)
    %145 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc55)
    %146 = tt.splat %144 : i32 -> tensor<64xi32> loc(#loc56)
    %147 = arith.extsi %146 : tensor<64xi32> to tensor<64xi64> loc(#loc56)
    %148 = arith.extsi %145 : tensor<64xi32> to tensor<64xi64> loc(#loc56)
    %149 = arith.addi %147, %148 : tensor<64xi64> loc(#loc56)
    %c2147483647_i64_57 = arith.constant 2147483647 : i64 loc(#loc56)
    %c-2147483648_i64_58 = arith.constant -2147483648 : i64 loc(#loc56)
    %cst_59 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc56)
    %150 = arith.cmpi sle, %149, %cst_59 : tensor<64xi64> loc(#loc56)
    %cst_60 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc56)
    %151 = arith.cmpi sge, %149, %cst_60 : tensor<64xi64> loc(#loc56)
    %152 = arith.andi %150, %151 : tensor<64xi1> loc(#loc56)
    %153 = arith.addi %146, %145 : tensor<64xi32> loc(#loc56)
    %c128_i32_61 = arith.constant 128 : i32 loc(#loc57)
    %c128_i32_62 = arith.constant 128 : i32 loc(#loc57)
    %154 = arith.extsi %36 : i32 to i64 loc(#loc57)
    %155 = arith.extsi %c128_i32_62 : i32 to i64 loc(#loc57)
    %156 = arith.muli %154, %155 : i64 loc(#loc57)
    %c2147483647_i64_63 = arith.constant 2147483647 : i64 loc(#loc57)
    %c-2147483648_i64_64 = arith.constant -2147483648 : i64 loc(#loc57)
    %157 = arith.cmpi sle, %156, %c2147483647_i64_63 : i64 loc(#loc57)
    %158 = arith.cmpi sge, %156, %c-2147483648_i64_64 : i64 loc(#loc57)
    %159 = arith.andi %157, %158 : i1 loc(#loc57)
    %160 = arith.muli %36, %c128_i32_62 : i32 loc(#loc57)
    %161 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc58)
    %162 = tt.splat %160 : i32 -> tensor<128xi32> loc(#loc59)
    %163 = arith.extsi %162 : tensor<128xi32> to tensor<128xi64> loc(#loc59)
    %164 = arith.extsi %161 : tensor<128xi32> to tensor<128xi64> loc(#loc59)
    %165 = arith.addi %163, %164 : tensor<128xi64> loc(#loc59)
    %c2147483647_i64_65 = arith.constant 2147483647 : i64 loc(#loc59)
    %c-2147483648_i64_66 = arith.constant -2147483648 : i64 loc(#loc59)
    %cst_67 = arith.constant dense<2147483647> : tensor<128xi64> loc(#loc59)
    %166 = arith.cmpi sle, %165, %cst_67 : tensor<128xi64> loc(#loc59)
    %cst_68 = arith.constant dense<-2147483648> : tensor<128xi64> loc(#loc59)
    %167 = arith.cmpi sge, %165, %cst_68 : tensor<128xi64> loc(#loc59)
    %168 = arith.andi %166, %167 : tensor<128xi1> loc(#loc59)
    %169 = arith.addi %162, %161 : tensor<128xi32> loc(#loc59)
    %170 = tt.expand_dims %153 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc60)
    %171 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc61)
    %172 = arith.extsi %171 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc61)
    %173 = arith.extsi %170 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc61)
    %174 = arith.muli %172, %173 : tensor<64x1xi64> loc(#loc61)
    %c2147483647_i64_69 = arith.constant 2147483647 : i64 loc(#loc61)
    %c-2147483648_i64_70 = arith.constant -2147483648 : i64 loc(#loc61)
    %cst_71 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc61)
    %175 = arith.cmpi sle, %174, %cst_71 : tensor<64x1xi64> loc(#loc61)
    %cst_72 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc61)
    %176 = arith.cmpi sge, %174, %cst_72 : tensor<64x1xi64> loc(#loc61)
    %177 = arith.andi %175, %176 : tensor<64x1xi1> loc(#loc61)
    %178 = arith.muli %171, %170 : tensor<64x1xi32> loc(#loc61)
    %179 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>> loc(#loc62)
    %180 = tt.addptr %179, %178 : tensor<64x1x!tt.ptr<f16>>, tensor<64x1xi32> loc(#loc62)
    %181 = tt.expand_dims %169 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc63)
    %c1_i32_73 = arith.constant 1 : i32 loc(#loc64)
    %c1_i32_74 = arith.constant 1 : i32 loc(#loc64)
    %cst_75 = arith.constant dense<1> : tensor<1x128xi32> loc(#loc64)
    %182 = arith.extsi %cst_75 : tensor<1x128xi32> to tensor<1x128xi64> loc(#loc64)
    %183 = arith.extsi %181 : tensor<1x128xi32> to tensor<1x128xi64> loc(#loc64)
    %184 = arith.muli %182, %183 : tensor<1x128xi64> loc(#loc64)
    %c2147483647_i64_76 = arith.constant 2147483647 : i64 loc(#loc64)
    %c-2147483648_i64_77 = arith.constant -2147483648 : i64 loc(#loc64)
    %cst_78 = arith.constant dense<2147483647> : tensor<1x128xi64> loc(#loc64)
    %185 = arith.cmpi sle, %184, %cst_78 : tensor<1x128xi64> loc(#loc64)
    %cst_79 = arith.constant dense<-2147483648> : tensor<1x128xi64> loc(#loc64)
    %186 = arith.cmpi sge, %184, %cst_79 : tensor<1x128xi64> loc(#loc64)
    %187 = arith.andi %185, %186 : tensor<1x128xi1> loc(#loc64)
    %188 = arith.muli %cst_75, %181 : tensor<1x128xi32> loc(#loc64)
    %189 = tt.broadcast %180 : tensor<64x1x!tt.ptr<f16>> -> tensor<64x128x!tt.ptr<f16>> loc(#loc65)
    %190 = tt.broadcast %188 : tensor<1x128xi32> -> tensor<64x128xi32> loc(#loc65)
    %191 = tt.addptr %189, %190 : tensor<64x128x!tt.ptr<f16>>, tensor<64x128xi32> loc(#loc65)
    %192 = tt.expand_dims %153 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc66)
    %193 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc67)
    %194 = arith.cmpi slt, %192, %193 : tensor<64x1xi32> loc(#loc67)
    %195 = tt.expand_dims %169 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc68)
    %196 = tt.splat %arg4 : i32 -> tensor<1x128xi32> loc(#loc69)
    %197 = arith.cmpi slt, %195, %196 : tensor<1x128xi32> loc(#loc69)
    %198 = tt.broadcast %194 : tensor<64x1xi1> -> tensor<64x128xi1> loc(#loc70)
    %199 = tt.broadcast %197 : tensor<1x128xi1> -> tensor<64x128xi1> loc(#loc70)
    %200 = arith.andi %198, %199 : tensor<64x128xi1> loc(#loc70)
    tt.store %191, %137, %200 : tensor<64x128x!tt.ptr<f16>> loc(#loc71)
    tt.return loc(#loc72)
  } loc(#loc)
  tt.func private @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%arg0: i32 loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":31:0)) -> i32 attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc74)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc74)
    %0 = arith.extsi %arg0 : i32 to i64 loc(#loc74)
    %1 = arith.extsi %c64_i32_0 : i32 to i64 loc(#loc74)
    %2 = arith.addi %0, %1 : i64 loc(#loc74)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc74)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc74)
    %3 = arith.cmpi sle, %2, %c2147483647_i64 : i64 loc(#loc74)
    %4 = arith.cmpi sge, %2, %c-2147483648_i64 : i64 loc(#loc74)
    %5 = arith.andi %3, %4 : i1 loc(#loc74)
    %6 = arith.addi %arg0, %c64_i32_0 : i32 loc(#loc74)
    %c1_i32 = arith.constant 1 : i32 loc(#loc75)
    %c1_i32_1 = arith.constant 1 : i32 loc(#loc75)
    %7 = arith.extsi %6 : i32 to i64 loc(#loc75)
    %8 = arith.extsi %c1_i32_1 : i32 to i64 loc(#loc75)
    %9 = arith.subi %7, %8 : i64 loc(#loc75)
    %c2147483647_i64_2 = arith.constant 2147483647 : i64 loc(#loc75)
    %c-2147483648_i64_3 = arith.constant -2147483648 : i64 loc(#loc75)
    %10 = arith.cmpi sle, %9, %c2147483647_i64_2 : i64 loc(#loc75)
    %11 = arith.cmpi sge, %9, %c-2147483648_i64_3 : i64 loc(#loc75)
    %12 = arith.andi %10, %11 : i1 loc(#loc75)
    %13 = arith.subi %6, %c1_i32_1 : i32 loc(#loc75)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc76)
    %c64_i32_5 = arith.constant 64 : i32 loc(#loc76)
    %14 = arith.divsi %13, %c64_i32_5 : i32 loc(#loc76)
    tt.return %14 : i32 loc(#loc77)
  ^bb1:  // no predecessors
    %15 = ub.poison : i32 loc(#loc78)
    tt.return %15 : i32 loc(#loc78)
  } loc(#loc73)
  tt.func private @"triton.language.standard.cdiv__i32__(1,)cconstexpr_128_"(%arg0: i32 loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":31:0)) -> i32 attributes {noinline = false} {
    %c128_i32 = arith.constant 128 : i32 loc(#loc74)
    %c128_i32_0 = arith.constant 128 : i32 loc(#loc74)
    %0 = arith.extsi %arg0 : i32 to i64 loc(#loc74)
    %1 = arith.extsi %c128_i32_0 : i32 to i64 loc(#loc74)
    %2 = arith.addi %0, %1 : i64 loc(#loc74)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc74)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc74)
    %3 = arith.cmpi sle, %2, %c2147483647_i64 : i64 loc(#loc74)
    %4 = arith.cmpi sge, %2, %c-2147483648_i64 : i64 loc(#loc74)
    %5 = arith.andi %3, %4 : i1 loc(#loc74)
    %6 = arith.addi %arg0, %c128_i32_0 : i32 loc(#loc74)
    %c1_i32 = arith.constant 1 : i32 loc(#loc75)
    %c1_i32_1 = arith.constant 1 : i32 loc(#loc75)
    %7 = arith.extsi %6 : i32 to i64 loc(#loc75)
    %8 = arith.extsi %c1_i32_1 : i32 to i64 loc(#loc75)
    %9 = arith.subi %7, %8 : i64 loc(#loc75)
    %c2147483647_i64_2 = arith.constant 2147483647 : i64 loc(#loc75)
    %c-2147483648_i64_3 = arith.constant -2147483648 : i64 loc(#loc75)
    %10 = arith.cmpi sle, %9, %c2147483647_i64_2 : i64 loc(#loc75)
    %11 = arith.cmpi sge, %9, %c-2147483648_i64_3 : i64 loc(#loc75)
    %12 = arith.andi %10, %11 : i1 loc(#loc75)
    %13 = arith.subi %6, %c1_i32_1 : i32 loc(#loc75)
    %c128_i32_4 = arith.constant 128 : i32 loc(#loc76)
    %c128_i32_5 = arith.constant 128 : i32 loc(#loc76)
    %14 = arith.divsi %13, %c128_i32_5 : i32 loc(#loc76)
    tt.return %14 : i32 loc(#loc77)
  ^bb1:  // no predecessors
    %15 = ub.poison : i32 loc(#loc78)
    tt.return %15 : i32 loc(#loc78)
  } loc(#loc73)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_128__(1,)cconstexpr_fp32_"() -> tensor<64x128xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc80)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x128xf32> loc(#loc80)
    tt.return %cst_0 : tensor<64x128xf32> loc(#loc81)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<64x128xf32> loc(#loc82)
    tt.return %0 : tensor<64x128xf32> loc(#loc82)
  } loc(#loc79)
} loc(#loc)
#loc1 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":19:24)
#loc2 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":20:27)
#loc3 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":21:27)
#loc4 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":22:38)
#loc5 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":23:22)
#loc6 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":24:29)
#loc7 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":25:35)
#loc8 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":25:48)
#loc9 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":26:34)
#loc10 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":26:54)
#loc11 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":26:27)
#loc12 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":27:19)
#loc13 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":27:40)
#loc14 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":29:23)
#loc15 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":29:51)
#loc16 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":29:38)
#loc17 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":29:68)
#loc18 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":30:23)
#loc19 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":30:51)
#loc20 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":30:38)
#loc21 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":30:68)
#loc22 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":31:26)
#loc23 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":32:30)
#loc24 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":32:41)
#loc25 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":32:60)
#loc26 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":32:71)
#loc27 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":32:53)
#loc28 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":32:22)
#loc29 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":33:29)
#loc30 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":33:40)
#loc31 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":33:60)
#loc32 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":33:71)
#loc33 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":33:52)
#loc34 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":33:22)
#loc35 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":35:27)
#loc36 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":36:33)
#loc37 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":36:22)
#loc38 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":37:40)
#loc39 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":37:59)
#loc40 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":37:55)
#loc41 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":37:51)
#loc42 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":37:20)
#loc43 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":38:40)
#loc44 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":38:59)
#loc45 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":38:55)
#loc46 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":38:51)
#loc47 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":38:20)
#loc48 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":39:35)
#loc49 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":40:18)
#loc50 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":41:33)
#loc51 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":41:18)
#loc52 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":41:8)
#loc53 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":42:23)
#loc54 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":44:22)
#loc55 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":44:50)
#loc56 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":44:37)
#loc57 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":45:22)
#loc58 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":45:50)
#loc59 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":45:37)
#loc60 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":46:41)
#loc61 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":46:33)
#loc62 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":46:21)
#loc63 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":46:72)
#loc64 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":46:64)
#loc65 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":46:52)
#loc66 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":47:22)
#loc67 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":47:33)
#loc68 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":47:47)
#loc69 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":47:58)
#loc70 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":47:39)
#loc71 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":48:21)
#loc72 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":48:4)
#loc74 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":40:16)
#loc75 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":40:22)
#loc76 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":40:28)
#loc77 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":40:11)
#loc78 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":40:4)
#loc79 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":117:0)
#loc80 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":126:31)
#loc81 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":126:11)
#loc82 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":126:4)
