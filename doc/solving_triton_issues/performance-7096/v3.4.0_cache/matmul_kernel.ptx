//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_89
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u32 matmul_kernel_param_8,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_9
)
.reqntid 128
{
	.reg .pred 	%p<61>;
	.reg .b32 	%r<1721>;
	.reg .b64 	%rd<140>;
	.loc	1 10 0                          // test.py:10:0
$L__func_begin0:
	.loc	1 10 0                          // test.py:10:0

// %bb.0:
	ld.param.b32 	%r247, [matmul_kernel_param_8];
	ld.param.b32 	%r246, [matmul_kernel_param_5];
	ld.param.b32 	%r245, [matmul_kernel_param_4];
	ld.param.b32 	%r244, [matmul_kernel_param_3];
	ld.param.b64 	%rd40, [matmul_kernel_param_2];
	ld.param.b64 	%rd39, [matmul_kernel_param_1];
	ld.param.b64 	%rd38, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 19 24                         // test.py:19:24
	mov.u32 	%r320, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ test.py:20:27 ]
	add.s32 	%r321, %r244, 63;
	.loc	2 40 28                         // standard.py:40:28 @[ test.py:20:27 ]
	shr.s32 	%r322, %r321, 31;
	shr.u32 	%r323, %r322, 26;
	add.s32 	%r324, %r321, %r323;
	shr.s32 	%r325, %r324, 6;
$L__tmp2:
	.loc	2 40 22                         // standard.py:40:22 @[ test.py:21:27 ]
	add.s32 	%r326, %r245, 127;
	.loc	2 40 28                         // standard.py:40:28 @[ test.py:21:27 ]
	shr.s32 	%r327, %r326, 31;
	shr.u32 	%r328, %r327, 25;
	add.s32 	%r329, %r326, %r328;
	shr.s32 	%r330, %r329, 7;
$L__tmp3:
	.loc	1 22 38                         // test.py:22:38
	shl.b32 	%r332, %r330, 3;
	ld.param.b32 	%r333, [matmul_kernel_param_6];
	ld.param.b32 	%r334, [matmul_kernel_param_7];
	.loc	1 23 22                         // test.py:23:22
	div.s32 	%r335, %r320, %r332;
	.loc	1 24 29                         // test.py:24:29
	shl.b32 	%r336, %r335, 3;
	.loc	1 25 35                         // test.py:25:35
	sub.s32 	%r337, %r325, %r336;
	.loc	1 25 48                         // test.py:25:48
	min.s32 	%r339, %r337, 8;
	.loc	1 26 34                         // test.py:26:34
	mul.lo.s32 	%r340, %r335, %r332;
	sub.s32 	%r341, %r320, %r340;
	.loc	1 27 40                         // test.py:27:40
	div.s32 	%r342, %r341, %r339;
	.loc	1 26 54                         // test.py:26:54
	mul.lo.s32 	%r343, %r342, %r339;
	sub.s32 	%r344, %r341, %r343;
	.loc	1 26 27                         // test.py:26:27
	add.s32 	%r345, %r344, %r336;
	.loc	1 29 23                         // test.py:29:23
	shl.b32 	%r1, %r345, 6;
	.loc	1 29 51                         // test.py:29:51
	mov.u32 	%r2, %tid.x;
	and.b32 	%r3, %r2, 16;
	bfe.u32 	%r346, %r2, 3, 4;
	shr.u32 	%r347, %r2, 4;
	bfe.u32 	%r4, %r2, 4, 3;
	or.b32 	%r5, %r4, 8;
	or.b32 	%r6, %r4, 16;
	or.b32 	%r7, %r4, 24;
	or.b32 	%r8, %r4, 32;
	or.b32 	%r9, %r4, 40;
	or.b32 	%r10, %r4, 48;
	or.b32 	%r11, %r347, 56;
	.loc	1 29 38                         // test.py:29:38
	or.b32 	%r348, %r1, %r346;
	or.b32 	%r349, %r348, 16;
	or.b32 	%r350, %r348, 32;
	or.b32 	%r351, %r348, 48;
	.loc	1 29 68                         // test.py:29:68
	rem.s32 	%r352, %r348, %r244;
	rem.s32 	%r353, %r349, %r244;
	rem.s32 	%r354, %r350, %r244;
	rem.s32 	%r355, %r351, %r244;
	.loc	1 30 23                         // test.py:30:23
	shl.b32 	%r356, %r342, 7;
	.loc	1 30 51                         // test.py:30:51
	shl.b32 	%r12, %r2, 3;
	and.b32 	%r13, %r12, 56;
	and.b32 	%r357, %r12, 120;
	.loc	1 30 38                         // test.py:30:38
	or.b32 	%r14, %r356, %r357;
	.loc	1 30 68                         // test.py:30:68
	rem.s32 	%r358, %r14, %r245;
	.loc	1 32 53                         // test.py:32:53
	mad.lo.s32 	%r359, %r352, %r333, %r13;
	mad.lo.s32 	%r360, %r353, %r333, %r13;
	mad.lo.s32 	%r361, %r354, %r333, %r13;
	mad.lo.s32 	%r362, %r355, %r333, %r13;
	.loc	1 32 22                         // test.py:32:22
	mul.wide.s32 	%rd77, %r359, 2;
	add.s64 	%rd41, %rd38, %rd77;
	mul.wide.s32 	%rd78, %r360, 2;
	add.s64 	%rd42, %rd38, %rd78;
	mul.wide.s32 	%rd79, %r361, 2;
	add.s64 	%rd43, %rd38, %rd79;
	mul.wide.s32 	%rd80, %r362, 2;
	add.s64 	%rd44, %rd38, %rd80;
	.loc	1 33 40                         // test.py:33:40
	shl.b32 	%r363, %r334, 3;
	.loc	1 33 52                         // test.py:33:52
	mad.lo.s32 	%r364, %r334, %r4, %r358;
	add.s32 	%r365, %r364, %r363;
	add.s32 	%r366, %r365, %r363;
	add.s32 	%r367, %r366, %r363;
	add.s32 	%r368, %r367, %r363;
	add.s32 	%r369, %r368, %r363;
	add.s32 	%r370, %r369, %r363;
	mad.lo.s32 	%r371, %r334, %r11, %r358;
	.loc	1 33 22                         // test.py:33:22
	mul.wide.s32 	%rd81, %r364, 2;
	add.s64 	%rd45, %rd39, %rd81;
	mul.wide.s32 	%rd82, %r365, 2;
	add.s64 	%rd46, %rd39, %rd82;
	mul.wide.s32 	%rd83, %r366, 2;
	add.s64 	%rd47, %rd39, %rd83;
	mul.wide.s32 	%rd84, %r367, 2;
	add.s64 	%rd48, %rd39, %rd84;
	mul.wide.s32 	%rd85, %r368, 2;
	add.s64 	%rd49, %rd39, %rd85;
	mul.wide.s32 	%rd86, %r369, 2;
	add.s64 	%rd50, %rd39, %rd86;
	mul.wide.s32 	%rd87, %r370, 2;
	add.s64 	%rd51, %rd39, %rd87;
	mul.wide.s32 	%rd88, %r371, 2;
	add.s64 	%rd52, %rd39, %rd88;
$L__tmp4:
	.loc	2 40 22                         // standard.py:40:22 @[ test.py:36:33 ]
	add.s32 	%r372, %r246, 63;
$L__tmp5:
	.loc	1 41 33                         // test.py:41:33
	shl.b32 	%r376, %r334, 6;
	.loc	1 36 22                         // test.py:36:22
	setp.gt.s32 	%p1, %r372, 63;
	.loc	1 37 51                         // test.py:37:51
	setp.lt.s32 	%p2, %r13, %r246;
	.loc	1 37 20                         // test.py:37:20
	xor.b32 	%r377, %r12, %r2;
	and.b32 	%r378, %r377, 56;
	shl.b32 	%r379, %r346, 6;
	or.b32 	%r16, %r378, %r379;
	shl.b32 	%r380, %r16, 1;
	mov.b32 	%r381, global_smem;
	add.s32 	%r382, %r381, %r380;
	add.s32 	%r248, %r382, 49152;
	add.s32 	%r250, %r382, 51200;
	add.s32 	%r252, %r382, 53248;
	add.s32 	%r254, %r382, 55296;
	selp.b32 	%r383, 16, 0, %p1;
	selp.b32 	%r251, %r383, 0, %p2;
	// begin inline asm
	cp.async.cg.shared.global [ %r248 + 0 ], [ %rd41 + 0 ], 0x10, %r251;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r250 + 0 ], [ %rd42 + 0 ], 0x10, %r251;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r252 + 0 ], [ %rd43 + 0 ], 0x10, %r251;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r254 + 0 ], [ %rd44 + 0 ], 0x10, %r251;
	// end inline asm
	cp.async.commit_group;
	.loc	1 38 51                         // test.py:38:51
	setp.lt.s32 	%p3, %r4, %r246;
	setp.lt.s32 	%p4, %r5, %r246;
	setp.lt.s32 	%p5, %r6, %r246;
	setp.lt.s32 	%p6, %r7, %r246;
	setp.lt.s32 	%p7, %r8, %r246;
	setp.lt.s32 	%p8, %r9, %r246;
	setp.lt.s32 	%p9, %r10, %r246;
	setp.lt.s32 	%p10, %r11, %r246;
	.loc	1 38 20                         // test.py:38:20
	shr.u32 	%r384, %r2, 1;
	and.b32 	%r17, %r384, 56;
	xor.b32 	%r385, %r17, %r357;
	shl.b32 	%r386, %r4, 7;
	or.b32 	%r18, %r386, %r385;
	shl.b32 	%r387, %r18, 1;
	add.s32 	%r256, %r381, %r387;
	add.s32 	%r258, %r256, 2048;
	add.s32 	%r260, %r256, 4096;
	add.s32 	%r262, %r256, 6144;
	add.s32 	%r264, %r256, 8192;
	add.s32 	%r266, %r256, 10240;
	add.s32 	%r268, %r256, 12288;
	add.s32 	%r270, %r256, 14336;
	selp.b32 	%r257, %r383, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r256 + 0 ], [ %rd45 + 0 ], 0x10, %r257;
	// end inline asm
	selp.b32 	%r259, %r383, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r258 + 0 ], [ %rd46 + 0 ], 0x10, %r259;
	// end inline asm
	selp.b32 	%r261, %r383, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r260 + 0 ], [ %rd47 + 0 ], 0x10, %r261;
	// end inline asm
	selp.b32 	%r263, %r383, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r262 + 0 ], [ %rd48 + 0 ], 0x10, %r263;
	// end inline asm
	selp.b32 	%r265, %r383, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r264 + 0 ], [ %rd49 + 0 ], 0x10, %r265;
	// end inline asm
	selp.b32 	%r267, %r383, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r266 + 0 ], [ %rd50 + 0 ], 0x10, %r267;
	// end inline asm
	selp.b32 	%r269, %r383, 0, %p9;
	// begin inline asm
	cp.async.cg.shared.global [ %r268 + 0 ], [ %rd51 + 0 ], 0x10, %r269;
	// end inline asm
	selp.b32 	%r271, %r383, 0, %p10;
	// begin inline asm
	cp.async.cg.shared.global [ %r270 + 0 ], [ %rd52 + 0 ], 0x10, %r271;
	// end inline asm
	cp.async.commit_group;
	.loc	1 36 22                         // test.py:36:22
	setp.gt.s32 	%p11, %r372, 127;
	.loc	1 40 18                         // test.py:40:18
	add.s64 	%rd53, %rd41, 128;
	add.s64 	%rd54, %rd42, 128;
	add.s64 	%rd55, %rd43, 128;
	add.s64 	%rd56, %rd44, 128;
	.loc	1 41 18                         // test.py:41:18
	mul.wide.s32 	%rd89, %r376, 2;
	add.s64 	%rd57, %rd45, %rd89;
	add.s64 	%rd58, %rd46, %rd89;
	add.s64 	%rd59, %rd47, %rd89;
	add.s64 	%rd60, %rd48, %rd89;
	add.s64 	%rd61, %rd49, %rd89;
	add.s64 	%rd62, %rd50, %rd89;
	add.s64 	%rd63, %rd51, %rd89;
	add.s64 	%rd64, %rd52, %rd89;
	.loc	1 37 55                         // test.py:37:55
	add.s32 	%r388, %r246, -64;
	.loc	1 37 51                         // test.py:37:51
	setp.lt.s32 	%p12, %r13, %r388;
	.loc	1 37 20                         // test.py:37:20
	bar.sync 	0;
	add.s32 	%r272, %r382, 57344;
	add.s32 	%r274, %r382, 59392;
	add.s32 	%r276, %r382, 61440;
	add.s32 	%r278, %r382, 63488;
	selp.b32 	%r389, 16, 0, %p12;
	selp.b32 	%r275, %r389, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r272 + 0 ], [ %rd53 + 0 ], 0x10, %r275;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r274 + 0 ], [ %rd54 + 0 ], 0x10, %r275;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r276 + 0 ], [ %rd55 + 0 ], 0x10, %r275;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r278 + 0 ], [ %rd56 + 0 ], 0x10, %r275;
	// end inline asm
	cp.async.commit_group;
	.loc	1 38 51                         // test.py:38:51
	setp.lt.s32 	%p13, %r4, %r388;
	setp.lt.s32 	%p14, %r5, %r388;
	setp.lt.s32 	%p15, %r6, %r388;
	setp.lt.s32 	%p16, %r7, %r388;
	setp.lt.s32 	%p17, %r8, %r388;
	setp.lt.s32 	%p18, %r9, %r388;
	setp.lt.s32 	%p19, %r10, %r388;
	setp.lt.s32 	%p20, %r11, %r388;
	.loc	1 38 20                         // test.py:38:20
	add.s32 	%r280, %r256, 16384;
	add.s32 	%r282, %r256, 18432;
	add.s32 	%r284, %r256, 20480;
	add.s32 	%r286, %r256, 22528;
	add.s32 	%r288, %r256, 24576;
	add.s32 	%r290, %r256, 26624;
	add.s32 	%r292, %r256, 28672;
	add.s32 	%r294, %r256, 30720;
	selp.b32 	%r390, 16, 0, %p13;
	selp.b32 	%r281, %r390, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r280 + 0 ], [ %rd57 + 0 ], 0x10, %r281;
	// end inline asm
	selp.b32 	%r391, 16, 0, %p14;
	selp.b32 	%r283, %r391, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r282 + 0 ], [ %rd58 + 0 ], 0x10, %r283;
	// end inline asm
	selp.b32 	%r392, 16, 0, %p15;
	selp.b32 	%r285, %r392, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r284 + 0 ], [ %rd59 + 0 ], 0x10, %r285;
	// end inline asm
	selp.b32 	%r393, 16, 0, %p16;
	selp.b32 	%r287, %r393, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r286 + 0 ], [ %rd60 + 0 ], 0x10, %r287;
	// end inline asm
	selp.b32 	%r394, 16, 0, %p17;
	selp.b32 	%r289, %r394, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r288 + 0 ], [ %rd61 + 0 ], 0x10, %r289;
	// end inline asm
	selp.b32 	%r395, 16, 0, %p18;
	selp.b32 	%r291, %r395, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r290 + 0 ], [ %rd62 + 0 ], 0x10, %r291;
	// end inline asm
	selp.b32 	%r396, 16, 0, %p19;
	selp.b32 	%r293, %r396, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r292 + 0 ], [ %rd63 + 0 ], 0x10, %r293;
	// end inline asm
	selp.b32 	%r397, 16, 0, %p20;
	selp.b32 	%r295, %r397, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r294 + 0 ], [ %rd64 + 0 ], 0x10, %r295;
	// end inline asm
	cp.async.commit_group;
	.loc	1 36 22                         // test.py:36:22
	setp.gt.s32 	%p21, %r372, 191;
	.loc	1 40 18                         // test.py:40:18
	add.s64 	%rd65, %rd41, 256;
	add.s64 	%rd66, %rd42, 256;
	add.s64 	%rd67, %rd43, 256;
	add.s64 	%rd68, %rd44, 256;
	.loc	1 41 18                         // test.py:41:18
	add.s64 	%rd69, %rd57, %rd89;
	add.s64 	%rd70, %rd58, %rd89;
	add.s64 	%rd71, %rd59, %rd89;
	add.s64 	%rd72, %rd60, %rd89;
	add.s64 	%rd73, %rd61, %rd89;
	add.s64 	%rd74, %rd62, %rd89;
	add.s64 	%rd75, %rd63, %rd89;
	add.s64 	%rd76, %rd64, %rd89;
	.loc	1 37 55                         // test.py:37:55
	add.s32 	%r398, %r246, -128;
	.loc	1 37 51                         // test.py:37:51
	setp.lt.s32 	%p22, %r13, %r398;
	.loc	1 37 20                         // test.py:37:20
	bar.sync 	0;
	add.s32 	%r296, %r382, 65536;
	add.s32 	%r298, %r382, 67584;
	add.s32 	%r300, %r382, 69632;
	add.s32 	%r302, %r382, 71680;
	selp.b32 	%r399, 16, 0, %p22;
	selp.b32 	%r299, %r399, 0, %p21;
	// begin inline asm
	cp.async.cg.shared.global [ %r296 + 0 ], [ %rd65 + 0 ], 0x10, %r299;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r298 + 0 ], [ %rd66 + 0 ], 0x10, %r299;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r300 + 0 ], [ %rd67 + 0 ], 0x10, %r299;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r302 + 0 ], [ %rd68 + 0 ], 0x10, %r299;
	// end inline asm
	cp.async.commit_group;
	.loc	1 38 51                         // test.py:38:51
	setp.lt.s32 	%p23, %r4, %r398;
	setp.lt.s32 	%p24, %r5, %r398;
	setp.lt.s32 	%p25, %r6, %r398;
	setp.lt.s32 	%p26, %r7, %r398;
	setp.lt.s32 	%p27, %r8, %r398;
	setp.lt.s32 	%p28, %r9, %r398;
	setp.lt.s32 	%p29, %r10, %r398;
	setp.lt.s32 	%p30, %r11, %r398;
	.loc	1 38 20                         // test.py:38:20
	add.s32 	%r304, %r256, 32768;
	add.s32 	%r306, %r256, 34816;
	add.s32 	%r308, %r256, 36864;
	add.s32 	%r310, %r256, 38912;
	add.s32 	%r312, %r256, 40960;
	add.s32 	%r314, %r256, 43008;
	add.s32 	%r316, %r256, 45056;
	add.s32 	%r318, %r256, 47104;
	selp.b32 	%r400, 16, 0, %p23;
	selp.b32 	%r305, %r400, 0, %p21;
	// begin inline asm
	cp.async.cg.shared.global [ %r304 + 0 ], [ %rd69 + 0 ], 0x10, %r305;
	// end inline asm
	selp.b32 	%r401, 16, 0, %p24;
	selp.b32 	%r307, %r401, 0, %p21;
	// begin inline asm
	cp.async.cg.shared.global [ %r306 + 0 ], [ %rd70 + 0 ], 0x10, %r307;
	// end inline asm
	selp.b32 	%r402, 16, 0, %p25;
	selp.b32 	%r309, %r402, 0, %p21;
	// begin inline asm
	cp.async.cg.shared.global [ %r308 + 0 ], [ %rd71 + 0 ], 0x10, %r309;
	// end inline asm
	selp.b32 	%r403, 16, 0, %p26;
	selp.b32 	%r311, %r403, 0, %p21;
	// begin inline asm
	cp.async.cg.shared.global [ %r310 + 0 ], [ %rd72 + 0 ], 0x10, %r311;
	// end inline asm
	selp.b32 	%r404, 16, 0, %p27;
	selp.b32 	%r313, %r404, 0, %p21;
	// begin inline asm
	cp.async.cg.shared.global [ %r312 + 0 ], [ %rd73 + 0 ], 0x10, %r313;
	// end inline asm
	selp.b32 	%r405, 16, 0, %p28;
	selp.b32 	%r315, %r405, 0, %p21;
	// begin inline asm
	cp.async.cg.shared.global [ %r314 + 0 ], [ %rd74 + 0 ], 0x10, %r315;
	// end inline asm
	selp.b32 	%r406, 16, 0, %p29;
	selp.b32 	%r317, %r406, 0, %p21;
	// begin inline asm
	cp.async.cg.shared.global [ %r316 + 0 ], [ %rd75 + 0 ], 0x10, %r317;
	// end inline asm
	selp.b32 	%r407, 16, 0, %p30;
	selp.b32 	%r319, %r407, 0, %p21;
	// begin inline asm
	cp.async.cg.shared.global [ %r318 + 0 ], [ %rd76 + 0 ], 0x10, %r319;
	// end inline asm
	cp.async.commit_group;
	.loc	1 36 22                         // test.py:36:22
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %.lr.ph
	.loc	1 0 0                           // test.py:0
	cvt.s64.s32 	%rd1, %r359;
	cvt.s64.s32 	%rd2, %r360;
	cvt.s64.s32 	%rd3, %r361;
	cvt.s64.s32 	%rd4, %r362;
	cvt.s64.s32 	%rd5, %r364;
	cvt.s64.s32 	%rd6, %r365;
	cvt.s64.s32 	%rd7, %r366;
	cvt.s64.s32 	%rd8, %r367;
	cvt.s64.s32 	%rd9, %r368;
	cvt.s64.s32 	%rd10, %r369;
	cvt.s64.s32 	%rd11, %r370;
	cvt.s64.s32 	%rd12, %r371;
	shr.s32 	%r373, %r372, 31;
	shr.u32 	%r374, %r373, 26;
	add.s32 	%r375, %r372, %r374;
	shr.s32 	%r15, %r375, 6;
	cvt.s64.s32 	%rd13, %r376;
	.loc	1 38 20                         // test.py:38:20
	shr.u32 	%r445, %r3, 1;
	.loc	1 30 51                         // test.py:30:51
	bfe.s32 	%r446, %r2, 2, 1;
	add.s32 	%r20, %r15, -3;
	and.b32 	%r447, %r2, 3;
	mul.lo.s32 	%r448, %r447, 72;
	and.b32 	%r449, %r446, 288;
	xor.b32 	%r450, %r449, %r448;
	shl.b32 	%r451, %r2, 6;
	and.b32 	%r452, %r451, 512;
	or.b32 	%r453, %r450, %r452;
	xor.b32 	%r21, %r453, %r445;
	xor.b32 	%r22, %r21, 16;
	xor.b32 	%r23, %r21, 32;
	xor.b32 	%r24, %r21, 48;
	xor.b32 	%r25, %r21, 1040;
	xor.b32 	%r26, %r21, 1056;
	xor.b32 	%r27, %r21, 1072;
	xor.b32 	%r28, %r21, 2064;
	xor.b32 	%r29, %r21, 2080;
	xor.b32 	%r30, %r21, 2096;
	xor.b32 	%r31, %r21, 3088;
	xor.b32 	%r32, %r21, 3104;
	xor.b32 	%r33, %r21, 3120;
	mul.lo.s32 	%r454, %r447, 136;
	and.b32 	%r455, %r446, 544;
	xor.b32 	%r456, %r455, %r454;
	shl.b32 	%r457, %r2, 7;
	and.b32 	%r458, %r457, 3072;
	or.b32 	%r459, %r456, %r458;
	shr.u32 	%r460, %r2, 2;
	and.b32 	%r1688, %r460, 24;
	xor.b32 	%r35, %r459, %r1688;
	xor.b32 	%r36, %r35, 32;
	xor.b32 	%r37, %r35, 4128;
	xor.b32 	%r38, %r35, 64;
	xor.b32 	%r39, %r35, 4160;
	xor.b32 	%r40, %r35, 96;
	xor.b32 	%r41, %r35, 4192;
	add.s32 	%r1620, %r246, -192;
	.loc	1 36 22                         // test.py:36:22
	shl.b64 	%rd14, %rd12, 1;
	mad.lo.s64 	%rd139, %rd13, 6, %rd39;
	shl.b64 	%rd16, %rd13, 1;
	shl.b64 	%rd17, %rd11, 1;
	shl.b64 	%rd18, %rd10, 1;
	shl.b64 	%rd19, %rd9, 1;
	shl.b64 	%rd20, %rd8, 1;
	shl.b64 	%rd21, %rd7, 1;
	shl.b64 	%rd22, %rd6, 1;
	shl.b64 	%rd23, %rd5, 1;
	shl.b64 	%rd90, %rd4, 1;
	add.s64 	%rd91, %rd90, %rd38;
	add.s64 	%rd138, %rd91, 384;
	shl.b64 	%rd92, %rd3, 1;
	add.s64 	%rd93, %rd92, %rd38;
	add.s64 	%rd137, %rd93, 384;
	shl.b64 	%rd94, %rd2, 1;
	add.s64 	%rd95, %rd94, %rd38;
	add.s64 	%rd136, %rd95, 384;
	shl.b64 	%rd96, %rd1, 1;
	add.s64 	%rd97, %rd96, %rd38;
	add.s64 	%rd135, %rd97, 384;
	mov.b32 	%r1687, 0;
	mov.b32 	%r1623, 0f00000000;
	mov.b32 	%r1622, 2;
	mov.b32 	%r1621, -1;
	shl.b32 	%r1507, %r22, 1;
	shl.b32 	%r1508, %r23, 1;
	shl.b32 	%r1509, %r24, 1;
	shl.b32 	%r1510, %r25, 1;
	shl.b32 	%r1511, %r26, 1;
	shl.b32 	%r1512, %r27, 1;
	shl.b32 	%r1513, %r28, 1;
	shl.b32 	%r1514, %r29, 1;
	shl.b32 	%r1515, %r30, 1;
	shl.b32 	%r1516, %r31, 1;
	shl.b32 	%r1517, %r32, 1;
	shl.b32 	%r1518, %r33, 1;
	shl.b32 	%r1522, %r36, 1;
	shl.b32 	%r1523, %r37, 1;
	shl.b32 	%r1524, %r38, 1;
	shl.b32 	%r1525, %r39, 1;
	shl.b32 	%r1526, %r40, 1;
	shl.b32 	%r1527, %r41, 1;
	mov.b32 	%r1624, %r1623;
	mov.b32 	%r1625, %r1623;
	mov.b32 	%r1626, %r1623;
	mov.b32 	%r1627, %r1623;
	mov.b32 	%r1628, %r1623;
	mov.b32 	%r1629, %r1623;
	mov.b32 	%r1630, %r1623;
	mov.b32 	%r1631, %r1623;
	mov.b32 	%r1632, %r1623;
	mov.b32 	%r1633, %r1623;
	mov.b32 	%r1634, %r1623;
	mov.b32 	%r1635, %r1623;
	mov.b32 	%r1636, %r1623;
	mov.b32 	%r1637, %r1623;
	mov.b32 	%r1638, %r1623;
	mov.b32 	%r1639, %r1623;
	mov.b32 	%r1640, %r1623;
	mov.b32 	%r1641, %r1623;
	mov.b32 	%r1642, %r1623;
	mov.b32 	%r1643, %r1623;
	mov.b32 	%r1644, %r1623;
	mov.b32 	%r1645, %r1623;
	mov.b32 	%r1646, %r1623;
	mov.b32 	%r1647, %r1623;
	mov.b32 	%r1648, %r1623;
	mov.b32 	%r1649, %r1623;
	mov.b32 	%r1650, %r1623;
	mov.b32 	%r1651, %r1623;
	mov.b32 	%r1652, %r1623;
	mov.b32 	%r1653, %r1623;
	mov.b32 	%r1654, %r1623;
	mov.b32 	%r1655, %r1623;
	mov.b32 	%r1656, %r1623;
	mov.b32 	%r1657, %r1623;
	mov.b32 	%r1658, %r1623;
	mov.b32 	%r1659, %r1623;
	mov.b32 	%r1660, %r1623;
	mov.b32 	%r1661, %r1623;
	mov.b32 	%r1662, %r1623;
	mov.b32 	%r1663, %r1623;
	mov.b32 	%r1664, %r1623;
	mov.b32 	%r1665, %r1623;
	mov.b32 	%r1666, %r1623;
	mov.b32 	%r1667, %r1623;
	mov.b32 	%r1668, %r1623;
	mov.b32 	%r1669, %r1623;
	mov.b32 	%r1670, %r1623;
	mov.b32 	%r1671, %r1623;
	mov.b32 	%r1672, %r1623;
	mov.b32 	%r1673, %r1623;
	mov.b32 	%r1674, %r1623;
	mov.b32 	%r1675, %r1623;
	mov.b32 	%r1676, %r1623;
	mov.b32 	%r1677, %r1623;
	mov.b32 	%r1678, %r1623;
	mov.b32 	%r1679, %r1623;
	mov.b32 	%r1680, %r1623;
	mov.b32 	%r1681, %r1623;
	mov.b32 	%r1682, %r1623;
	mov.b32 	%r1683, %r1623;
	mov.b32 	%r1684, %r1623;
	mov.b32 	%r1685, %r1623;
	mov.b32 	%r1686, %r1623;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p31, %r1687, %r20;
	add.s32 	%r1501, %r1621, 1;
	setp.gt.s32 	%p32, %r1501, 2;
	selp.b32 	%r1621, 0, %r1501, %p32;
	.loc	1 37 20                         // test.py:37:20
	cp.async.wait_group 	4;
	bar.sync 	0;
	shl.b32 	%r1502, %r1621, 13;
	add.s32 	%r1504, %r381, 49152;
	add.s32 	%r1505, %r1504, %r1502;
	shl.b32 	%r1506, %r21, 1;
	add.s32 	%r465, %r1505, %r1506;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r589, %r590, %r591, %r592}, [%r465];
	// end inline asm
	add.s32 	%r470, %r1505, %r1507;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r813, %r814, %r815, %r816}, [%r470];
	// end inline asm
	add.s32 	%r475, %r1505, %r1508;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1037, %r1038, %r1039, %r1040}, [%r475];
	// end inline asm
	add.s32 	%r480, %r1505, %r1509;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1261, %r1262, %r1263, %r1264}, [%r480];
	// end inline asm
	add.s32 	%r485, %r465, 2048;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r645, %r646, %r647, %r648}, [%r485];
	// end inline asm
	add.s32 	%r490, %r1505, %r1510;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r869, %r870, %r871, %r872}, [%r490];
	// end inline asm
	add.s32 	%r495, %r1505, %r1511;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1093, %r1094, %r1095, %r1096}, [%r495];
	// end inline asm
	add.s32 	%r500, %r1505, %r1512;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1317, %r1318, %r1319, %r1320}, [%r500];
	// end inline asm
	add.s32 	%r505, %r465, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r701, %r702, %r703, %r704}, [%r505];
	// end inline asm
	add.s32 	%r510, %r1505, %r1513;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r925, %r926, %r927, %r928}, [%r510];
	// end inline asm
	add.s32 	%r515, %r1505, %r1514;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1149, %r1150, %r1151, %r1152}, [%r515];
	// end inline asm
	add.s32 	%r520, %r1505, %r1515;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1373, %r1374, %r1375, %r1376}, [%r520];
	// end inline asm
	add.s32 	%r525, %r465, 6144;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r757, %r758, %r759, %r760}, [%r525];
	// end inline asm
	add.s32 	%r530, %r1505, %r1516;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r981, %r982, %r983, %r984}, [%r530];
	// end inline asm
	add.s32 	%r535, %r1505, %r1517;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1205, %r1206, %r1207, %r1208}, [%r535];
	// end inline asm
	add.s32 	%r540, %r1505, %r1518;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1429, %r1430, %r1431, %r1432}, [%r540];
	// end inline asm
	.loc	1 38 20                         // test.py:38:20
	shl.b32 	%r1519, %r1621, 14;
	add.s32 	%r1520, %r381, %r1519;
	shl.b32 	%r1521, %r35, 1;
	add.s32 	%r545, %r1520, %r1521;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r593, %r594, %r817, %r818}, [%r545];
	// end inline asm
	add.s32 	%r550, %r545, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r1041, %r1042, %r1265, %r1266}, [%r550];
	// end inline asm
	add.s32 	%r555, %r1520, %r1522;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r607, %r608, %r831, %r832}, [%r555];
	// end inline asm
	add.s32 	%r560, %r1520, %r1523;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r1055, %r1056, %r1279, %r1280}, [%r560];
	// end inline asm
	add.s32 	%r565, %r1520, %r1524;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r621, %r622, %r845, %r846}, [%r565];
	// end inline asm
	add.s32 	%r570, %r1520, %r1525;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r1069, %r1070, %r1293, %r1294}, [%r570];
	// end inline asm
	add.s32 	%r575, %r1520, %r1526;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r635, %r636, %r859, %r860}, [%r575];
	// end inline asm
	add.s32 	%r580, %r1520, %r1527;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r1083, %r1084, %r1307, %r1308}, [%r580];
	// end inline asm
	.loc	1 39 35                         // test.py:39:35
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1623, %r1624, %r1625, %r1626 }, { %r589, %r590, %r591, %r592 }, { %r593, %r594 }, { %r1623, %r1624, %r1625, %r1626 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1627, %r1628, %r1629, %r1630 }, { %r589, %r590, %r591, %r592 }, { %r607, %r608 }, { %r1627, %r1628, %r1629, %r1630 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1631, %r1632, %r1633, %r1634 }, { %r589, %r590, %r591, %r592 }, { %r621, %r622 }, { %r1631, %r1632, %r1633, %r1634 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1635, %r1636, %r1637, %r1638 }, { %r589, %r590, %r591, %r592 }, { %r635, %r636 }, { %r1635, %r1636, %r1637, %r1638 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1639, %r1640, %r1641, %r1642 }, { %r645, %r646, %r647, %r648 }, { %r593, %r594 }, { %r1639, %r1640, %r1641, %r1642 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1643, %r1644, %r1645, %r1646 }, { %r645, %r646, %r647, %r648 }, { %r607, %r608 }, { %r1643, %r1644, %r1645, %r1646 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1647, %r1648, %r1649, %r1650 }, { %r645, %r646, %r647, %r648 }, { %r621, %r622 }, { %r1647, %r1648, %r1649, %r1650 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1651, %r1652, %r1653, %r1654 }, { %r645, %r646, %r647, %r648 }, { %r635, %r636 }, { %r1651, %r1652, %r1653, %r1654 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1655, %r1656, %r1657, %r1658 }, { %r701, %r702, %r703, %r704 }, { %r593, %r594 }, { %r1655, %r1656, %r1657, %r1658 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1659, %r1660, %r1661, %r1662 }, { %r701, %r702, %r703, %r704 }, { %r607, %r608 }, { %r1659, %r1660, %r1661, %r1662 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1663, %r1664, %r1665, %r1666 }, { %r701, %r702, %r703, %r704 }, { %r621, %r622 }, { %r1663, %r1664, %r1665, %r1666 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1667, %r1668, %r1669, %r1670 }, { %r701, %r702, %r703, %r704 }, { %r635, %r636 }, { %r1667, %r1668, %r1669, %r1670 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1671, %r1672, %r1673, %r1674 }, { %r757, %r758, %r759, %r760 }, { %r593, %r594 }, { %r1671, %r1672, %r1673, %r1674 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1675, %r1676, %r1677, %r1678 }, { %r757, %r758, %r759, %r760 }, { %r607, %r608 }, { %r1675, %r1676, %r1677, %r1678 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1679, %r1680, %r1681, %r1682 }, { %r757, %r758, %r759, %r760 }, { %r621, %r622 }, { %r1679, %r1680, %r1681, %r1682 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1683, %r1684, %r1685, %r1686 }, { %r757, %r758, %r759, %r760 }, { %r635, %r636 }, { %r1683, %r1684, %r1685, %r1686 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1623, %r1624, %r1625, %r1626 }, { %r813, %r814, %r815, %r816 }, { %r817, %r818 }, { %r1623, %r1624, %r1625, %r1626 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1627, %r1628, %r1629, %r1630 }, { %r813, %r814, %r815, %r816 }, { %r831, %r832 }, { %r1627, %r1628, %r1629, %r1630 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1631, %r1632, %r1633, %r1634 }, { %r813, %r814, %r815, %r816 }, { %r845, %r846 }, { %r1631, %r1632, %r1633, %r1634 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1635, %r1636, %r1637, %r1638 }, { %r813, %r814, %r815, %r816 }, { %r859, %r860 }, { %r1635, %r1636, %r1637, %r1638 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1639, %r1640, %r1641, %r1642 }, { %r869, %r870, %r871, %r872 }, { %r817, %r818 }, { %r1639, %r1640, %r1641, %r1642 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1643, %r1644, %r1645, %r1646 }, { %r869, %r870, %r871, %r872 }, { %r831, %r832 }, { %r1643, %r1644, %r1645, %r1646 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1647, %r1648, %r1649, %r1650 }, { %r869, %r870, %r871, %r872 }, { %r845, %r846 }, { %r1647, %r1648, %r1649, %r1650 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1651, %r1652, %r1653, %r1654 }, { %r869, %r870, %r871, %r872 }, { %r859, %r860 }, { %r1651, %r1652, %r1653, %r1654 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1655, %r1656, %r1657, %r1658 }, { %r925, %r926, %r927, %r928 }, { %r817, %r818 }, { %r1655, %r1656, %r1657, %r1658 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1659, %r1660, %r1661, %r1662 }, { %r925, %r926, %r927, %r928 }, { %r831, %r832 }, { %r1659, %r1660, %r1661, %r1662 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1663, %r1664, %r1665, %r1666 }, { %r925, %r926, %r927, %r928 }, { %r845, %r846 }, { %r1663, %r1664, %r1665, %r1666 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1667, %r1668, %r1669, %r1670 }, { %r925, %r926, %r927, %r928 }, { %r859, %r860 }, { %r1667, %r1668, %r1669, %r1670 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1671, %r1672, %r1673, %r1674 }, { %r981, %r982, %r983, %r984 }, { %r817, %r818 }, { %r1671, %r1672, %r1673, %r1674 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1675, %r1676, %r1677, %r1678 }, { %r981, %r982, %r983, %r984 }, { %r831, %r832 }, { %r1675, %r1676, %r1677, %r1678 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1679, %r1680, %r1681, %r1682 }, { %r981, %r982, %r983, %r984 }, { %r845, %r846 }, { %r1679, %r1680, %r1681, %r1682 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1683, %r1684, %r1685, %r1686 }, { %r981, %r982, %r983, %r984 }, { %r859, %r860 }, { %r1683, %r1684, %r1685, %r1686 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1623, %r1624, %r1625, %r1626 }, { %r1037, %r1038, %r1039, %r1040 }, { %r1041, %r1042 }, { %r1623, %r1624, %r1625, %r1626 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1627, %r1628, %r1629, %r1630 }, { %r1037, %r1038, %r1039, %r1040 }, { %r1055, %r1056 }, { %r1627, %r1628, %r1629, %r1630 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1631, %r1632, %r1633, %r1634 }, { %r1037, %r1038, %r1039, %r1040 }, { %r1069, %r1070 }, { %r1631, %r1632, %r1633, %r1634 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1635, %r1636, %r1637, %r1638 }, { %r1037, %r1038, %r1039, %r1040 }, { %r1083, %r1084 }, { %r1635, %r1636, %r1637, %r1638 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1639, %r1640, %r1641, %r1642 }, { %r1093, %r1094, %r1095, %r1096 }, { %r1041, %r1042 }, { %r1639, %r1640, %r1641, %r1642 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1643, %r1644, %r1645, %r1646 }, { %r1093, %r1094, %r1095, %r1096 }, { %r1055, %r1056 }, { %r1643, %r1644, %r1645, %r1646 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1647, %r1648, %r1649, %r1650 }, { %r1093, %r1094, %r1095, %r1096 }, { %r1069, %r1070 }, { %r1647, %r1648, %r1649, %r1650 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1651, %r1652, %r1653, %r1654 }, { %r1093, %r1094, %r1095, %r1096 }, { %r1083, %r1084 }, { %r1651, %r1652, %r1653, %r1654 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1655, %r1656, %r1657, %r1658 }, { %r1149, %r1150, %r1151, %r1152 }, { %r1041, %r1042 }, { %r1655, %r1656, %r1657, %r1658 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1659, %r1660, %r1661, %r1662 }, { %r1149, %r1150, %r1151, %r1152 }, { %r1055, %r1056 }, { %r1659, %r1660, %r1661, %r1662 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1663, %r1664, %r1665, %r1666 }, { %r1149, %r1150, %r1151, %r1152 }, { %r1069, %r1070 }, { %r1663, %r1664, %r1665, %r1666 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1667, %r1668, %r1669, %r1670 }, { %r1149, %r1150, %r1151, %r1152 }, { %r1083, %r1084 }, { %r1667, %r1668, %r1669, %r1670 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1671, %r1672, %r1673, %r1674 }, { %r1205, %r1206, %r1207, %r1208 }, { %r1041, %r1042 }, { %r1671, %r1672, %r1673, %r1674 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1675, %r1676, %r1677, %r1678 }, { %r1205, %r1206, %r1207, %r1208 }, { %r1055, %r1056 }, { %r1675, %r1676, %r1677, %r1678 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1679, %r1680, %r1681, %r1682 }, { %r1205, %r1206, %r1207, %r1208 }, { %r1069, %r1070 }, { %r1679, %r1680, %r1681, %r1682 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1683, %r1684, %r1685, %r1686 }, { %r1205, %r1206, %r1207, %r1208 }, { %r1083, %r1084 }, { %r1683, %r1684, %r1685, %r1686 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1623, %r1624, %r1625, %r1626 }, { %r1261, %r1262, %r1263, %r1264 }, { %r1265, %r1266 }, { %r1623, %r1624, %r1625, %r1626 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1627, %r1628, %r1629, %r1630 }, { %r1261, %r1262, %r1263, %r1264 }, { %r1279, %r1280 }, { %r1627, %r1628, %r1629, %r1630 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1631, %r1632, %r1633, %r1634 }, { %r1261, %r1262, %r1263, %r1264 }, { %r1293, %r1294 }, { %r1631, %r1632, %r1633, %r1634 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1635, %r1636, %r1637, %r1638 }, { %r1261, %r1262, %r1263, %r1264 }, { %r1307, %r1308 }, { %r1635, %r1636, %r1637, %r1638 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1639, %r1640, %r1641, %r1642 }, { %r1317, %r1318, %r1319, %r1320 }, { %r1265, %r1266 }, { %r1639, %r1640, %r1641, %r1642 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1643, %r1644, %r1645, %r1646 }, { %r1317, %r1318, %r1319, %r1320 }, { %r1279, %r1280 }, { %r1643, %r1644, %r1645, %r1646 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1647, %r1648, %r1649, %r1650 }, { %r1317, %r1318, %r1319, %r1320 }, { %r1293, %r1294 }, { %r1647, %r1648, %r1649, %r1650 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1651, %r1652, %r1653, %r1654 }, { %r1317, %r1318, %r1319, %r1320 }, { %r1307, %r1308 }, { %r1651, %r1652, %r1653, %r1654 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1655, %r1656, %r1657, %r1658 }, { %r1373, %r1374, %r1375, %r1376 }, { %r1265, %r1266 }, { %r1655, %r1656, %r1657, %r1658 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1659, %r1660, %r1661, %r1662 }, { %r1373, %r1374, %r1375, %r1376 }, { %r1279, %r1280 }, { %r1659, %r1660, %r1661, %r1662 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1663, %r1664, %r1665, %r1666 }, { %r1373, %r1374, %r1375, %r1376 }, { %r1293, %r1294 }, { %r1663, %r1664, %r1665, %r1666 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1667, %r1668, %r1669, %r1670 }, { %r1373, %r1374, %r1375, %r1376 }, { %r1307, %r1308 }, { %r1667, %r1668, %r1669, %r1670 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1671, %r1672, %r1673, %r1674 }, { %r1429, %r1430, %r1431, %r1432 }, { %r1265, %r1266 }, { %r1671, %r1672, %r1673, %r1674 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1675, %r1676, %r1677, %r1678 }, { %r1429, %r1430, %r1431, %r1432 }, { %r1279, %r1280 }, { %r1675, %r1676, %r1677, %r1678 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1679, %r1680, %r1681, %r1682 }, { %r1429, %r1430, %r1431, %r1432 }, { %r1293, %r1294 }, { %r1679, %r1680, %r1681, %r1682 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r1683, %r1684, %r1685, %r1686 }, { %r1429, %r1430, %r1431, %r1432 }, { %r1307, %r1308 }, { %r1683, %r1684, %r1685, %r1686 };
	// end inline asm
	.loc	1 41 18                         // test.py:41:18
	add.s64 	%rd102, %rd139, %rd23;
	add.s64 	%rd103, %rd139, %rd22;
	add.s64 	%rd104, %rd139, %rd21;
	add.s64 	%rd105, %rd139, %rd20;
	add.s64 	%rd106, %rd139, %rd19;
	add.s64 	%rd107, %rd139, %rd18;
	add.s64 	%rd108, %rd139, %rd17;
	.loc	1 36 22                         // test.py:36:22
	add.s64 	%rd109, %rd139, %rd14;
	add.s32 	%r1528, %r1622, 1;
	setp.gt.s32 	%p33, %r1528, 2;
	selp.b32 	%r1622, 0, %r1528, %p33;
	.loc	1 37 51                         // test.py:37:51
	setp.lt.s32 	%p34, %r13, %r1620;
	.loc	1 37 20                         // test.py:37:20
	shl.b32 	%r1529, %r1622, 13;
	add.s32 	%r1530, %r1504, %r1529;
	bar.sync 	0;
	add.s32 	%r1477, %r1530, %r380;
	add.s32 	%r1479, %r1477, 2048;
	add.s32 	%r1481, %r1477, 4096;
	add.s32 	%r1483, %r1477, 6144;
	selp.b32 	%r1532, 16, 0, %p34;
	selp.b32 	%r1480, %r1532, 0, %p31;
	// begin inline asm
	cp.async.cg.shared.global [ %r1477 + 0 ], [ %rd135 + 0 ], 0x10, %r1480;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1479 + 0 ], [ %rd136 + 0 ], 0x10, %r1480;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1481 + 0 ], [ %rd137 + 0 ], 0x10, %r1480;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1483 + 0 ], [ %rd138 + 0 ], 0x10, %r1480;
	// end inline asm
	cp.async.commit_group;
	.loc	1 38 51                         // test.py:38:51
	setp.lt.s32 	%p35, %r4, %r1620;
	setp.lt.s32 	%p36, %r5, %r1620;
	setp.lt.s32 	%p37, %r6, %r1620;
	setp.lt.s32 	%p38, %r7, %r1620;
	setp.lt.s32 	%p39, %r8, %r1620;
	setp.lt.s32 	%p40, %r9, %r1620;
	setp.lt.s32 	%p41, %r10, %r1620;
	setp.lt.s32 	%p42, %r11, %r1620;
	.loc	1 38 20                         // test.py:38:20
	shl.b32 	%r1533, %r1622, 14;
	add.s32 	%r1534, %r381, %r1533;
	add.s32 	%r1485, %r1534, %r387;
	add.s32 	%r1487, %r1485, 2048;
	add.s32 	%r1489, %r1485, 4096;
	add.s32 	%r1491, %r1485, 6144;
	add.s32 	%r1493, %r1485, 8192;
	add.s32 	%r1495, %r1485, 10240;
	add.s32 	%r1497, %r1485, 12288;
	add.s32 	%r1499, %r1485, 14336;
	selp.b32 	%r1536, 16, 0, %p35;
	selp.b32 	%r1486, %r1536, 0, %p31;
	// begin inline asm
	cp.async.cg.shared.global [ %r1485 + 0 ], [ %rd102 + 0 ], 0x10, %r1486;
	// end inline asm
	selp.b32 	%r1537, 16, 0, %p36;
	selp.b32 	%r1488, %r1537, 0, %p31;
	// begin inline asm
	cp.async.cg.shared.global [ %r1487 + 0 ], [ %rd103 + 0 ], 0x10, %r1488;
	// end inline asm
	selp.b32 	%r1538, 16, 0, %p37;
	selp.b32 	%r1490, %r1538, 0, %p31;
	// begin inline asm
	cp.async.cg.shared.global [ %r1489 + 0 ], [ %rd104 + 0 ], 0x10, %r1490;
	// end inline asm
	selp.b32 	%r1539, 16, 0, %p38;
	selp.b32 	%r1492, %r1539, 0, %p31;
	// begin inline asm
	cp.async.cg.shared.global [ %r1491 + 0 ], [ %rd105 + 0 ], 0x10, %r1492;
	// end inline asm
	selp.b32 	%r1540, 16, 0, %p39;
	selp.b32 	%r1494, %r1540, 0, %p31;
	// begin inline asm
	cp.async.cg.shared.global [ %r1493 + 0 ], [ %rd106 + 0 ], 0x10, %r1494;
	// end inline asm
	selp.b32 	%r1541, 16, 0, %p40;
	selp.b32 	%r1496, %r1541, 0, %p31;
	// begin inline asm
	cp.async.cg.shared.global [ %r1495 + 0 ], [ %rd107 + 0 ], 0x10, %r1496;
	// end inline asm
	selp.b32 	%r1542, 16, 0, %p41;
	selp.b32 	%r1498, %r1542, 0, %p31;
	// begin inline asm
	cp.async.cg.shared.global [ %r1497 + 0 ], [ %rd108 + 0 ], 0x10, %r1498;
	// end inline asm
	selp.b32 	%r1543, 16, 0, %p42;
	selp.b32 	%r1500, %r1543, 0, %p31;
	// begin inline asm
	cp.async.cg.shared.global [ %r1499 + 0 ], [ %rd109 + 0 ], 0x10, %r1500;
	// end inline asm
	cp.async.commit_group;
	.loc	1 36 22                         // test.py:36:22
	add.s32 	%r1687, %r1687, 1;
	add.s64 	%rd139, %rd139, %rd16;
	add.s64 	%rd138, %rd138, 128;
	add.s64 	%rd137, %rd137, 128;
	add.s64 	%rd136, %rd136, 128;
	add.s64 	%rd135, %rd135, 128;
	add.s32 	%r1620, %r1620, -64;
	setp.ne.s32 	%p43, %r15, %r1687;
	@%p43 bra 	$L__BB0_3;
// %bb.4:                               // %._crit_edge.loopexit
	.loc	1 42 23                         // test.py:42:23
	cvt.rn.f16x2.f32 	%r1720, %r1686, %r1685;
	cvt.rn.f16x2.f32 	%r1719, %r1684, %r1683;
	cvt.rn.f16x2.f32 	%r1718, %r1682, %r1681;
	cvt.rn.f16x2.f32 	%r1717, %r1680, %r1679;
	cvt.rn.f16x2.f32 	%r1716, %r1678, %r1677;
	cvt.rn.f16x2.f32 	%r1715, %r1676, %r1675;
	cvt.rn.f16x2.f32 	%r1714, %r1674, %r1673;
	cvt.rn.f16x2.f32 	%r1713, %r1672, %r1671;
	cvt.rn.f16x2.f32 	%r1712, %r1670, %r1669;
	cvt.rn.f16x2.f32 	%r1711, %r1668, %r1667;
	cvt.rn.f16x2.f32 	%r1710, %r1666, %r1665;
	cvt.rn.f16x2.f32 	%r1709, %r1664, %r1663;
	cvt.rn.f16x2.f32 	%r1708, %r1662, %r1661;
	cvt.rn.f16x2.f32 	%r1707, %r1660, %r1659;
	cvt.rn.f16x2.f32 	%r1706, %r1658, %r1657;
	cvt.rn.f16x2.f32 	%r1705, %r1656, %r1655;
	cvt.rn.f16x2.f32 	%r1704, %r1654, %r1653;
	cvt.rn.f16x2.f32 	%r1703, %r1652, %r1651;
	cvt.rn.f16x2.f32 	%r1702, %r1650, %r1649;
	cvt.rn.f16x2.f32 	%r1701, %r1648, %r1647;
	cvt.rn.f16x2.f32 	%r1700, %r1646, %r1645;
	cvt.rn.f16x2.f32 	%r1699, %r1644, %r1643;
	cvt.rn.f16x2.f32 	%r1698, %r1642, %r1641;
	cvt.rn.f16x2.f32 	%r1697, %r1640, %r1639;
	cvt.rn.f16x2.f32 	%r1696, %r1638, %r1637;
	cvt.rn.f16x2.f32 	%r1695, %r1636, %r1635;
	cvt.rn.f16x2.f32 	%r1694, %r1634, %r1633;
	cvt.rn.f16x2.f32 	%r1693, %r1632, %r1631;
	cvt.rn.f16x2.f32 	%r1692, %r1630, %r1629;
	cvt.rn.f16x2.f32 	%r1691, %r1628, %r1627;
	cvt.rn.f16x2.f32 	%r1690, %r1626, %r1625;
	cvt.rn.f16x2.f32 	%r1689, %r1624, %r1623;
	bra.uni 	$L__BB0_5;
$L__BB0_1:                              // %.._crit_edge_crit_edge
	.loc	1 48 21                         // test.py:48:21
	shr.u32 	%r440, %r2, 2;
	and.b32 	%r1688, %r440, 24;
	mov.b32 	%r1689, 0;
	mov.b32 	%r1690, %r1689;
	mov.b32 	%r1691, %r1689;
	mov.b32 	%r1692, %r1689;
	mov.b32 	%r1693, %r1689;
	mov.b32 	%r1694, %r1689;
	mov.b32 	%r1695, %r1689;
	mov.b32 	%r1696, %r1689;
	mov.b32 	%r1697, %r1689;
	mov.b32 	%r1698, %r1689;
	mov.b32 	%r1699, %r1689;
	mov.b32 	%r1700, %r1689;
	mov.b32 	%r1701, %r1689;
	mov.b32 	%r1702, %r1689;
	mov.b32 	%r1703, %r1689;
	mov.b32 	%r1704, %r1689;
	mov.b32 	%r1705, %r1689;
	mov.b32 	%r1706, %r1689;
	mov.b32 	%r1707, %r1689;
	mov.b32 	%r1708, %r1689;
	mov.b32 	%r1709, %r1689;
	mov.b32 	%r1710, %r1689;
	mov.b32 	%r1711, %r1689;
	mov.b32 	%r1712, %r1689;
	mov.b32 	%r1713, %r1689;
	mov.b32 	%r1714, %r1689;
	mov.b32 	%r1715, %r1689;
	mov.b32 	%r1716, %r1689;
	mov.b32 	%r1717, %r1689;
	mov.b32 	%r1718, %r1689;
	mov.b32 	%r1719, %r1689;
	mov.b32 	%r1720, %r1689;
$L__BB0_5:                              // %._crit_edge
	.loc	1 29 38                         // test.py:29:38
	or.b32 	%r1576, %r1, %r11;
	or.b32 	%r1577, %r1, %r10;
	or.b32 	%r1578, %r1, %r9;
	or.b32 	%r1579, %r1, %r8;
	or.b32 	%r1580, %r1, %r7;
	or.b32 	%r1581, %r1, %r6;
	or.b32 	%r1582, %r1, %r5;
	or.b32 	%r1583, %r1, %r4;
	.loc	1 36 22                         // test.py:36:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 46 33                         // test.py:46:33
	mul.lo.s32 	%r1584, %r1583, %r247;
	mul.lo.s32 	%r1585, %r1582, %r247;
	mul.lo.s32 	%r1586, %r1581, %r247;
	mul.lo.s32 	%r1587, %r1580, %r247;
	mul.lo.s32 	%r1588, %r1579, %r247;
	mul.lo.s32 	%r1589, %r1578, %r247;
	mul.lo.s32 	%r1590, %r1577, %r247;
	mul.lo.s32 	%r1591, %r1576, %r247;
	.loc	1 46 21                         // test.py:46:21
	mul.wide.s32 	%rd118, %r1584, 2;
	add.s64 	%rd119, %rd40, %rd118;
	mul.wide.s32 	%rd120, %r1585, 2;
	add.s64 	%rd121, %rd40, %rd120;
	mul.wide.s32 	%rd122, %r1586, 2;
	add.s64 	%rd123, %rd40, %rd122;
	mul.wide.s32 	%rd124, %r1587, 2;
	add.s64 	%rd125, %rd40, %rd124;
	mul.wide.s32 	%rd126, %r1588, 2;
	add.s64 	%rd127, %rd40, %rd126;
	mul.wide.s32 	%rd128, %r1589, 2;
	add.s64 	%rd129, %rd40, %rd128;
	mul.wide.s32 	%rd130, %r1590, 2;
	add.s64 	%rd131, %rd40, %rd130;
	mul.wide.s32 	%rd132, %r1591, 2;
	add.s64 	%rd133, %rd40, %rd132;
	.loc	1 46 52                         // test.py:46:52
	mul.wide.s32 	%rd134, %r14, 2;
	add.s64 	%rd110, %rd119, %rd134;
	add.s64 	%rd111, %rd121, %rd134;
	add.s64 	%rd112, %rd123, %rd134;
	add.s64 	%rd113, %rd125, %rd134;
	add.s64 	%rd114, %rd127, %rd134;
	add.s64 	%rd115, %rd129, %rd134;
	add.s64 	%rd116, %rd131, %rd134;
	add.s64 	%rd117, %rd133, %rd134;
	.loc	1 47 33                         // test.py:47:33
	setp.lt.s32 	%p52, %r1583, %r244;
	setp.lt.s32 	%p53, %r1582, %r244;
	setp.lt.s32 	%p54, %r1581, %r244;
	setp.lt.s32 	%p55, %r1580, %r244;
	setp.lt.s32 	%p56, %r1579, %r244;
	setp.lt.s32 	%p57, %r1578, %r244;
	setp.lt.s32 	%p58, %r1577, %r244;
	setp.lt.s32 	%p59, %r1576, %r244;
	.loc	1 47 58                         // test.py:47:58
	setp.lt.s32 	%p60, %r14, %r245;
	.loc	1 47 39                         // test.py:47:39
	and.pred 	%p44, %p52, %p60;
	and.pred 	%p45, %p53, %p60;
	and.pred 	%p46, %p54, %p60;
	and.pred 	%p47, %p55, %p60;
	and.pred 	%p48, %p56, %p60;
	and.pred 	%p49, %p57, %p60;
	and.pred 	%p50, %p58, %p60;
	and.pred 	%p51, %p59, %p60;
	.loc	1 48 21                         // test.py:48:21
	shl.b32 	%r1592, %r2, 1;
	and.b32 	%r1593, %r1592, 6;
	shl.b32 	%r1594, %r2, 5;
	and.b32 	%r1595, %r1594, 384;
	or.b32 	%r1596, %r1595, %r1593;
	shl.b32 	%r1597, %r3, 5;
	or.b32 	%r1598, %r1596, %r1597;
	or.b32 	%r1599, %r1598, %r1688;
	and.b32 	%r1600, %r12, 1016;
	shr.u32 	%r1601, %r1598, 3;
	add.s32 	%r1603, %r381, %r1601;
	shl.b32 	%r1604, %r1599, 1;
	add.s32 	%r1605, %r1603, %r1604;
	st.shared.b32 	[%r1605], %r1689;
	or.b32 	%r1606, %r1598, 1024;
	shr.u32 	%r1607, %r1606, 3;
	and.b32 	%r1608, %r1607, 240;
	add.s32 	%r1609, %r381, %r1608;
	add.s32 	%r1610, %r1609, %r1604;
	st.shared.b32 	[%r1610+2048], %r1690;
	st.shared.b32 	[%r1605+64], %r1691;
	st.shared.b32 	[%r1610+2112], %r1692;
	st.shared.b32 	[%r1605+128], %r1693;
	st.shared.b32 	[%r1610+2176], %r1694;
	st.shared.b32 	[%r1605+192], %r1695;
	st.shared.b32 	[%r1610+2240], %r1696;
	bar.sync 	0;
	shl.b32 	%r1611, %r17, 1;
	add.s32 	%r1612, %r381, %r1611;
	shl.b32 	%r1613, %r1600, 1;
	add.s32 	%r1614, %r1612, %r1613;
	ld.shared.v4.b32 	{%r1544, %r1545, %r1546, %r1547}, [%r1614];
	or.b32 	%r1615, %r1600, 1024;
	shr.u32 	%r1616, %r1615, 3;
	and.b32 	%r1617, %r1616, 240;
	add.s32 	%r1618, %r381, %r1617;
	add.s32 	%r1619, %r1618, %r1613;
	ld.shared.v4.b32 	{%r1548, %r1549, %r1550, %r1551}, [%r1619+2048];
	bar.sync 	0;
	st.shared.b32 	[%r1605], %r1697;
	st.shared.b32 	[%r1610+2048], %r1698;
	st.shared.b32 	[%r1605+64], %r1699;
	st.shared.b32 	[%r1610+2112], %r1700;
	st.shared.b32 	[%r1605+128], %r1701;
	st.shared.b32 	[%r1610+2176], %r1702;
	st.shared.b32 	[%r1605+192], %r1703;
	st.shared.b32 	[%r1610+2240], %r1704;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r1552, %r1553, %r1554, %r1555}, [%r1614];
	ld.shared.v4.b32 	{%r1556, %r1557, %r1558, %r1559}, [%r1619+2048];
	bar.sync 	0;
	st.shared.b32 	[%r1605], %r1705;
	st.shared.b32 	[%r1610+2048], %r1706;
	st.shared.b32 	[%r1605+64], %r1707;
	st.shared.b32 	[%r1610+2112], %r1708;
	st.shared.b32 	[%r1605+128], %r1709;
	st.shared.b32 	[%r1610+2176], %r1710;
	st.shared.b32 	[%r1605+192], %r1711;
	st.shared.b32 	[%r1610+2240], %r1712;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r1560, %r1561, %r1562, %r1563}, [%r1614];
	ld.shared.v4.b32 	{%r1564, %r1565, %r1566, %r1567}, [%r1619+2048];
	bar.sync 	0;
	st.shared.b32 	[%r1605], %r1713;
	st.shared.b32 	[%r1610+2048], %r1714;
	st.shared.b32 	[%r1605+64], %r1715;
	st.shared.b32 	[%r1610+2112], %r1716;
	st.shared.b32 	[%r1605+128], %r1717;
	st.shared.b32 	[%r1610+2176], %r1718;
	st.shared.b32 	[%r1605+192], %r1719;
	st.shared.b32 	[%r1610+2240], %r1720;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r1568, %r1569, %r1570, %r1571}, [%r1614];
	ld.shared.v4.b32 	{%r1572, %r1573, %r1574, %r1575}, [%r1619+2048];
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd110 + 0 ], { %r1544, %r1545, %r1546, %r1547 };
	// end inline asm
	// begin inline asm
	@%p45 st.global.v4.b32 [ %rd111 + 0 ], { %r1548, %r1549, %r1550, %r1551 };
	// end inline asm
	// begin inline asm
	@%p46 st.global.v4.b32 [ %rd112 + 0 ], { %r1552, %r1553, %r1554, %r1555 };
	// end inline asm
	// begin inline asm
	@%p47 st.global.v4.b32 [ %rd113 + 0 ], { %r1556, %r1557, %r1558, %r1559 };
	// end inline asm
	// begin inline asm
	@%p48 st.global.v4.b32 [ %rd114 + 0 ], { %r1560, %r1561, %r1562, %r1563 };
	// end inline asm
	// begin inline asm
	@%p49 st.global.v4.b32 [ %rd115 + 0 ], { %r1564, %r1565, %r1566, %r1567 };
	// end inline asm
	// begin inline asm
	@%p50 st.global.v4.b32 [ %rd116 + 0 ], { %r1568, %r1569, %r1570, %r1571 };
	// end inline asm
	// begin inline asm
	@%p51 st.global.v4.b32 [ %rd117 + 0 ], { %r1572, %r1573, %r1574, %r1575 };
	// end inline asm
	.loc	1 48 4                          // test.py:48:4
	ret;
$L__tmp6:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/root/triton-runner/triton_issue/performance#7096/test.py"
	.file	2 "/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 190                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xb7 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 116                                 // DW_AT_name
.b8 101
.b8 115
.b8 116
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 114
.b8 111
.b8 111
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 45
.b8 114
.b8 117
.b8 110
.b8 110
.b8 101
.b8 114
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 105
.b8 115
.b8 115
.b8 117
.b8 101
.b8 47
.b8 112
.b8 101
.b8 114
.b8 102
.b8 111
.b8 114
.b8 109
.b8 97
.b8 110
.b8 99
.b8 101
.b8 35
.b8 55
.b8 48
.b8 57
.b8 54
.b8 0
.b8 2                                   // Abbrev [2] 0x53:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x63:0x5e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 83                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x78:0x18 DW_TAG_inlined_subroutine
.b32 83                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 20                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x90:0x18 DW_TAG_inlined_subroutine
.b32 83                                 // DW_AT_abstract_origin
.b64 $L__tmp2                           // DW_AT_low_pc
.b64 $L__tmp3                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 21                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xa8:0x18 DW_TAG_inlined_subroutine
.b32 83                                 // DW_AT_abstract_origin
.b64 $L__tmp4                           // DW_AT_low_pc
.b64 $L__tmp5                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 36                                  // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
