#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [1, 4], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/triton_issue/performance#7096/test.py":10:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x128xf32, #mma> loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x128xf16, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf16, #blocked1> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<64x64xi32, #blocked1> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c63_i32 : i32 loc(#loc57)
    %2 = arith.divsi %1, %c64_i32 : i32 loc(#loc58)
    %3 = arith.addi %arg4, %c127_i32 : i32 loc(#loc59)
    %4 = arith.divsi %3, %c128_i32 : i32 loc(#loc60)
    %5 = arith.muli %4, %c8_i32 : i32 loc(#loc7)
    %6 = arith.divsi %0, %5 : i32 loc(#loc8)
    %7 = arith.muli %6, %c8_i32 : i32 loc(#loc9)
    %8 = arith.subi %2, %7 : i32 loc(#loc10)
    %9 = arith.minsi %8, %c8_i32 : i32 loc(#loc11)
    %10 = arith.remsi %0, %5 : i32 loc(#loc12)
    %11 = arith.remsi %10, %9 : i32 loc(#loc13)
    %12 = arith.addi %7, %11 : i32 loc(#loc14)
    %13 = arith.divsi %10, %9 : i32 loc(#loc15)
    %14 = arith.muli %12, %c64_i32 : i32 loc(#loc16)
    %15 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc17)
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc17)
    %17 = tt.splat %14 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc18)
    %18 = tt.splat %14 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %19 = arith.addi %17, %15 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc18)
    %20 = arith.addi %18, %16 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %21 = tt.splat %arg3 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc19)
    %22 = arith.remsi %19, %21 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc19)
    %23 = arith.muli %13, %c128_i32 : i32 loc(#loc20)
    %24 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc21)
    %25 = tt.splat %23 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %26 = arith.addi %25, %24 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %27 = tt.splat %arg4 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc23)
    %28 = arith.remsi %26, %27 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc23)
    %29 = tt.expand_dims %22 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc24)
    %30 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc25)
    %31 = arith.muli %29, %30 : tensor<64x1xi32, #blocked1> loc(#loc25)
    %32 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %33 = tt.expand_dims %32 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc26)
    %34 = tt.broadcast %31 : tensor<64x1xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc27)
    %35 = tt.broadcast %33 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc27)
    %36 = arith.addi %34, %35 : tensor<64x64xi32, #blocked1> loc(#loc27)
    %37 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked1> loc(#loc28)
    %38 = tt.addptr %37, %36 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc28)
    %39 = tt.expand_dims %16 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc29)
    %40 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc30)
    %41 = arith.muli %39, %40 : tensor<64x1xi32, #blocked> loc(#loc30)
    %42 = tt.expand_dims %28 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc31)
    %43 = tt.broadcast %41 : tensor<64x1xi32, #blocked> -> tensor<64x128xi32, #blocked> loc(#loc32)
    %44 = tt.broadcast %42 : tensor<1x128xi32, #blocked> -> tensor<64x128xi32, #blocked> loc(#loc32)
    %45 = arith.addi %43, %44 : tensor<64x128xi32, #blocked> loc(#loc32)
    %46 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x128x!tt.ptr<f16>, #blocked> loc(#loc33)
    %47 = tt.addptr %46, %45 : tensor<64x128x!tt.ptr<f16>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc33)
    %48 = arith.addi %arg5, %c63_i32 : i32 loc(#loc61)
    %49 = arith.divsi %48, %c64_i32 : i32 loc(#loc62)
    %50 = arith.muli %arg7, %c64_i32 : i32 loc(#loc35)
    %51 = tt.splat %50 : i32 -> tensor<64x128xi32, #blocked> loc(#loc36)
    %52 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xf16, #shared, #smem, mutable> loc(#loc37)
    %53 = ttg.local_alloc : () -> !ttg.memdesc<3x64x128xf16, #shared, #smem, mutable> loc(#loc38)
    %54 = arith.cmpi sgt, %49, %c0_i32 : i32 loc(#loc39)
    %55 = tt.splat %arg5 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc40)
    %56 = arith.cmpi slt, %33, %55 : tensor<1x64xi32, #blocked1> loc(#loc40)
    %57 = tt.broadcast %56 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %58 = ttg.memdesc_subview %52[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 3x64x64> loc(#loc37)
    %59 = tt.splat %54 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %60 = arith.andi %59, %57 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %61 = ttg.async_copy_global_to_local %38, %58 mask %60 other %cst_1 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 3x64x64> loc(#loc37)
    %62 = ttg.async_commit_group %61 loc(#loc37)
    %63 = tt.splat %arg5 : i32 -> tensor<64x1xi32, #blocked> loc(#loc41)
    %64 = arith.cmpi slt, %39, %63 : tensor<64x1xi32, #blocked> loc(#loc41)
    %65 = tt.broadcast %64 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc38)
    %66 = ttg.memdesc_subview %53[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 3x64x128> loc(#loc38)
    %67 = tt.splat %54 : i1 -> tensor<64x128xi1, #blocked> loc(#loc39)
    %68 = arith.andi %67, %65 : tensor<64x128xi1, #blocked> loc(#loc39)
    %69 = ttg.async_copy_global_to_local %47, %66 mask %68 other %cst_0 : tensor<64x128x!tt.ptr<f16>, #blocked> -> <64x128xf16, #shared, #smem, mutable, 3x64x128> loc(#loc38)
    %70 = ttg.async_commit_group %69 loc(#loc38)
    %71 = arith.cmpi sgt, %49, %c1_i32 : i32 loc(#loc39)
    %72 = tt.addptr %38, %cst_2 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc42)
    %73 = tt.addptr %47, %51 : tensor<64x128x!tt.ptr<f16>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc36)
    %74 = arith.subi %arg5, %c64_i32 : i32 loc(#loc43)
    %75 = tt.splat %74 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc40)
    %76 = arith.cmpi slt, %33, %75 : tensor<1x64xi32, #blocked1> loc(#loc40)
    %77 = tt.broadcast %76 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %78 = ttg.memdesc_subview %52[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 3x64x64> loc(#loc37)
    %79 = tt.splat %71 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %80 = arith.andi %79, %77 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %81 = ttg.async_copy_global_to_local %72, %78 mask %80 other %cst_1 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 3x64x64> loc(#loc37)
    %82 = ttg.async_commit_group %81 loc(#loc37)
    %83 = tt.splat %74 : i32 -> tensor<64x1xi32, #blocked> loc(#loc41)
    %84 = arith.cmpi slt, %39, %83 : tensor<64x1xi32, #blocked> loc(#loc41)
    %85 = tt.broadcast %84 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc38)
    %86 = ttg.memdesc_subview %53[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 3x64x128> loc(#loc38)
    %87 = tt.splat %71 : i1 -> tensor<64x128xi1, #blocked> loc(#loc39)
    %88 = arith.andi %87, %85 : tensor<64x128xi1, #blocked> loc(#loc39)
    %89 = ttg.async_copy_global_to_local %73, %86 mask %88 other %cst_0 : tensor<64x128x!tt.ptr<f16>, #blocked> -> <64x128xf16, #shared, #smem, mutable, 3x64x128> loc(#loc38)
    %90 = ttg.async_commit_group %89 loc(#loc38)
    %91 = arith.cmpi sgt, %49, %c2_i32 : i32 loc(#loc39)
    %92 = tt.addptr %72, %cst_2 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc42)
    %93 = tt.addptr %73, %51 : tensor<64x128x!tt.ptr<f16>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc36)
    %94 = arith.subi %arg5, %c128_i32 : i32 loc(#loc43)
    %95 = tt.splat %94 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc40)
    %96 = arith.cmpi slt, %33, %95 : tensor<1x64xi32, #blocked1> loc(#loc40)
    %97 = tt.broadcast %96 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %98 = ttg.memdesc_subview %52[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 3x64x64> loc(#loc37)
    %99 = tt.splat %91 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %100 = arith.andi %99, %97 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %101 = ttg.async_copy_global_to_local %92, %98 mask %100 other %cst_1 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 3x64x64> loc(#loc37)
    %102 = ttg.async_commit_group %101 loc(#loc37)
    %103 = tt.splat %94 : i32 -> tensor<64x1xi32, #blocked> loc(#loc41)
    %104 = arith.cmpi slt, %39, %103 : tensor<64x1xi32, #blocked> loc(#loc41)
    %105 = tt.broadcast %104 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc38)
    %106 = ttg.memdesc_subview %53[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 3x64x128> loc(#loc38)
    %107 = tt.splat %91 : i1 -> tensor<64x128xi1, #blocked> loc(#loc39)
    %108 = arith.andi %107, %105 : tensor<64x128xi1, #blocked> loc(#loc39)
    %109 = ttg.async_copy_global_to_local %93, %106 mask %108 other %cst_0 : tensor<64x128x!tt.ptr<f16>, #blocked> -> <64x128xf16, #shared, #smem, mutable, 3x64x128> loc(#loc38)
    %110 = ttg.async_commit_group %109 loc(#loc38)
    %111:11 = scf.for %arg9 = %c0_i32 to %49 step %c1_i32 iter_args(%arg10 = %cst, %arg11 = %92, %arg12 = %93, %arg13 = %c2_i32, %arg14 = %c-1_i32, %arg15 = %62, %arg16 = %82, %arg17 = %102, %arg18 = %70, %arg19 = %90, %arg20 = %110) -> (tensor<64x128xf32, #mma>, tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x128x!tt.ptr<f16>, #blocked>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %131 = arith.subi %49, %c3_i32 : i32 loc(#loc39)
      %132 = arith.cmpi slt, %arg9, %131 : i32 loc(#loc39)
      %133 = arith.addi %arg14, %c1_i32 : i32 loc(#loc39)
      %134 = arith.cmpi sge, %133, %c3_i32 : i32 loc(#loc39)
      %135 = arith.select %134, %c0_i32, %133 : i32 loc(#loc39)
      %136 = ttg.async_wait %arg15, %arg18 {num = 4 : i32} loc(#loc37)
      %137 = ttg.memdesc_subview %52[%135, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 3x64x64> loc(#loc37)
      %138 = ttg.local_load %137 token %136 : !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc37)
      %139 = ttg.memdesc_subview %53[%135, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 3x64x128> loc(#loc38)
      %140 = ttg.local_load %139 token %136 : !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 3x64x128> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc38)
      %141 = tt.dot %138, %140, %arg10, inputPrecision = tf32 : tensor<64x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x128xf32, #mma> loc(#loc44)
      %142 = tt.addptr %arg11, %cst_2 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc42)
      %143 = tt.addptr %arg12, %51 : tensor<64x128x!tt.ptr<f16>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc36)
      %144 = arith.addi %arg13, %c1_i32 : i32 loc(#loc39)
      %145 = arith.cmpi sge, %144, %c3_i32 : i32 loc(#loc39)
      %146 = arith.select %145, %c0_i32, %144 : i32 loc(#loc39)
      %147 = arith.addi %arg9, %c3_i32 : i32 loc(#loc39)
      %148 = arith.muli %147, %c64_i32 : i32 loc(#loc45)
      %149 = arith.subi %arg5, %148 : i32 loc(#loc43)
      %150 = tt.splat %149 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc40)
      %151 = arith.cmpi slt, %33, %150 : tensor<1x64xi32, #blocked1> loc(#loc40)
      %152 = tt.broadcast %151 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
      %153 = ttg.memdesc_subview %52[%146, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 3x64x64> loc(#loc37)
      %154 = tt.splat %132 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
      %155 = arith.andi %154, %152 : tensor<64x64xi1, #blocked1> loc(#loc39)
      %156 = ttg.async_copy_global_to_local %142, %153 mask %155 other %cst_1 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 3x64x64> loc(#loc37)
      %157 = ttg.async_commit_group %156 loc(#loc37)
      %158 = tt.splat %149 : i32 -> tensor<64x1xi32, #blocked> loc(#loc41)
      %159 = arith.cmpi slt, %39, %158 : tensor<64x1xi32, #blocked> loc(#loc41)
      %160 = tt.broadcast %159 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc38)
      %161 = ttg.memdesc_subview %53[%146, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 3x64x128> loc(#loc38)
      %162 = tt.splat %132 : i1 -> tensor<64x128xi1, #blocked> loc(#loc39)
      %163 = arith.andi %162, %160 : tensor<64x128xi1, #blocked> loc(#loc39)
      %164 = ttg.async_copy_global_to_local %143, %161 mask %163 other %cst_0 : tensor<64x128x!tt.ptr<f16>, #blocked> -> <64x128xf16, #shared, #smem, mutable, 3x64x128> loc(#loc38)
      %165 = ttg.async_commit_group %164 loc(#loc38)
      scf.yield %141, %142, %143, %146, %135, %arg16, %arg17, %157, %arg19, %arg20, %165 : tensor<64x128xf32, #mma>, tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x128x!tt.ptr<f16>, #blocked>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc39)
    } loc(#loc39)
    %112 = ttg.async_wait  {num = 0 : i32} loc(#loc39)
    ttg.local_dealloc %53 : !ttg.memdesc<3x64x128xf16, #shared, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %52 : !ttg.memdesc<3x64x64xf16, #shared, #smem, mutable> loc(#loc39)
    %113 = arith.truncf %111#0 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc46)
    %114 = tt.expand_dims %20 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc47)
    %115 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked> loc(#loc48)
    %116 = arith.muli %115, %114 : tensor<64x1xi32, #blocked> loc(#loc48)
    %117 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked> loc(#loc49)
    %118 = tt.addptr %117, %116 : tensor<64x1x!tt.ptr<f16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc49)
    %119 = tt.expand_dims %26 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc50)
    %120 = tt.broadcast %118 : tensor<64x1x!tt.ptr<f16>, #blocked> -> tensor<64x128x!tt.ptr<f16>, #blocked> loc(#loc51)
    %121 = tt.broadcast %119 : tensor<1x128xi32, #blocked> -> tensor<64x128xi32, #blocked> loc(#loc51)
    %122 = tt.addptr %120, %121 : tensor<64x128x!tt.ptr<f16>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc51)
    %123 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc52)
    %124 = arith.cmpi slt, %114, %123 : tensor<64x1xi32, #blocked> loc(#loc52)
    %125 = tt.splat %arg4 : i32 -> tensor<1x128xi32, #blocked> loc(#loc53)
    %126 = arith.cmpi slt, %119, %125 : tensor<1x128xi32, #blocked> loc(#loc53)
    %127 = tt.broadcast %124 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc54)
    %128 = tt.broadcast %126 : tensor<1x128xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc54)
    %129 = arith.andi %127, %128 : tensor<64x128xi1, #blocked> loc(#loc54)
    %130 = ttg.convert_layout %113 : tensor<64x128xf16, #mma> -> tensor<64x128xf16, #blocked> loc(#loc55)
    tt.store %122, %130, %129 : tensor<64x128x!tt.ptr<f16>, #blocked> loc(#loc55)
    tt.return loc(#loc56)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":19:24)
#loc3 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":40:22)
#loc4 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":20:27)
#loc5 = loc("/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py":40:28)
#loc6 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":21:27)
#loc7 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":22:38)
#loc8 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":23:22)
#loc9 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":24:29)
#loc10 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":25:35)
#loc11 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":25:48)
#loc12 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":26:34)
#loc13 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":26:54)
#loc14 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":26:27)
#loc15 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":27:40)
#loc16 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":29:23)
#loc17 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":29:51)
#loc18 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":29:38)
#loc19 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":29:68)
#loc20 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":30:23)
#loc21 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":30:51)
#loc22 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":30:38)
#loc23 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":30:68)
#loc24 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":32:30)
#loc25 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":32:41)
#loc26 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":32:60)
#loc27 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":32:53)
#loc28 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":32:22)
#loc29 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":33:29)
#loc30 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":33:40)
#loc31 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":33:60)
#loc32 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":33:52)
#loc33 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":33:22)
#loc34 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":36:33)
#loc35 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":41:33)
#loc36 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":41:18)
#loc37 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":37:20)
#loc38 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":38:20)
#loc39 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":36:22)
#loc40 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":37:51)
#loc41 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":38:51)
#loc42 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":40:18)
#loc43 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":37:55)
#loc44 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":39:35)
#loc45 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":37:59)
#loc46 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":42:23)
#loc47 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":46:41)
#loc48 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":46:33)
#loc49 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":46:21)
#loc50 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":46:72)
#loc51 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":46:52)
#loc52 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":47:33)
#loc53 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":47:58)
#loc54 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":47:39)
#loc55 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":48:21)
#loc56 = loc("/root/triton-runner/triton_issue/performance#7096/test.py":48:4)
#loc57 = loc(callsite(#loc3 at #loc4))
#loc58 = loc(callsite(#loc5 at #loc4))
#loc59 = loc(callsite(#loc3 at #loc6))
#loc60 = loc(callsite(#loc5 at #loc6))
#loc61 = loc(callsite(#loc3 at #loc34))
#loc62 = loc(callsite(#loc5 at #loc34))
